/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { catchError, map } from 'rxjs/operators';
import { Router, NavigationEnd } from '@angular/router';
import { AUTHTICATION_SERVER_ROOT_URI } from './tokens';
export class AuthenticationService {
    /**
     * @param {?} authServerRootUri
     * @param {?} router
     * @param {?} http
     */
    constructor(authServerRootUri, router, http) {
        this.authServerRootUri = authServerRootUri;
        this.router = router;
        this.http = http;
        this.adminInterface = false;
        this.navigateEndTime = Date.now();
        router.events.subscribe(event => {
            if (event instanceof NavigationEnd) {
                this.previousUrl = this.currentUrl;
                this.navigateEndTime = Date.now();
                if (event.urlAfterRedirects) {
                    this.currentUrl = event.urlAfterRedirects;
                }
                else {
                    this.currentUrl = event.url;
                }
            }
        });
        this.adminInterface = JSON.parse(localStorage.getItem('adminInterface'));
    }
    /**
     * @return {?}
     */
    isAuthorized() {
        /** @type {?} */
        const authRecord = JSON.parse(localStorage.getItem('mdds-auth-record'));
        if (authRecord && authRecord['accessToken']) {
            return true;
        }
        return false;
    }
    /**
     * @private
     * @return {?}
     */
    getLogoutTime() {
        /** @type {?} */
        const authRecord = JSON.parse(localStorage.getItem('mdds-auth-record'));
        if (authRecord && 'logoutTs' in authRecord) {
            return authRecord.logoutTs;
        }
        return 0;
    }
    /**
     * @return {?}
     */
    getAccessToken() {
        /** @type {?} */
        const authRecord = JSON.parse(localStorage.getItem('mdds-auth-record'));
        if (authRecord) {
            return authRecord['accessToken'];
        }
        return null;
    }
    /**
     * @return {?}
     */
    refreshToken() {
        /** @type {?} */
        let authRecord = JSON.parse(localStorage.getItem('mdds-auth-record'));
        if (!authRecord) {
            authRecord = { refreshToken: '', userName: '' };
        }
        /** @type {?} */
        const refreshToken = authRecord['refreshToken'];
        /** @type {?} */
        const userName = authRecord['userName'];
        return this.http.post(this.authServerRootUri + '/refresh', { refreshToken: refreshToken, userName: userName }).pipe(map(this.loggedIn), catchError(error => {
            this.logout();
            return error;
        }));
    }
    /**
     * @param {?} response
     * @return {?}
     */
    refreshShouldHappen(response) {
        return response.status === 401;
    }
    /**
     * @param {?} url
     * @return {?}
     */
    verifyTokenRequest(url) {
        if (url.endsWith(this.authServerRootUri + '/refresh') ||
            url.endsWith(this.authServerRootUri + '/login')) {
            return true;
        }
        return false;
    }
    /**
     * @return {?}
     */
    getInterruptedUrl() {
        return this.interruptedUrl || '/';
    }
    /**
     * @return {?}
     */
    getRoutedFromUrl() {
        return this.routedFromUrl || '/';
    }
    /**
     * @param {?} url
     * @return {?}
     */
    setInterruptedUrl(url) {
        this.interruptedUrl = url;
        /** @type {?} */
        const currentTime = Date.now();
        if (currentTime - this.navigateEndTime > 1000) {
            // Happend > 1 sec. assume it is triggered from current page.
            this.routedFromUrl = this.currentUrl;
        }
        else {
            // page transitioned
            this.routedFromUrl = this.previousUrl;
        }
    }
    /**
     * @return {?}
     */
    getUserName() {
        /** @type {?} */
        let authRecord = JSON.parse(localStorage.getItem('mdds-auth-record'));
        if (!authRecord) {
            authRecord = { userName: '' };
        }
        return authRecord['userName'];
    }
    /**
     * @param {?} userName
     * @param {?} password
     * @return {?}
     */
    login(userName, password) {
        /** @type {?} */
        const authRecord = {
            userName: userName,
            accessToken: '',
            refreshToken: '',
            displayName: ''
        };
        localStorage.setItem('mdds-auth-record', JSON.stringify(authRecord));
        /** @type {?} */
        const options = this.adminInterface ?
            { params: new HttpParams().set('type', 'admin') } : {};
        return this.http.post(this.authServerRootUri + '/login', { username: userName, password: password }, options).pipe(map(this.loggedIn));
    }
    /**
     * @param {?} userInfo
     * @return {?}
     */
    register(userInfo) {
        localStorage.removeItem('mdds-auth-record');
        /** @type {?} */
        const authRecord = {
            userName: userInfo.userName,
            accessToken: '',
            refreshToken: '',
            displayName: userInfo.displayName
        };
        localStorage.setItem('mdds-auth-record', JSON.stringify(authRecord));
        /** @type {?} */
        const options = this.adminInterface ?
            { params: new HttpParams().set('type', 'admin') } : {};
        return this.http.post(this.authServerRootUri + '/register', userInfo, options);
    }
    /**
     * @param {?} user
     * @return {?}
     */
    loggedIn(user) {
        /** @type {?} */
        const authRecord = {
            userName: '',
            accessToken: '',
            refreshToken: '',
            displayName: ''
        };
        if (user && user.accessToken) {
            authRecord['accessToken'] = user.accessToken;
        }
        if (user && user.refreshToken) {
            authRecord['refreshToken'] = user.refreshToken;
        }
        if (user && user.displayName) {
            authRecord['displayName'] = user.displayName;
        }
        if (user && user.userName) {
            authRecord['userName'] = user.userName;
        }
        localStorage.setItem('mdds-auth-record', JSON.stringify(authRecord));
        return user;
    }
    /**
     * @return {?}
     */
    logout() {
        // remove user from local storage to log user out
        /** @type {?} */
        let authRecord = JSON.parse(localStorage.getItem('mdds-auth-record'));
        if (!authRecord) {
            authRecord = {};
        }
        authRecord.logoutTs = Date.now();
        authRecord.accessToken = '';
        authRecord.refreshToken = '';
        localStorage.setItem('mdds-auth-record', JSON.stringify(authRecord));
    }
    /**
     * @param {?} isAdminInterface
     * @return {?}
     */
    setAdminInterface(isAdminInterface) {
        this.adminInterface = isAdminInterface;
        localStorage.setItem('adminInterface', JSON.stringify(isAdminInterface));
    }
    /**
     * @return {?}
     */
    isAdminInterface() {
        return this.adminInterface;
    }
}
AuthenticationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AuthenticationService.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [AUTHTICATION_SERVER_ROOT_URI,] }] },
    { type: Router },
    { type: HttpClient }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype.interruptedUrl;
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype.routedFromUrl;
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype.previousUrl;
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype.currentUrl;
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype.navigateEndTime;
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype.adminInterface;
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype.authServerRootUri;
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbWRkcy1hbmd1bGFyLWF1dGgvIiwic291cmNlcyI6WyJhdXRoL2F1dGguc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQWtDLE1BQU0sc0JBQXNCLENBQUM7QUFDOUYsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQWlCLE1BQU0sZ0JBQWdCLENBQUM7QUFFaEUsT0FBTyxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUcsTUFBTSxpQkFBaUIsQ0FBQztBQUV6RCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFHeEQsTUFBTSxPQUFPLHFCQUFxQjs7Ozs7O0lBV2hDLFlBQ3dELGlCQUF5QixFQUMvRCxNQUFjLEVBQ2QsSUFBZ0I7UUFGc0Isc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFRO1FBQy9ELFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxTQUFJLEdBQUosSUFBSSxDQUFZO1FBTDFCLG1CQUFjLEdBQVksS0FBSyxDQUFDO1FBTXRDLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBRWxDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzlCLElBQUksS0FBSyxZQUFZLGFBQWEsRUFBRTtnQkFDbEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO2dCQUNuQyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztnQkFDbEMsSUFBSSxLQUFLLENBQUMsaUJBQWlCLEVBQUU7b0JBQzNCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLGlCQUFpQixDQUFDO2lCQUMzQztxQkFBTTtv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U0FBQyw0QkFBNEI7WUFqQnZDLE1BQU07WUFITixVQUFVOzs7Ozs7O0lBVWpCLCtDQUErQjs7Ozs7SUFDL0IsOENBQThCOzs7OztJQUU5Qiw0Q0FBNEI7Ozs7O0lBQzVCLDJDQUEyQjs7Ozs7SUFDM0IsZ0RBQWdDOzs7OztJQUVoQywrQ0FBd0M7Ozs7O0lBRzlCLGtEQUF1RTs7Ozs7SUFDdkUsdUNBQXNCOzs7OztJQUN0QixxQ0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBQYXJhbXMsIEh0dHBIZWFkZXJzLCBIdHRwRXJyb3JSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IGNhdGNoRXJyb3IsIG1hcCwgZmlsdGVyLCByZXRyeSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBSb3V0ZXIsIE5hdmlnYXRpb25FbmQgIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcblxuaW1wb3J0IHsgQVVUSFRJQ0FUSU9OX1NFUlZFUl9ST09UX1VSSSB9IGZyb20gJy4vdG9rZW5zJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEF1dGhlbnRpY2F0aW9uU2VydmljZSB7XG5cbiAgcHJpdmF0ZSBpbnRlcnJ1cHRlZFVybDogc3RyaW5nO1xuICBwcml2YXRlIHJvdXRlZEZyb21Vcmw6IHN0cmluZztcblxuICBwcml2YXRlIHByZXZpb3VzVXJsOiBzdHJpbmc7XG4gIHByaXZhdGUgY3VycmVudFVybDogc3RyaW5nO1xuICBwcml2YXRlIG5hdmlnYXRlRW5kVGltZTogbnVtYmVyO1xuICBcbiAgcHJpdmF0ZSBhZG1pbkludGVyZmFjZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgICAgICAgQEluamVjdChBVVRIVElDQVRJT05fU0VSVkVSX1JPT1RfVVJJKSBwcml2YXRlIGF1dGhTZXJ2ZXJSb290VXJpOiBzdHJpbmcsXG4gICAgICAgICAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgICAgICAgICAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50KSB7XG4gICAgdGhpcy5uYXZpZ2F0ZUVuZFRpbWUgPSBEYXRlLm5vdygpO1xuXG4gICAgcm91dGVyLmV2ZW50cy5zdWJzY3JpYmUoZXZlbnQgPT4ge1xuICAgICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgTmF2aWdhdGlvbkVuZCkge1xuICAgICAgICB0aGlzLnByZXZpb3VzVXJsID0gdGhpcy5jdXJyZW50VXJsO1xuICAgICAgICB0aGlzLm5hdmlnYXRlRW5kVGltZSA9IERhdGUubm93KCk7XG4gICAgICAgIGlmIChldmVudC51cmxBZnRlclJlZGlyZWN0cykge1xuICAgICAgICAgIHRoaXMuY3VycmVudFVybCA9IGV2ZW50LnVybEFmdGVyUmVkaXJlY3RzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY3VycmVudFVybCA9IGV2ZW50LnVybDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIHRoaXMuYWRtaW5JbnRlcmZhY2UgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhZG1pbkludGVyZmFjZScpKTtcbiAgfVxuXG4gIGlzQXV0aG9yaXplZCgpOiBib29sZWFuIHtcbiAgICBjb25zdCBhdXRoUmVjb3JkID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbWRkcy1hdXRoLXJlY29yZCcpKTtcbiAgICBpZiAoYXV0aFJlY29yZCAmJiBhdXRoUmVjb3JkWydhY2Nlc3NUb2tlbiddKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRMb2dvdXRUaW1lKCk6IG51bWJlciB7XG4gICAgY29uc3QgYXV0aFJlY29yZCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ21kZHMtYXV0aC1yZWNvcmQnKSk7XG4gICAgaWYgKGF1dGhSZWNvcmQgJiYgJ2xvZ291dFRzJyBpbiBhdXRoUmVjb3JkKSB7XG4gICAgICAgIHJldHVybiBhdXRoUmVjb3JkLmxvZ291dFRzO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRBY2Nlc3NUb2tlbigpOiBzdHJpbmcge1xuICAgIGNvbnN0IGF1dGhSZWNvcmQgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdtZGRzLWF1dGgtcmVjb3JkJykpO1xuICAgIGlmIChhdXRoUmVjb3JkKSB7XG4gICAgICByZXR1cm4gYXV0aFJlY29yZFsnYWNjZXNzVG9rZW4nXTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwdWJsaWMgcmVmcmVzaFRva2VuKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgbGV0IGF1dGhSZWNvcmQ6IGFueSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ21kZHMtYXV0aC1yZWNvcmQnKSk7XG4gICAgaWYgKCFhdXRoUmVjb3JkKSB7XG4gICAgICBhdXRoUmVjb3JkID0ge3JlZnJlc2hUb2tlbjogJycsIHVzZXJOYW1lOiAnJ307XG4gICAgfVxuICAgIGNvbnN0IHJlZnJlc2hUb2tlbjogc3RyaW5nID0gYXV0aFJlY29yZFsncmVmcmVzaFRva2VuJ107XG4gICAgY29uc3QgdXNlck5hbWU6IHN0cmluZyA9IGF1dGhSZWNvcmRbJ3VzZXJOYW1lJ107XG5cbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3Q8YW55PihcbiAgICAgICAgdGhpcy5hdXRoU2VydmVyUm9vdFVyaSArICcvcmVmcmVzaCcsXG4gICAgICAgIHtyZWZyZXNoVG9rZW46IHJlZnJlc2hUb2tlbiwgdXNlck5hbWU6IHVzZXJOYW1lfVxuICAgICAgKS5waXBlKFxuICAgICAgICBtYXAodGhpcy5sb2dnZWRJbiksXG4gICAgICAgIGNhdGNoRXJyb3IoZXJyb3IgPT4ge1xuICAgICAgICAgIHRoaXMubG9nb3V0KCk7XG4gICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyByZWZyZXNoU2hvdWxkSGFwcGVuKHJlc3BvbnNlOiBIdHRwRXJyb3JSZXNwb25zZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMgPT09IDQwMTtcbiAgfVxuXG4gIHB1YmxpYyB2ZXJpZnlUb2tlblJlcXVlc3QodXJsOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBpZiAoIHVybC5lbmRzV2l0aCh0aGlzLmF1dGhTZXJ2ZXJSb290VXJpICsgJy9yZWZyZXNoJykgfHxcbiAgICAgICAgdXJsLmVuZHNXaXRoKHRoaXMuYXV0aFNlcnZlclJvb3RVcmkgKyAnL2xvZ2luJykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcHVibGljIGdldEludGVycnVwdGVkVXJsKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuaW50ZXJydXB0ZWRVcmwgfHwgJy8nO1xuICB9XG5cbiAgcHVibGljIGdldFJvdXRlZEZyb21VcmwoKSB7XG4gICAgcmV0dXJuIHRoaXMucm91dGVkRnJvbVVybCB8fCAnLyc7XG4gIH1cblxuICBwdWJsaWMgc2V0SW50ZXJydXB0ZWRVcmwodXJsOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmludGVycnVwdGVkVXJsID0gdXJsO1xuICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gRGF0ZS5ub3coKTtcblxuICAgIGlmICggY3VycmVudFRpbWUgLSB0aGlzLm5hdmlnYXRlRW5kVGltZSA+IDEwMDApIHtcbiAgICAgIC8vIEhhcHBlbmQgPiAxIHNlYy4gYXNzdW1lIGl0IGlzIHRyaWdnZXJlZCBmcm9tIGN1cnJlbnQgcGFnZS5cbiAgICAgIHRoaXMucm91dGVkRnJvbVVybCA9IHRoaXMuY3VycmVudFVybDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcGFnZSB0cmFuc2l0aW9uZWRcbiAgICAgIHRoaXMucm91dGVkRnJvbVVybCA9IHRoaXMucHJldmlvdXNVcmw7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldFVzZXJOYW1lKCk6IHN0cmluZyB7XG4gICAgbGV0IGF1dGhSZWNvcmQ6IGFueSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ21kZHMtYXV0aC1yZWNvcmQnKSk7XG4gICAgaWYgKCFhdXRoUmVjb3JkKSB7XG4gICAgICBhdXRoUmVjb3JkID0ge3VzZXJOYW1lOiAnJ307XG4gICAgfVxuICAgIHJldHVybiBhdXRoUmVjb3JkWyd1c2VyTmFtZSddO1xuICB9XG5cbiAgbG9naW4odXNlck5hbWU6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZykge1xuICAgIGNvbnN0IGF1dGhSZWNvcmQ6IGFueSA9IHtcbiAgICAgIHVzZXJOYW1lOiB1c2VyTmFtZSxcbiAgICAgIGFjY2Vzc1Rva2VuOiAnJyxcbiAgICAgIHJlZnJlc2hUb2tlbjogJycsXG4gICAgICBkaXNwbGF5TmFtZTogJydcbiAgICB9O1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdtZGRzLWF1dGgtcmVjb3JkJywgSlNPTi5zdHJpbmdpZnkoYXV0aFJlY29yZCkpO1xuXG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuYWRtaW5JbnRlcmZhY2UgP1xuICAgICAgIHsgcGFyYW1zOiBuZXcgSHR0cFBhcmFtcygpLnNldCgndHlwZScsICdhZG1pbicpIH0gOiB7fTtcbiAgICBcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3Q8YW55Pih0aGlzLmF1dGhTZXJ2ZXJSb290VXJpICsgJy9sb2dpbicsXG4gICAgICAgIHsgdXNlcm5hbWU6IHVzZXJOYW1lLCBwYXNzd29yZDogcGFzc3dvcmQgfSwgb3B0aW9uc1xuICAgICAgKS5waXBlKG1hcCh0aGlzLmxvZ2dlZEluKSk7XG4gIH1cblxuICByZWdpc3Rlcih1c2VySW5mbzogYW55KSB7XG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ21kZHMtYXV0aC1yZWNvcmQnKTtcbiAgICBjb25zdCBhdXRoUmVjb3JkOiBhbnkgPSB7XG4gICAgICB1c2VyTmFtZTogdXNlckluZm8udXNlck5hbWUsXG4gICAgICBhY2Nlc3NUb2tlbjogJycsXG4gICAgICByZWZyZXNoVG9rZW46ICcnLFxuICAgICAgZGlzcGxheU5hbWU6IHVzZXJJbmZvLmRpc3BsYXlOYW1lXG4gICAgfTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbWRkcy1hdXRoLXJlY29yZCcsIEpTT04uc3RyaW5naWZ5KGF1dGhSZWNvcmQpKTtcbiAgICBcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5hZG1pbkludGVyZmFjZSA/XG4gICAgICAgeyBwYXJhbXM6IG5ldyBIdHRwUGFyYW1zKCkuc2V0KCd0eXBlJywgJ2FkbWluJykgfSA6IHt9O1xuXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0PGFueT4odGhpcy5hdXRoU2VydmVyUm9vdFVyaSArICcvcmVnaXN0ZXInLCB1c2VySW5mbywgb3B0aW9ucyk7XG4gIH1cblxuICBsb2dnZWRJbih1c2VyKSB7XG4gICAgY29uc3QgYXV0aFJlY29yZDogYW55ID0ge1xuICAgICAgdXNlck5hbWU6ICcnLFxuICAgICAgYWNjZXNzVG9rZW46ICcnLFxuICAgICAgcmVmcmVzaFRva2VuOiAnJyxcbiAgICAgIGRpc3BsYXlOYW1lOiAnJ1xuICAgIH07XG4gICAgaWYgKHVzZXIgJiYgdXNlci5hY2Nlc3NUb2tlbikge1xuICAgICAgYXV0aFJlY29yZFsnYWNjZXNzVG9rZW4nXSA9IHVzZXIuYWNjZXNzVG9rZW47XG4gICAgfVxuICAgIGlmICh1c2VyICYmIHVzZXIucmVmcmVzaFRva2VuKSB7XG4gICAgICBhdXRoUmVjb3JkWydyZWZyZXNoVG9rZW4nXSA9IHVzZXIucmVmcmVzaFRva2VuO1xuICAgIH1cbiAgICBpZiAodXNlciAmJiB1c2VyLmRpc3BsYXlOYW1lKSB7XG4gICAgICBhdXRoUmVjb3JkWydkaXNwbGF5TmFtZSddID0gdXNlci5kaXNwbGF5TmFtZTtcbiAgICB9XG4gICAgaWYgKHVzZXIgJiYgdXNlci51c2VyTmFtZSkge1xuICAgICAgYXV0aFJlY29yZFsndXNlck5hbWUnXSA9IHVzZXIudXNlck5hbWU7XG4gICAgfVxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdtZGRzLWF1dGgtcmVjb3JkJywgSlNPTi5zdHJpbmdpZnkoYXV0aFJlY29yZCkpO1xuICAgIHJldHVybiB1c2VyO1xuICB9XG5cbiAgbG9nb3V0KCkge1xuICAgIC8vIHJlbW92ZSB1c2VyIGZyb20gbG9jYWwgc3RvcmFnZSB0byBsb2cgdXNlciBvdXRcbiAgICBsZXQgYXV0aFJlY29yZCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ21kZHMtYXV0aC1yZWNvcmQnKSk7XG4gICAgaWYgKCFhdXRoUmVjb3JkKSB7XG4gICAgICAgIGF1dGhSZWNvcmQgPSB7fTtcbiAgICB9XG4gICAgYXV0aFJlY29yZC5sb2dvdXRUcyA9IERhdGUubm93KCk7XG4gICAgYXV0aFJlY29yZC5hY2Nlc3NUb2tlbiA9ICcnO1xuICAgIGF1dGhSZWNvcmQucmVmcmVzaFRva2VuID0gJyc7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ21kZHMtYXV0aC1yZWNvcmQnLCBKU09OLnN0cmluZ2lmeShhdXRoUmVjb3JkKSk7XG4gIH1cbiAgXG5cbiAgc2V0QWRtaW5JbnRlcmZhY2UoaXNBZG1pbkludGVyZmFjZTogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuYWRtaW5JbnRlcmZhY2UgPSBpc0FkbWluSW50ZXJmYWNlO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdhZG1pbkludGVyZmFjZScsIEpTT04uc3RyaW5naWZ5KGlzQWRtaW5JbnRlcmZhY2UpKTtcbiAgfVxuICBcbiAgaXNBZG1pbkludGVyZmFjZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5hZG1pbkludGVyZmFjZTtcbiAgfVxufVxuIl19