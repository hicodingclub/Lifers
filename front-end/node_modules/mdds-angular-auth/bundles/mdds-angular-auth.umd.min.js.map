{"version":3,"sources":["ng://mdds-angular-auth/auth/tokens.ts","ng://mdds-angular-auth/auth/auth.service.ts","ng://mdds-angular-auth/auth/auth.guard.ts","ng://mdds-angular-auth/auth/auth.component.ts","ng://mdds-angular-auth/auth/login/login.component.ts","ng://mdds-angular-auth/auth/register/register.component.ts","ng://mdds-angular-auth/auth/auth-routing.module.ts","ng://mdds-angular-auth/auth/auth.interceptor.ts","ng://mdds-angular-auth/auth/auth-icon/auth-icon.component.ts","ng://mdds-angular-auth/auth/auth-icon/click-elsewhere.directive.ts","ng://mdds-angular-auth/auth/auth.module.ts"],"names":["AUTHTICATION_SERVER_ROOT_URI","InjectionToken","AUTHTICATION_LOGIN_PAGE_URI","AUTHTICATION_INTERFACES","AuthenticationService","authServerRootUri","router","http","_this","this","adminInterface","navigateEndTime","Date","now","events","subscribe","event","NavigationEnd","previousUrl","currentUrl","urlAfterRedirects","url","JSON","parse","localStorage","getItem","prototype","isAuthorized","authRecord","getLogoutTime","logoutTs","getAccessToken","refreshToken","userName","post","pipe","map","loggedIn","catchError","error","logout","refreshShouldHappen","response","status","verifyTokenRequest","endsWith","getInterruptedUrl","interruptedUrl","getRoutedFromUrl","routedFromUrl","setInterruptedUrl","getUserName","login","password","accessToken","displayName","setItem","stringify","options","params","HttpParams","set","username","register","userInfo","removeItem","user","setAdminInterface","isAdminInterface","Injectable","Inject","args","Router","HttpClient","AuthGuard","authService","loginPageUri","canActivate","route","state","navigate","canActivateChild","AuthenticationComponent","authenticationService","authenticationInterfaces","userIntEnabled","adminIntEnabled","str","toLowerCase","includes","Component","selector","template","LoginComponent","formBuilder","loading","submitted","servererror","serverText","ngOnInit","loginForm","group","Validators","required","Object","defineProperty","controls","onSubmit","invalid","returnUrl","f","value","first","data","cancel","styles","FormBuilder","ActivatedRoute","validatePasswords","form","password_conf","setErrors","passwordNotSame","RegisterComponent","registerForm","minLength","validator","relativeTo","routes","path","component","children","redirectTo","pathMatch","AuthRoutingModule","NgModule","imports","RouterModule","forChild","exports","TokenInterceptor","refreshTokenInProgress","refreshTokenSubject","BehaviorSubject","addAuthHeader","request","clone","setHeaders","Authorization","intercept","next","handle","HttpErrorResponse","filter","result","take","switchMap","err","EMPTY","throwError","AuthIconComponent","popup","popupStyle","userNameShort","toggle","right","window","innerWidth","x","top_1","y","toString","top","closePopup","name","isAuth","length","substring","routerState","snapshot","navigated","ClickElsewhereDirective","elementRef","clickElsewhere","EventEmitter","onDocumentClick","targetElement","nativeElement","contains","emit","Directive","ElementRef","Output","HostListener","AuthenticationModule","CommonModule","FormsModule","ReactiveFormsModule","HttpClientModule","declarations","providers","provide","HTTP_INTERCEPTORS","useClass","multi"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const AUTHTICATION_SERVER_ROOT_URI = new InjectionToken('AUTHTICATION_SERVER_ROOT_URI');\nexport const AUTHTICATION_LOGIN_PAGE_URI = new InjectionToken('AUTHTICATION_LOGIN_PAGE_URI');\nexport const AUTHTICATION_INTERFACES = new InjectionToken('AUTHTICATION_INTERFACES');","import { Injectable, Inject } from '@angular/core';\nimport { HttpClient, HttpParams, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { catchError, map, filter, retry } from 'rxjs/operators';\nimport { Observable, of } from 'rxjs';\nimport { Router, NavigationEnd  } from '@angular/router';\n\nimport { AUTHTICATION_SERVER_ROOT_URI } from './tokens';\n\n@Injectable()\nexport class AuthenticationService {\n\n  private interruptedUrl: string;\n  private routedFromUrl: string;\n\n  private previousUrl: string;\n  private currentUrl: string;\n  private navigateEndTime: number;\n  \n  private adminInterface: boolean = false;\n\n  constructor(\n            @Inject(AUTHTICATION_SERVER_ROOT_URI) private authServerRootUri: string,\n            private router: Router,\n            private http: HttpClient) {\n    this.navigateEndTime = Date.now();\n\n    router.events.subscribe(event => {\n      if (event instanceof NavigationEnd) {\n        this.previousUrl = this.currentUrl;\n        this.navigateEndTime = Date.now();\n        if (event.urlAfterRedirects) {\n          this.currentUrl = event.urlAfterRedirects;\n        } else {\n          this.currentUrl = event.url;\n        }\n      }\n    });\n    \n    this.adminInterface = JSON.parse(localStorage.getItem('adminInterface'));\n  }\n\n  isAuthorized(): boolean {\n    const authRecord = JSON.parse(localStorage.getItem('mdds-auth-record'));\n    if (authRecord && authRecord['accessToken']) {\n      return true;\n    }\n    return false;\n  }\n\n  private getLogoutTime(): number {\n    const authRecord = JSON.parse(localStorage.getItem('mdds-auth-record'));\n    if (authRecord && 'logoutTs' in authRecord) {\n        return authRecord.logoutTs;\n    }\n    return 0;\n  }\n\n  public getAccessToken(): string {\n    const authRecord = JSON.parse(localStorage.getItem('mdds-auth-record'));\n    if (authRecord) {\n      return authRecord['accessToken'];\n    }\n    return null;\n  }\n\n  public refreshToken(): Observable<any> {\n    let authRecord: any = JSON.parse(localStorage.getItem('mdds-auth-record'));\n    if (!authRecord) {\n      authRecord = {refreshToken: '', userName: ''};\n    }\n    const refreshToken: string = authRecord['refreshToken'];\n    const userName: string = authRecord['userName'];\n\n    return this.http.post<any>(\n        this.authServerRootUri + '/refresh',\n        {refreshToken: refreshToken, userName: userName}\n      ).pipe(\n        map(this.loggedIn),\n        catchError(error => {\n          this.logout();\n          return error;\n        }\n      )\n    );\n  }\n\n  public refreshShouldHappen(response: HttpErrorResponse): boolean {\n    return response.status === 401;\n  }\n\n  public verifyTokenRequest(url: string): boolean {\n    if ( url.endsWith(this.authServerRootUri + '/refresh') ||\n        url.endsWith(this.authServerRootUri + '/login')) {\n      return true;\n    }\n        return false;\n  }\n\n  public getInterruptedUrl(): string {\n    return this.interruptedUrl || '/';\n  }\n\n  public getRoutedFromUrl() {\n    return this.routedFromUrl || '/';\n  }\n\n  public setInterruptedUrl(url: string): void {\n    this.interruptedUrl = url;\n    const currentTime = Date.now();\n\n    if ( currentTime - this.navigateEndTime > 1000) {\n      // Happend > 1 sec. assume it is triggered from current page.\n      this.routedFromUrl = this.currentUrl;\n    } else {\n      // page transitioned\n      this.routedFromUrl = this.previousUrl;\n    }\n  }\n\n  public getUserName(): string {\n    let authRecord: any = JSON.parse(localStorage.getItem('mdds-auth-record'));\n    if (!authRecord) {\n      authRecord = {userName: ''};\n    }\n    return authRecord['userName'];\n  }\n\n  login(userName: string, password: string) {\n    const authRecord: any = {\n      userName: userName,\n      accessToken: '',\n      refreshToken: '',\n      displayName: ''\n    };\n    localStorage.setItem('mdds-auth-record', JSON.stringify(authRecord));\n\n    const options = this.adminInterface ?\n       { params: new HttpParams().set('type', 'admin') } : {};\n    \n    return this.http.post<any>(this.authServerRootUri + '/login',\n        { username: userName, password: password }, options\n      ).pipe(map(this.loggedIn));\n  }\n\n  register(userInfo: any) {\n    localStorage.removeItem('mdds-auth-record');\n    const authRecord: any = {\n      userName: userInfo.userName,\n      accessToken: '',\n      refreshToken: '',\n      displayName: userInfo.displayName\n    };\n    localStorage.setItem('mdds-auth-record', JSON.stringify(authRecord));\n    \n    const options = this.adminInterface ?\n       { params: new HttpParams().set('type', 'admin') } : {};\n\n    return this.http.post<any>(this.authServerRootUri + '/register', userInfo, options);\n  }\n\n  loggedIn(user) {\n    const authRecord: any = {\n      userName: '',\n      accessToken: '',\n      refreshToken: '',\n      displayName: ''\n    };\n    if (user && user.accessToken) {\n      authRecord['accessToken'] = user.accessToken;\n    }\n    if (user && user.refreshToken) {\n      authRecord['refreshToken'] = user.refreshToken;\n    }\n    if (user && user.displayName) {\n      authRecord['displayName'] = user.displayName;\n    }\n    if (user && user.userName) {\n      authRecord['userName'] = user.userName;\n    }\n    localStorage.setItem('mdds-auth-record', JSON.stringify(authRecord));\n    return user;\n  }\n\n  logout() {\n    // remove user from local storage to log user out\n    let authRecord = JSON.parse(localStorage.getItem('mdds-auth-record'));\n    if (!authRecord) {\n        authRecord = {};\n    }\n    authRecord.logoutTs = Date.now();\n    authRecord.accessToken = '';\n    authRecord.refreshToken = '';\n    localStorage.setItem('mdds-auth-record', JSON.stringify(authRecord));\n  }\n  \n\n  setAdminInterface(isAdminInterface: boolean): void {\n    this.adminInterface = isAdminInterface;\n    localStorage.setItem('adminInterface', JSON.stringify(isAdminInterface));\n  }\n  \n  isAdminInterface(): boolean {\n    return this.adminInterface;\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Router, CanActivate, CanActivateChild, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { AuthenticationService } from './auth.service';\nimport { AUTHTICATION_LOGIN_PAGE_URI } from './tokens';\n\n@Injectable()\nexport class AuthGuard implements CanActivate, CanActivateChild {\n  constructor(\n    private router: Router,\n    private authService: AuthenticationService,\n    @Inject(AUTHTICATION_LOGIN_PAGE_URI) private loginPageUri: string) { }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    if (this.authService.isAuthorized()) {\n      // logged in so return true\n      return true;\n    }\n\n    // not logged in so redirect to login page with the return url\n    this.authService.setInterruptedUrl(state.url);\n    this.router.navigate([this.loginPageUri]);\n    return false;\n  }\n  canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    return this.canActivate(route, state);\n  }\n}\n","import { Component, Inject } from '@angular/core';\nimport { AuthenticationService } from './auth.service';\nimport { AUTHTICATION_INTERFACES } from './tokens';\n\n@Component({\n    selector: 'app-auth',\n    templateUrl: 'auth.component.html'\n})\n\nexport class AuthenticationComponent {\n    adminInterface: boolean = false;\n    userIntEnabled: boolean = false;\n    adminIntEnabled: boolean = false;\n\n    constructor(\n        private authenticationService: AuthenticationService,\n        @Inject(AUTHTICATION_INTERFACES) private authenticationInterfaces: string\n        ) {\n      \n      let str = authenticationInterfaces.toLowerCase();\n      if (str.includes(\"user\") && str.includes(\"admin\") ) {//both interface. Check cached.\n        this.adminInterface = authenticationService.isAdminInterface();\n        this.userIntEnabled = true;\n        this.adminIntEnabled = true;\n      } else if (str.includes(\"admin\")) { //administrator only\n        this.authenticationService.setAdminInterface(true);\n        this.adminIntEnabled = true;\n      } else { //users only\n        this.authenticationService.setAdminInterface(false);\n        this.userIntEnabled = true;\n      }\n    }\n  \n    setAdminInterface(adminInterface: boolean): void {\n      this.adminInterface = adminInterface;\n      this.authenticationService.setAdminInterface(this.adminInterface);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport { AuthenticationService } from '../auth.service';\n\n@Component(\n    {templateUrl: 'login.component.html',\n     styleUrls: ['login.component.css']\n    })\nexport class LoginComponent implements OnInit {\n    loginForm: FormGroup;\n    loading = false;\n    submitted = false;\n    servererror = false;\n    serverText = '';\n    returnUrl: string;\n  \n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private authenticationService: AuthenticationService) { }\n\n    ngOnInit() {\n        this.loginForm = this.formBuilder.group({\n            username: ['', Validators.required],\n            password: ['', Validators.required]\n        });\n\n        // reset login status\n        this.authenticationService.logout();\n\n        // get return url from route parameters or default to '/'\n        // this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.loginForm.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // stop here if form is invalid\n        if (this.loginForm.invalid) {\n            return;\n        }\n        let returnUrl = this.authenticationService.getInterruptedUrl();\n        if (this.router.url === returnUrl) { returnUrl = '/'; } // home page\n\n        this.loading = true;\n        this.authenticationService.login(this.f.username.value, this.f.password.value)\n            .pipe(first())\n            .subscribe(\n                data => {\n                    this.servererror = false;\n                    this.router.navigate([returnUrl]);\n                    this.loading = false;\n                },\n                error => {\n                    // this.alertService.error(error);\n                    this.servererror = true;\n                    this.serverText = error.error.error;\n                    this.loading = false;\n                });\n    }\n\n    cancel() {\n      const routedFromUrl = this.authenticationService.getRoutedFromUrl();\n      this.router.navigate([routedFromUrl]);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\n\nimport { AuthenticationService } from '../auth.service';\n\nconst validatePasswords = function(form) {\n    const passwordConf = form.controls.password_conf.value;\n    const password = form.controls.password.value;\n\n    if (passwordConf === password) {\n        return null;\n    } else {\n        form.controls.password_conf.setErrors({'passwordNotSame': true});\n        return null;\n    }\n};\n\n@Component(\n    {templateUrl: 'register.component.html',\n     styleUrls: ['register.component.css']\n    })\nexport class RegisterComponent implements OnInit {\n    registerForm: FormGroup;\n    loading = false;\n    submitted = false;\n    servererror = false;\n    serverText = '';\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private router: Router,\n        private route: ActivatedRoute,\n        private authenticationService: AuthenticationService) { }\n\n\n    ngOnInit() {\n        this.registerForm = this.formBuilder.group({\n            username: ['', Validators.required],\n            password: ['', [Validators.required, Validators.minLength(6)]],\n            password_conf: ['', [Validators.required, Validators.minLength(6)]]\n        }, {validator: validatePasswords });\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.registerForm.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // stop here if form is invalid\n        if (this.registerForm.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        this.authenticationService.register(this.registerForm.value)\n            .pipe(first())\n            .subscribe(\n                data => {\n                    // this.alertService.success('Registration successful', true);\n                    this.router.navigate(['../login'], {relativeTo: this.route, });\n                    this.servererror = false;\n                },\n                error => {\n                    // this.alertService.error(error);\n                    // alert(\"Error login\");\n                    this.servererror = true;\n                    this.serverText = error.error.error;\n                    this.loading = false;\n                });\n    }\n    cancel() {\n      const routedFromUrl = this.authenticationService.getRoutedFromUrl();\n      this.router.navigate([routedFromUrl]);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { AuthenticationComponent } from './auth.component';\nimport { LoginComponent } from './login';\nimport { RegisterComponent } from './register';\n\nconst routes: Routes = [\n  { path: 'auth', \n    component: AuthenticationComponent,\n    children: [ \n\n                { path: \"login\",  component: LoginComponent },\n                { path: 'register', component: RegisterComponent },\n\n                { path: '',  redirectTo: 'login', pathMatch: 'full' },\n                { path: '**', redirectTo: 'login' }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }","import { Injectable, Inject } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpResponse,\n  HttpErrorResponse,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable, BehaviorSubject, throwError, EMPTY } from 'rxjs';\nimport { tap, catchError, switchMap, filter, take } from 'rxjs/operators';\n\nimport { AuthenticationService } from './auth.service';\nimport { AUTHTICATION_LOGIN_PAGE_URI } from './tokens';\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n  private refreshTokenInProgress = false;\n  // Refresh Token Subject tracks the current token, or is null if no token is currently\n  // available (e.g. refresh pending).\n  private refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n\n  constructor(\n    private router: Router,\n    private authService: AuthenticationService,\n    @Inject(AUTHTICATION_LOGIN_PAGE_URI) private loginPageUri: string\n    ) {}\n\n  addAuthHeader(request) {\n    if (this.authService.isAuthorized()) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${this.authService.getAccessToken()}`\n        }\n      });\n    }\n    return request;\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(this.addAuthHeader(request))\n      .pipe(\n        /*\n        tap((event: HttpEvent<any>) => {\n\t        if (event instanceof HttpResponse) {\n\t          ;\n\t        }\n\t      }, (err: any) => {\n            if (err instanceof HttpErrorResponse) {\n              if (err.status === 401) {\n                this.authService.setInterruptedUrl(this.router.url);\n                this.router.navigate([this.loginPageUri]);\n              }\n            }\n        })\n        */\n        catchError((error) => {\n          if (error instanceof HttpErrorResponse && error.status === 401) {\n            if (this.refreshTokenInProgress && !this.authService.verifyTokenRequest(request.url)) {\n                // If refreshTokenInProgress is true, we will wait until refreshTokenSubject has a non-null value\n                // â which means the new token is ready and we can retry the request again\n                return this.refreshTokenSubject.pipe(\n                    filter(result => result !== null),\n                    take(1),\n                    switchMap(() => next.handle(this.addAuthHeader(request)))\n                );\n\n            } else {\n                this.refreshTokenInProgress = true;\n                // Set the refreshTokenSubject to null so that subsequent API calls will wait until the new token has been retrieved\n                this.refreshTokenSubject.next(null);\n                return this.authService.refreshToken().pipe(\n                        switchMap((data) => {\n                            this.refreshTokenInProgress = false;\n                            this.refreshTokenSubject.next(data);\n                            return next.handle(this.addAuthHeader(request));\n                        }),\n                        catchError((err) => {\n                            // looks like this part will not hit\n                            this.refreshTokenInProgress = false;\n                            this.authService.setInterruptedUrl(this.router.url);\n                            this.router.navigate([this.loginPageUri]);\n                            return EMPTY;\n                        })\n                );\n            }\n          }\n          if (this.authService.verifyTokenRequest(request.url)) {\n            // refreshToken failed. Go to login page.\n            this.refreshTokenInProgress = false;\n            this.authService.setInterruptedUrl(this.router.url);\n            this.router.navigate([this.loginPageUri]);\n          }\n          return throwError(error);\n        })\n    );\n  }\n}\n","import { Component, OnInit, Inject  } from '@angular/core';\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { AuthenticationService } from '../auth.service';\n\nimport { AUTHTICATION_LOGIN_PAGE_URI } from '../tokens';\n\n@Component({\n    selector: 'app-auth-icon',\n    templateUrl: 'auth-icon.component.html',\n    styleUrls: ['auth-icon.component.css']\n})\nexport class AuthIconComponent implements OnInit {\n  public popup = false;\n  public popupStyle: any = {};\n  public userName = 'Please login';\n  public userNameShort = 'Please login';\n\n  constructor(\n    private router: Router,\n    private authService: AuthenticationService,\n    @Inject(AUTHTICATION_LOGIN_PAGE_URI) private loginPageUri: string) { }\n\n  ngOnInit() {\n    this.isAuthorized();\n  }\n\n  public toggle(event) {\n    if (!this.popup) {\n      const right = (window.innerWidth - event.x) - 2;\n      const top = event.y + 15;\n\n      this.popupStyle = {\n        'right': right.toString() + 'px',\n        'top': top.toString() + 'px',\n      };\n    }\n    this.popup = !this.popup;\n  }\n\n  public closePopup() {\n    this.popup = false;\n  }\n\n  public isAuthorized() {\n    const name = this.authService.getUserName();\n    const isAuth = this.authService.isAuthorized();\n    if (name) {\n        this.userName = name;\n        if (isAuth) {\n          if (name.length > 12) {\n            this.userNameShort = name.substring(0, 10) + '...';\n          } else {\n            this.userNameShort = name.substring(0, 13);\n          }\n        } else {\n          this.userNameShort = 'Please login';\n        }\n    }\n    return isAuth;\n  }\n\n  public login() {\n    // not logged in so redirect to login page with the return url\n    const state: RouterStateSnapshot = this.router.routerState.snapshot;\n    this.authService.setInterruptedUrl(state.url);\n    this.popup = false;\n    this.router.navigate([this.loginPageUri]);\n  }\n\n  public logout() {\n    // not logged in so redirect to login page with the return url\n    this.authService.logout();\n    this.popup = false;\n    this.router.navigated = false; // refresh current page;\n    this.router.navigate(['/']); // home page\n  }\n}\n","import { Directive, EventEmitter, ElementRef, HostListener, Output } from '@angular/core';\n \n@Directive({ selector: '[clickElsewhere]' })\nexport class ClickElsewhereDirective {\n  @Output() clickElsewhere = new EventEmitter<MouseEvent>(); \n \n  constructor(private elementRef: ElementRef) {}\n \n  @HostListener('document:click', ['$event'])\n  public onDocumentClick(event: MouseEvent): void {\n    const targetElement = event.target as HTMLElement;\n \n      // Check if the click was outside the element\n      if (targetElement && !this.elementRef.nativeElement.contains(targetElement)) {\n \n         this.clickElsewhere.emit(event);\n      }\n  }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { AuthenticationService } from './auth.service';\nimport { AUTHTICATION_LOGIN_PAGE_URI, AUTHTICATION_SERVER_ROOT_URI } from './tokens';\nimport { TokenInterceptor } from './auth.interceptor';\nimport { AuthenticationComponent } from './auth.component';\nimport { LoginComponent } from './login';\nimport { RegisterComponent } from './register';\nimport { AuthGuard } from './auth.guard';\nimport { AuthIconComponent } from './auth-icon/auth-icon.component';\nimport { ClickElsewhereDirective } from './auth-icon/click-elsewhere.directive';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        HttpClientModule,\n\n        AuthRoutingModule\n    ],\n    declarations: [\n        AuthenticationComponent,\n        LoginComponent,\n        RegisterComponent,\n        AuthIconComponent,\n\n        ClickElsewhereDirective\n    ],\n    exports: [\n        AuthIconComponent\n    ],\n    providers: [\n        AuthenticationService,\n        AuthGuard,\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: TokenInterceptor,\n            multi: true\n        },\n    ]\n})\nexport class AuthenticationModule { }\n"]}