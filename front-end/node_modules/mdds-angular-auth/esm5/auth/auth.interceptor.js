/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { Router } from '@angular/router';
import { BehaviorSubject, throwError, EMPTY } from 'rxjs';
import { catchError, switchMap, filter, take } from 'rxjs/operators';
import { AuthenticationService } from './auth.service';
import { AUTHTICATION_LOGIN_PAGE_URI } from './tokens';
var TokenInterceptor = /** @class */ (function () {
    function TokenInterceptor(router, authService, loginPageUri) {
        this.router = router;
        this.authService = authService;
        this.loginPageUri = loginPageUri;
        this.refreshTokenInProgress = false;
        // Refresh Token Subject tracks the current token, or is null if no token is currently
        // available (e.g. refresh pending).
        this.refreshTokenSubject = new BehaviorSubject(null);
    }
    /**
     * @param {?} request
     * @return {?}
     */
    TokenInterceptor.prototype.addAuthHeader = /**
     * @param {?} request
     * @return {?}
     */
    function (request) {
        if (this.authService.isAuthorized()) {
            request = request.clone({
                setHeaders: {
                    Authorization: "Bearer " + this.authService.getAccessToken()
                }
            });
        }
        return request;
    };
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    TokenInterceptor.prototype.intercept = /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    function (request, next) {
        var _this = this;
        return next.handle(this.addAuthHeader(request))
            .pipe(
        /*
        tap((event: HttpEvent<any>) => {
            if (event instanceof HttpResponse) {
              ;
            }
          }, (err: any) => {
            if (err instanceof HttpErrorResponse) {
              if (err.status === 401) {
                this.authService.setInterruptedUrl(this.router.url);
                this.router.navigate([this.loginPageUri]);
              }
            }
        })
        */
        catchError(function (error) {
            if (error instanceof HttpErrorResponse && error.status === 401) {
                if (_this.refreshTokenInProgress && !_this.authService.verifyTokenRequest(request.url)) {
                    // If refreshTokenInProgress is true, we will wait until refreshTokenSubject has a non-null value
                    // â€“ which means the new token is ready and we can retry the request again
                    return _this.refreshTokenSubject.pipe(filter(function (result) { return result !== null; }), take(1), switchMap(function () { return next.handle(_this.addAuthHeader(request)); }));
                }
                else {
                    _this.refreshTokenInProgress = true;
                    // Set the refreshTokenSubject to null so that subsequent API calls will wait until the new token has been retrieved
                    _this.refreshTokenSubject.next(null);
                    return _this.authService.refreshToken().pipe(switchMap(function (data) {
                        _this.refreshTokenInProgress = false;
                        _this.refreshTokenSubject.next(data);
                        return next.handle(_this.addAuthHeader(request));
                    }), catchError(function (err) {
                        // looks like this part will not hit
                        _this.refreshTokenInProgress = false;
                        _this.authService.setInterruptedUrl(_this.router.url);
                        _this.router.navigate([_this.loginPageUri]);
                        return EMPTY;
                    }));
                }
            }
            if (_this.authService.verifyTokenRequest(request.url)) {
                // refreshToken failed. Go to login page.
                _this.refreshTokenInProgress = false;
                _this.authService.setInterruptedUrl(_this.router.url);
                _this.router.navigate([_this.loginPageUri]);
            }
            return throwError(error);
        }));
    };
    TokenInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    TokenInterceptor.ctorParameters = function () { return [
        { type: Router },
        { type: AuthenticationService },
        { type: String, decorators: [{ type: Inject, args: [AUTHTICATION_LOGIN_PAGE_URI,] }] }
    ]; };
    return TokenInterceptor;
}());
export { TokenInterceptor };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TokenInterceptor.prototype.refreshTokenInProgress;
    /**
     * @type {?}
     * @private
     */
    TokenInterceptor.prototype.refreshTokenSubject;
    /**
     * @type {?}
     * @private
     */
    TokenInterceptor.prototype.router;
    /**
     * @type {?}
     * @private
     */
    TokenInterceptor.prototype.authService;
    /**
     * @type {?}
     * @private
     */
    TokenInterceptor.prototype.loginPageUri;
}
//# sourceMappingURL=data:application/json;base64,