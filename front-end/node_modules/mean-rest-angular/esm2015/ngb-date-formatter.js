/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
export var dateStructureToString = function (date, fmt) {
    /** @type {?} */
    let d;
    /** @type {?} */
    let M;
    /** @type {?} */
    let yyyy;
    /** @type {?} */
    let h;
    /** @type {?} */
    let m;
    /** @type {?} */
    let s;
    /** @type {?} */
    let value;
    if (!date)
        return ""; //undefined
    d = date.day;
    M = date.month;
    yyyy = date.year;
    if (typeof d !== 'number' || typeof M !== 'number' || typeof yyyy !== 'number')
        return ""; //undefined
    //undefined
    /** @type {?} */
    let yy = yyyy.toString().slice(2);
    /** @type {?} */
    let dd = d < 10 ? '0' + d : d.toString();
    /** @type {?} */
    let MM = M < 10 ? '0' + M : M.toString();
    value = fmt.replace(/yyyy/ig, yyyy.toString()).
        replace(/yy/ig, yy.toString()).
        replace(/MM/g, MM.toString()).
        replace(/dd/ig, dd.toString());
    return value;
};
/** @type {?} */
export var stringToDateStructure = function (value, fmt) {
    /** @type {?} */
    let date;
    /** @type {?} */
    let result = [];
    if (value.length != fmt.length)
        return date; //not ready
    //not ready
    /** @type {?} */
    let regexes = [{ re: /yyyy/i, len: 4 }, { re: /yy/i, len: 2 }, { re: /MM/, len: 2 }, { re: /dd/i, len: 2 }];
    for (let reg of regexes) {
        /** @type {?} */
        let p = fmt.search(reg.re);
        //find position in format
        /** @type {?} */
        let v;
        if (p != -1)
            v = parseInt(value.slice(p, p + reg.len));
        else
            v = NaN;
        result.push(v);
    }
    let [yyyy, yy, M, d] = result;
    if ((isNaN(yyyy) && isNaN(yy)) || isNaN(M) || isNaN(d))
        return date; //undefined
    return { day: d, month: M, year: yyyy ? yyyy : 2000 + yy };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdiLWRhdGUtZm9ybWF0dGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbWVhbi1yZXN0LWFuZ3VsYXIvIiwic291cmNlcyI6WyJuZ2ItZGF0ZS1mb3JtYXR0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxNQUFNLEtBQUsscUJBQXFCLEdBQUcsVUFBUyxJQUFTLEVBQUUsR0FBVTs7UUFDekQsQ0FBQzs7UUFBRSxDQUFDOztRQUFFLElBQUk7O1FBQUUsQ0FBQzs7UUFBRSxDQUFDOztRQUFFLENBQUM7O1FBQ25CLEtBQUs7SUFDVCxJQUFJLENBQUMsSUFBSTtRQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsV0FBVztJQUVqQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNiLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ2YsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDakIsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxJQUFLLE9BQU8sSUFBSSxLQUFLLFFBQVE7UUFBRyxPQUFPLEVBQUUsQ0FBQyxDQUFDLFdBQVc7OztRQUVwRyxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7O1FBQzdCLEVBQUUsR0FBRSxDQUFDLEdBQUMsRUFBRSxDQUFBLENBQUMsQ0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFOztRQUM3QixFQUFFLEdBQUUsQ0FBQyxHQUFDLEVBQUUsQ0FBQSxDQUFDLENBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRTtJQUVqQyxLQUFLLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQy9CLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzlCLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzdCLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDOUMsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQzs7QUFFRCxNQUFNLEtBQUsscUJBQXFCLEdBQUcsVUFBUyxLQUFhLEVBQUUsR0FBVTs7UUFDN0QsSUFBSTs7UUFDSixNQUFNLEdBQUcsRUFBRTtJQUNmLElBQUksS0FBSyxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUMsTUFBTTtRQUFFLE9BQU8sSUFBSSxDQUFDLENBQUMsV0FBVzs7O1FBQ3BELE9BQU8sR0FBRyxDQUFDLEVBQUMsRUFBRSxFQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFDLENBQUM7SUFDakcsS0FBSyxJQUFJLEdBQUcsSUFBSSxPQUFPLEVBQUU7O1lBQ2pCLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7OztZQUN0QixDQUFDO1FBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7O1lBQ2hELENBQUMsR0FBRyxHQUFHLENBQUE7UUFDWixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ2xCO1FBQ0csQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxNQUFNO0lBQzdCLElBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFFLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFBRyxPQUFPLElBQUksQ0FBQyxDQUFDLFdBQVc7SUFDbkYsT0FBTyxFQUFDLEdBQUcsRUFBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFBLENBQUMsQ0FBQSxJQUFJLENBQUEsQ0FBQyxDQUFBLElBQUksR0FBQyxFQUFFLEVBQUUsQ0FBQztBQUV2RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBkYXRlU3RydWN0dXJlVG9TdHJpbmcgPSBmdW5jdGlvbihkYXRlOiBhbnksIGZtdDpzdHJpbmcpOnN0cmluZyB7XG4gICAgbGV0IGQsIE0sIHl5eXksIGgsIG0sIHM7XG4gICAgbGV0IHZhbHVlO1xuICAgIGlmICghZGF0ZSkgcmV0dXJuIFwiXCI7IC8vdW5kZWZpbmVkXG4gICAgXG4gICAgZCA9IGRhdGUuZGF5O1xuICAgIE0gPSBkYXRlLm1vbnRoOyBcbiAgICB5eXl5ID0gZGF0ZS55ZWFyO1xuICAgIGlmICh0eXBlb2YgZCAhPT0gJ251bWJlcicgfHwgdHlwZW9mIE0gIT09ICdudW1iZXInICB8fCB0eXBlb2YgeXl5eSAhPT0gJ251bWJlcicgKSByZXR1cm4gXCJcIjsgLy91bmRlZmluZWRcbiAgICBcbiAgICBsZXQgeXkgPSB5eXl5LnRvU3RyaW5nKCkuc2xpY2UoMik7ICAgIFxuICAgIGxldCBkZD0gZDwxMD8gJzAnK2Q6IGQudG9TdHJpbmcoKTtcbiAgICBsZXQgTU09IE08MTA/ICcwJytNOiBNLnRvU3RyaW5nKCk7XG4gICAgXG4gICAgdmFsdWUgPSBmbXQucmVwbGFjZSgveXl5eS9pZywgeXl5eS50b1N0cmluZygpKS5cbiAgICAgICAgICAgICAgICAgICByZXBsYWNlKC95eS9pZywgeXkudG9TdHJpbmcoKSkuXG4gICAgICAgICAgICAgICAgICAgcmVwbGFjZSgvTU0vZywgTU0udG9TdHJpbmcoKSkuXG4gICAgICAgICAgICAgICAgICAgcmVwbGFjZSgvZGQvaWcsIGRkLnRvU3RyaW5nKCkpO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cblxuZXhwb3J0IHZhciBzdHJpbmdUb0RhdGVTdHJ1Y3R1cmUgPSBmdW5jdGlvbih2YWx1ZTogc3RyaW5nLCBmbXQ6c3RyaW5nKTphbnkge1xuICAgIGxldCBkYXRlOyAgICBcbiAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgaWYgKHZhbHVlLmxlbmd0aCAhPSBmbXQubGVuZ3RoKSByZXR1cm4gZGF0ZTsgLy9ub3QgcmVhZHlcbiAgICBsZXQgcmVnZXhlcyA9IFt7cmU6L3l5eXkvaSwgbGVuOiA0fSwge3JlOiAveXkvaSwgbGVuOiAyfSwge3JlOi9NTS8sIGxlbjogMn0sIHtyZTogL2RkL2ksIGxlbjogMn1dO1xuICAgIGZvciAobGV0IHJlZyBvZiByZWdleGVzKSB7XG4gICAgICAgIGxldCBwID0gZm10LnNlYXJjaChyZWcucmUpOyAvL2ZpbmQgcG9zaXRpb24gaW4gZm9ybWF0XG4gICAgICAgIGxldCB2O1xuICAgICAgICBpZiAocCAhPSAtMSkgdiA9IHBhcnNlSW50KHZhbHVlLnNsaWNlKHAsIHArcmVnLmxlbikpO1xuICAgICAgICBlbHNlIHYgPSBOYU5cbiAgICAgICAgcmVzdWx0LnB1c2godik7XG4gICAgfVxuICAgIGxldCBbeXl5eSwgeXksIE0sIGRdID0gcmVzdWx0O1xuICAgIGlmICggKGlzTmFOKHl5eXkpICYmIGlzTmFOKHl5KSApIHx8IGlzTmFOKE0pIHx8IGlzTmFOKGQpICkgcmV0dXJuIGRhdGU7IC8vdW5kZWZpbmVkXG4gICAgcmV0dXJuIHtkYXk6ZCwgbW9udGg6IE0sIHllYXI6IHl5eXk/eXl5eToyMDAwK3l5IH07XG5cbn1cbiJdfQ==