/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import { HttpHeaders, HttpParams } from '@angular/common/http';
export class ServiceError {
}
if (false) {
    /** @type {?} */
    ServiceError.prototype.status;
    /** @type {?} */
    ServiceError.prototype.clientErrorMsg;
    /** @type {?} */
    ServiceError.prototype.serverError;
}
export class BaseService {
    /**
     * @param {?} http
     * @param {?} serviceUrl
     */
    constructor(http, serviceUrl) {
        this.http = http;
        this.serviceUrl = serviceUrl;
        this.storage = {};
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getFromStorage(name) {
        return this.storage[name];
    }
    /**
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    putToStorage(name, value) {
        this.storage[name] = value;
    }
    /**
     * @protected
     * @param {?} error
     * @return {?}
     */
    errorResponseHandler(error) {
        /** @type {?} */
        let err = new ServiceError();
        ;
        if (error.error instanceof ErrorEvent) {
            // A client-side or network error occurred. Handle it accordingly.
            err.status = 0;
            err.clientErrorMsg = error.error.message;
        }
        else {
            // The backend returned an unsuccessful response code.
            // The response body may contain clues as to what went wrong,
            err.status = error.status;
            err.serverError = error.error;
        }
        // return an observable with a user-facing error message
        return throwError(err);
    }
    /**
     * @protected
     * @param {?} detail
     * @return {?}
     */
    formatDetail(detail) {
        return detail;
    }
    /**
     * @protected
     * @param {?} list
     * @return {?}
     */
    formatList(list) {
        return list;
    }
    /**
     * @param {?} page
     * @param {?} per_page
     * @param {?} searchContext
     * @return {?}
     */
    getList(page, per_page, searchContext) {
        /** @type {?} */
        let httpOptions = {
            params: new HttpParams().set('__page', page.toString())
                .set('__per_page', per_page.toString()),
            headers: new HttpHeaders({ 'Accept': 'application/json' }),
        };
        if (!searchContext) {
            return this.http.get(this.serviceUrl, httpOptions)
                .pipe(map(this.formatList), catchError(this.errorResponseHandler));
        }
        httpOptions.params = httpOptions.params.set('action', "Search");
        return this.http.post(this.serviceUrl + "mddsaction/get", searchContext, httpOptions)
            .pipe(catchError(this.errorResponseHandler));
    }
    /**
     * @param {?} page
     * @param {?} per_page
     * @return {?}
     */
    getListWithCondition(page, per_page) {
        /** @type {?} */
        let httpOptions = {
            params: new HttpParams().set('__page', page.toString())
                .set('__per_page', per_page.toString()),
            headers: new HttpHeaders({ 'Accept': 'application/json' }),
        };
        return this.http.get(this.serviceUrl, httpOptions)
            .pipe(map(this.formatList), catchError(this.errorResponseHandler));
    }
    /**
     * @param {?} id
     * @param {?} action
     * @return {?}
     */
    getDetailForAction(id, action) {
        /** @type {?} */
        let httpOptions = {
            headers: new HttpHeaders({ 'Accept': 'application/json' }),
        };
        /** @type {?} */
        let serviceUrl = this.serviceUrl;
        if (action) {
            httpOptions['params'] = new HttpParams().set('action', action);
            if (action == "edit")
                action = "post";
            serviceUrl = serviceUrl + "mddsaction/" + action + "/";
        }
        return this.http.get(serviceUrl + id, httpOptions)
            .pipe(map(this.formatDetail), catchError(this.errorResponseHandler));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getDetail(id) {
        return this.getDetailForAction(id, null);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    deleteOne(id) {
        return this.http.delete(this.serviceUrl + id)
            .pipe(catchError(this.errorResponseHandler));
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    deleteManyByIds(ids) {
        /** @type {?} */
        let httpOptions = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            params: new HttpParams().set('action', "DeleteManyByIds"),
        };
        return this.http.post(this.serviceUrl + "mddsaction/delete", ids, httpOptions)
            .pipe(catchError(this.errorResponseHandler));
    }
    /**
     * @param {?} item
     * @return {?}
     */
    createOne(item) {
        /** @type {?} */
        let httpOptions = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' })
        };
        return this.http.put(this.serviceUrl, item, httpOptions)
            .pipe(map(this.formatDetail), catchError(this.errorResponseHandler));
    }
    /**
     * @param {?} id
     * @param {?} item
     * @return {?}
     */
    updateOne(id, item) {
        /** @type {?} */
        let httpOptions = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' })
        };
        return this.http.post(this.serviceUrl + id, item, httpOptions)
            .pipe(catchError(this.errorResponseHandler));
    }
}
if (false) {
    /**
     * @type {?}
     * @protected
     */
    BaseService.prototype.storage;
    /**
     * @type {?}
     * @protected
     */
    BaseService.prototype.http;
    /**
     * @type {?}
     * @protected
     */
    BaseService.prototype.serviceUrl;
}
//# sourceMappingURL=data:application/json;base64,