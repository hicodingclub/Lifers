/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var COMPONENT_CACHE_DURATION = 30 * 1000;
var MraRouteReuseStrategy = /** @class */ (function () {
    function MraRouteReuseStrategy() {
        this.detachedRouteHandles = {}; //key is url, and value is at [handle, timestamp] format
        //key is url, and value is at [handle, timestamp] format
        this.pageYOffset = {};
        this.editItems = {};
        this.isAuth = false;
    }
    /* Start: The following should use the authService. But let's decouple dependency now */
    /* Start: The following should use the authService. But let's decouple dependency now */
    /**
     * @private
     * @return {?}
     */
    MraRouteReuseStrategy.prototype.isAuthorized = /* Start: The following should use the authService. But let's decouple dependency now */
    /**
     * @private
     * @return {?}
     */
    function () {
        //Refer to AuthenticationService for this function.
        /** @type {?} */
        var authRecord = JSON.parse(localStorage.getItem('mdds-auth-record'));
        if (authRecord && authRecord.accessToken) {
            return true;
        }
        return false;
    };
    /**
     * @private
     * @return {?}
     */
    MraRouteReuseStrategy.prototype.getLogoutTime = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var authRecord = JSON.parse(localStorage.getItem('mdds-auth-record'));
        if (authRecord) {
            return authRecord.logoutTs;
        }
        return 0;
    };
    /* End */
    /* End */
    /**
     * @private
     * @return {?}
     */
    MraRouteReuseStrategy.prototype.isLogoutReload = /* End */
    /**
     * @private
     * @return {?}
     */
    function () {
        if (this.isAuthorized()) {
            return false;
        }
        /** @type {?} */
        var currentTs = Date.now();
        /** @type {?} */
        var logoutTs = this.getLogoutTime();
        if (currentTs - logoutTs < 1000) {
            return true;
        }
        return false;
    };
    /**
     * @private
     * @return {?}
     */
    MraRouteReuseStrategy.prototype.checkAuthentication = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var auth = this.isAuth;
        this.isAuth = this.isAuthorized();
        if (this.isAuth != auth) {
            // authentication status changed. Not attach;
            this.detachedRouteHandles = {}; // empty the map
        }
    };
    /** Determines if this route (and its subtree) should be detached to be reused later */
    /**
     * Determines if this route (and its subtree) should be detached to be reused later
     * @param {?} route
     * @return {?}
     */
    MraRouteReuseStrategy.prototype.shouldDetach = /**
     * Determines if this route (and its subtree) should be detached to be reused later
     * @param {?} route
     * @return {?}
     */
    function (route) {
        if (route.routeConfig && route.routeConfig.path === 'list') {
            //save current scroll position
            /** @type {?} */
            var key = route['_routerState'].url;
            this.pageYOffset[key] = window.pageYOffset;
        }
        return route.routeConfig.path === 'list';
    };
    /** Stores the detached route */
    /**
     * Stores the detached route
     * @param {?} route
     * @param {?} handle
     * @return {?}
     */
    MraRouteReuseStrategy.prototype.store = /**
     * Stores the detached route
     * @param {?} route
     * @param {?} handle
     * @return {?}
     */
    function (route, handle) {
        /** @type {?} */
        var date = new Date();
        /** @type {?} */
        var key = route['_routerState'].url;
        if (!handle)
            return;
        this.detachedRouteHandles[key] = [handle, date.getTime()];
    };
    /** Determines if this route (and its subtree) should be reattached */
    /**
     * Determines if this route (and its subtree) should be reattached
     * @param {?} route
     * @return {?}
     */
    MraRouteReuseStrategy.prototype.shouldAttach = /**
     * Determines if this route (and its subtree) should be reattached
     * @param {?} route
     * @return {?}
     */
    function (route) {
        this.checkAuthentication();
        /** @type {?} */
        var date = new Date();
        /** @type {?} */
        var key = route['_routerState'].url;
        if (route.routeConfig && (route.routeConfig.path === 'new' || route.routeConfig.path === 'edit/:id')) {
            if (route.data && route.data.item) {
                this.editItems[route.data.item] = true;
            }
        }
        if (!route.routeConfig || route.routeConfig.path !== 'list') {
            return false;
        }
        if (!this.detachedRouteHandles[key]) {
            return false;
        }
        if (date.getTime() - this.detachedRouteHandles[key][1] > COMPONENT_CACHE_DURATION)
            return false;
        return true;
    };
    /** Retrieves the previously stored route */
    /**
     * Retrieves the previously stored route
     * @param {?} route
     * @return {?}
     */
    MraRouteReuseStrategy.prototype.retrieve = /**
     * Retrieves the previously stored route
     * @param {?} route
     * @return {?}
     */
    function (route) {
        /** @type {?} */
        var date = new Date();
        /** @type {?} */
        var key = route['_routerState'].url;
        if (!route.routeConfig || route.routeConfig.path !== 'list')
            return null;
        if (route.data.item && (route.data.item in this.editItems)) {
            delete this.editItems[route.data.item];
            delete this.detachedRouteHandles[key];
            return null;
        }
        if (!this.detachedRouteHandles[key])
            return null;
        if (date.getTime() - this.detachedRouteHandles[key][1] > COMPONENT_CACHE_DURATION)
            return null;
        /** @type {?} */
        var yOffset = this.pageYOffset[key];
        setTimeout(function () {
            console.log("==retrieve: ", key, yOffset);
            window.scrollTo(0, yOffset);
        }, 20); //scroll to saved position
        return this.detachedRouteHandles[key][0];
    };
    /** Determines if a route should be reused */
    /**
     * Determines if a route should be reused
     * @param {?} future
     * @param {?} curr
     * @return {?}
     */
    MraRouteReuseStrategy.prototype.shouldReuseRoute = /**
     * Determines if a route should be reused
     * @param {?} future
     * @param {?} curr
     * @return {?}
     */
    function (future, curr) {
        // Below is the default implementation;
        if (this.isLogoutReload()) {
            return false; // authentication status changed. Don't reuse.
        }
        return future.routeConfig === curr.routeConfig;
    };
    return MraRouteReuseStrategy;
}());
export { MraRouteReuseStrategy };
if (false) {
    /** @type {?} */
    MraRouteReuseStrategy.prototype.detachedRouteHandles;
    /** @type {?} */
    MraRouteReuseStrategy.prototype.pageYOffset;
    /** @type {?} */
    MraRouteReuseStrategy.prototype.editItems;
    /** @type {?} */
    MraRouteReuseStrategy.prototype.isAuth;
}
//# sourceMappingURL=data:application/json;base64,