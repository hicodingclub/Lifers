/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/** @type {?} */
export var dateStructureToString = function (date, fmt) {
    /** @type {?} */
    var d;
    /** @type {?} */
    var M;
    /** @type {?} */
    var yyyy;
    /** @type {?} */
    var h;
    /** @type {?} */
    var m;
    /** @type {?} */
    var s;
    /** @type {?} */
    var value;
    if (!date)
        return ""; //undefined
    d = date.day;
    M = date.month;
    yyyy = date.year;
    if (typeof d !== 'number' || typeof M !== 'number' || typeof yyyy !== 'number')
        return ""; //undefined
    //undefined
    /** @type {?} */
    var yy = yyyy.toString().slice(2);
    /** @type {?} */
    var dd = d < 10 ? '0' + d : d.toString();
    /** @type {?} */
    var MM = M < 10 ? '0' + M : M.toString();
    value = fmt.replace(/yyyy/ig, yyyy.toString()).
        replace(/yy/ig, yy.toString()).
        replace(/MM/g, MM.toString()).
        replace(/dd/ig, dd.toString());
    return value;
};
/** @type {?} */
export var stringToDateStructure = function (value, fmt) {
    var e_1, _a;
    /** @type {?} */
    var date;
    /** @type {?} */
    var result = [];
    if (value.length != fmt.length)
        return date; //not ready
    //not ready
    /** @type {?} */
    var regexes = [{ re: /yyyy/i, len: 4 }, { re: /yy/i, len: 2 }, { re: /MM/, len: 2 }, { re: /dd/i, len: 2 }];
    try {
        for (var regexes_1 = tslib_1.__values(regexes), regexes_1_1 = regexes_1.next(); !regexes_1_1.done; regexes_1_1 = regexes_1.next()) {
            var reg = regexes_1_1.value;
            /** @type {?} */
            var p = fmt.search(reg.re);
            //find position in format
            /** @type {?} */
            var v = void 0;
            if (p != -1)
                v = parseInt(value.slice(p, p + reg.len));
            else
                v = NaN;
            result.push(v);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (regexes_1_1 && !regexes_1_1.done && (_a = regexes_1.return)) _a.call(regexes_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    var _b = tslib_1.__read(result, 4), yyyy = _b[0], yy = _b[1], M = _b[2], d = _b[3];
    if ((isNaN(yyyy) && isNaN(yy)) || isNaN(M) || isNaN(d))
        return date; //undefined
    return { day: d, month: M, year: yyyy ? yyyy : 2000 + yy };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdiLWRhdGUtZm9ybWF0dGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbWVhbi1yZXN0LWFuZ3VsYXIvIiwic291cmNlcyI6WyJuZ2ItZGF0ZS1mb3JtYXR0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsTUFBTSxLQUFLLHFCQUFxQixHQUFHLFVBQVMsSUFBUyxFQUFFLEdBQVU7O1FBQ3pELENBQUM7O1FBQUUsQ0FBQzs7UUFBRSxJQUFJOztRQUFFLENBQUM7O1FBQUUsQ0FBQzs7UUFBRSxDQUFDOztRQUNuQixLQUFLO0lBQ1QsSUFBSSxDQUFDLElBQUk7UUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLFdBQVc7SUFFakMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDYixDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNmLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ2pCLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsSUFBSyxPQUFPLElBQUksS0FBSyxRQUFRO1FBQUcsT0FBTyxFQUFFLENBQUMsQ0FBQyxXQUFXOzs7UUFFcEcsRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDOztRQUM3QixFQUFFLEdBQUUsQ0FBQyxHQUFDLEVBQUUsQ0FBQSxDQUFDLENBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRTs7UUFDN0IsRUFBRSxHQUFFLENBQUMsR0FBQyxFQUFFLENBQUEsQ0FBQyxDQUFDLEdBQUcsR0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUU7SUFFakMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMvQixPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM5QixPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM3QixPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQzlDLE9BQU8sS0FBSyxDQUFDO0FBQ2pCLENBQUM7O0FBRUQsTUFBTSxLQUFLLHFCQUFxQixHQUFHLFVBQVMsS0FBYSxFQUFFLEdBQVU7OztRQUM3RCxJQUFJOztRQUNKLE1BQU0sR0FBRyxFQUFFO0lBQ2YsSUFBSSxLQUFLLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxNQUFNO1FBQUUsT0FBTyxJQUFJLENBQUMsQ0FBQyxXQUFXOzs7UUFDcEQsT0FBTyxHQUFHLENBQUMsRUFBQyxFQUFFLEVBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUMsQ0FBQzs7UUFDakcsS0FBZ0IsSUFBQSxZQUFBLGlCQUFBLE9BQU8sQ0FBQSxnQ0FBQSxxREFBRTtZQUFwQixJQUFJLEdBQUcsb0JBQUE7O2dCQUNKLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7OztnQkFDdEIsQ0FBQyxTQUFBO1lBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDOztnQkFDaEQsQ0FBQyxHQUFHLEdBQUcsQ0FBQTtZQUNaLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDbEI7Ozs7Ozs7OztJQUNHLElBQUEsOEJBQXlCLEVBQXhCLFlBQUksRUFBRSxVQUFFLEVBQUUsU0FBQyxFQUFFLFNBQVc7SUFDN0IsSUFBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUUsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQztRQUFHLE9BQU8sSUFBSSxDQUFDLENBQUMsV0FBVztJQUNuRixPQUFPLEVBQUMsR0FBRyxFQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUEsQ0FBQyxDQUFBLElBQUksQ0FBQSxDQUFDLENBQUEsSUFBSSxHQUFDLEVBQUUsRUFBRSxDQUFDO0FBRXZELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIGRhdGVTdHJ1Y3R1cmVUb1N0cmluZyA9IGZ1bmN0aW9uKGRhdGU6IGFueSwgZm10OnN0cmluZyk6c3RyaW5nIHtcbiAgICBsZXQgZCwgTSwgeXl5eSwgaCwgbSwgcztcbiAgICBsZXQgdmFsdWU7XG4gICAgaWYgKCFkYXRlKSByZXR1cm4gXCJcIjsgLy91bmRlZmluZWRcbiAgICBcbiAgICBkID0gZGF0ZS5kYXk7XG4gICAgTSA9IGRhdGUubW9udGg7IFxuICAgIHl5eXkgPSBkYXRlLnllYXI7XG4gICAgaWYgKHR5cGVvZiBkICE9PSAnbnVtYmVyJyB8fCB0eXBlb2YgTSAhPT0gJ251bWJlcicgIHx8IHR5cGVvZiB5eXl5ICE9PSAnbnVtYmVyJyApIHJldHVybiBcIlwiOyAvL3VuZGVmaW5lZFxuICAgIFxuICAgIGxldCB5eSA9IHl5eXkudG9TdHJpbmcoKS5zbGljZSgyKTsgICAgXG4gICAgbGV0IGRkPSBkPDEwPyAnMCcrZDogZC50b1N0cmluZygpO1xuICAgIGxldCBNTT0gTTwxMD8gJzAnK006IE0udG9TdHJpbmcoKTtcbiAgICBcbiAgICB2YWx1ZSA9IGZtdC5yZXBsYWNlKC95eXl5L2lnLCB5eXl5LnRvU3RyaW5nKCkpLlxuICAgICAgICAgICAgICAgICAgIHJlcGxhY2UoL3l5L2lnLCB5eS50b1N0cmluZygpKS5cbiAgICAgICAgICAgICAgICAgICByZXBsYWNlKC9NTS9nLCBNTS50b1N0cmluZygpKS5cbiAgICAgICAgICAgICAgICAgICByZXBsYWNlKC9kZC9pZywgZGQudG9TdHJpbmcoKSk7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG5leHBvcnQgdmFyIHN0cmluZ1RvRGF0ZVN0cnVjdHVyZSA9IGZ1bmN0aW9uKHZhbHVlOiBzdHJpbmcsIGZtdDpzdHJpbmcpOmFueSB7XG4gICAgbGV0IGRhdGU7ICAgIFxuICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICBpZiAodmFsdWUubGVuZ3RoICE9IGZtdC5sZW5ndGgpIHJldHVybiBkYXRlOyAvL25vdCByZWFkeVxuICAgIGxldCByZWdleGVzID0gW3tyZToveXl5eS9pLCBsZW46IDR9LCB7cmU6IC95eS9pLCBsZW46IDJ9LCB7cmU6L01NLywgbGVuOiAyfSwge3JlOiAvZGQvaSwgbGVuOiAyfV07XG4gICAgZm9yIChsZXQgcmVnIG9mIHJlZ2V4ZXMpIHtcbiAgICAgICAgbGV0IHAgPSBmbXQuc2VhcmNoKHJlZy5yZSk7IC8vZmluZCBwb3NpdGlvbiBpbiBmb3JtYXRcbiAgICAgICAgbGV0IHY7XG4gICAgICAgIGlmIChwICE9IC0xKSB2ID0gcGFyc2VJbnQodmFsdWUuc2xpY2UocCwgcCtyZWcubGVuKSk7XG4gICAgICAgIGVsc2UgdiA9IE5hTlxuICAgICAgICByZXN1bHQucHVzaCh2KTtcbiAgICB9XG4gICAgbGV0IFt5eXl5LCB5eSwgTSwgZF0gPSByZXN1bHQ7XG4gICAgaWYgKCAoaXNOYU4oeXl5eSkgJiYgaXNOYU4oeXkpICkgfHwgaXNOYU4oTSkgfHwgaXNOYU4oZCkgKSByZXR1cm4gZGF0ZTsgLy91bmRlZmluZWRcbiAgICByZXR1cm4ge2RheTpkLCBtb250aDogTSwgeWVhcjogeXl5eT95eXl5OjIwMDAreXkgfTtcblxufVxuIl19