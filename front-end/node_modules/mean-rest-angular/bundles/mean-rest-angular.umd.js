(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('rxjs/operators'), require('@angular/common/http'), require('@angular/forms'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('mean-rest-angular', ['exports', 'rxjs', 'rxjs/operators', '@angular/common/http', '@angular/forms', '@angular/core'], factory) :
    (factory((global['mean-rest-angular'] = {}),global.rxjs,global.rxjs.operators,global.ng.common.http,global.ng.forms,global.ng.core));
}(this, (function (exports,rxjs,operators,http,forms,core) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var modalHtml = "\n<div class=\"meanExpressAngularModal\" id=\"meanExpressAngularModal\">\n  <div class=\"meanExpressAngularModal-content\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h5 class=\"modal-title\" id=\"meanExpressAngularModalTitle\">Modal title from function</h5>\n        <button type=\"button\" class=\"close\" id=\"meanExpressAngularModalClose\" aria-label=\"Close\" >\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n      <div class=\"modal-body\" id=\"meanExpressAngularModalBody\">\n        Hello\n      </div>\n      <div class=\"modal-footer\" id=\"meanExpressAngularModalFooter\">\n      </div>\n    </div>\n  </div>\n</div> \n";
    /** @type {?} */
    var modalCss = "\n.meanExpressAngularModal {\n    display: none; \n    position: fixed; \n    z-index: 100; \n    padding-top: 100px; \n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%; \n    overflow: auto; \n    background-color: rgb(0,0,0);\n    background-color: rgba(0,0,0,0.4);\n}\n\n.meanExpressAngularModal.show {\n    display: block; \n}\n\n.meanExpressAngularModal-content {\n    position: relative;\n    background-color: #fefefe;\n    margin: auto;\n    padding: 0;\n    border: 1px solid #888;\n    width: 50%;\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);\n    -webkit-animation-name: modalanimatetop;\n    -webkit-animation-duration: 0.4s;\n    animation-name: modalanimatetop;\n    animation-duration: 0.4s\n}\n\n@-webkit-keyframes modalanimatetop {\n    from {top:-300px; opacity:0} \n    to {top:0; opacity:1}\n}\n\n@keyframes modalanimatetop {\n    from {top:-300px; opacity:0}\n    to {top:0; opacity:1}\n}\n";
    var ModalConfig = /** @class */ (function () {
        function ModalConfig() {
        }
        return ModalConfig;
    }());
    var Modal = /** @class */ (function () {
        function Modal(config) {
            this.config = config;
        }
        /**
         * @return {?}
         */
        Modal.prototype.show = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var config = this.config;
                if (!$('#meanExpressAngularModal').length) {
                    $("<style type='text/css' id='meanExpressAngularModalCss'>" + modalCss + "</style>").appendTo("head");
                    $('body').append(modalHtml);
                }
                $("#meanExpressAngularModalFooter").empty();
                for (var i = 0; i < config.buttons.length; i++) {
                    /** @type {?} */
                    var text = config.buttons[i];
                    /** @type {?} */
                    var button = '<button type="button" class="btn btn-primary" id="meanExpressAngularModalBtn' + i + '" >' + text + '</button>';
                    $("#meanExpressAngularModalFooter").append(button);
                    $("#meanExpressAngularModalBtn" + i).click(function (event) {
                        $('#meanExpressAngularModal').removeClass("show");
                        /** @type {?} */
                        var index = parseInt(event.target.id.replace("meanExpressAngularModalBtn", ""));
                        config.callBack(config.returns[index]);
                    });
                }
                $("#meanExpressAngularModalTitle").empty();
                $("#meanExpressAngularModalTitle").append(config.title);
                $("#meanExpressAngularModalBody").empty();
                $("#meanExpressAngularModalBody").append(config.content);
                $("#meanExpressAngularModalClose").click(function () {
                    $('#meanExpressAngularModal').removeClass("show");
                    config.callBack(false);
                });
                $('#meanExpressAngularModal').addClass("show");
            };
        /**
         * @return {?}
         */
        Modal.prototype.hide = /**
         * @return {?}
         */
            function () {
                $('#meanExpressAngularModal').removeClass("show");
            };
        return Modal;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var snackBarCss = "\n.meanExpressAngularSnackBar {\n    visibility: hidden;\n    min-width: 250px;\n    margin-left: -125px;\n    background-color: #333;\n    color: #fff;\n    text-align: center; \n    border-radius: 2px; \n    padding: 16px; \n    position: fixed;\n    z-index: 1;\n    left: 50%;\n    bottom: 30px;\n}\n\n.meanExpressAngularSnackBar.show {\n    visibility: visible;\n\n    -webkit-animation: snackbarfadein 0.5s, snackbarfadeout 0.5s 2.5s;\n    animation: snackbarfadein 0.5s, snackbarfadeout 0.5s 2.5s;\n}\n\n@-webkit-keyframes snackbarfadein {\n    from {bottom: 0; opacity: 0;} \n    to {bottom: 30px; opacity: 1;}\n}\n\n@keyframes snackbarfadein {\n    from {bottom: 0; opacity: 0;}\n    to {bottom: 30px; opacity: 1;}\n}\n\n@-webkit-keyframes snackbarfadeout {\n    from {bottom: 30px; opacity: 1;} \n    to {bottom: 0; opacity: 0;}\n}\n\n@keyframes snackbarfadeout {\n    from {bottom: 30px; opacity: 1;}\n    to {bottom: 0; opacity: 0;}\n}\n";
    var SnackBarConfig = /** @class */ (function () {
        function SnackBarConfig() {
        }
        return SnackBarConfig;
    }());
    var SnackBar = /** @class */ (function () {
        function SnackBar(config) {
            this.config = config;
        }
        /**
         * @private
         * @return {?}
         */
        SnackBar.prototype.getHtml = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var id = 'meanExpressAngularSnackBar' + Date.now();
                /** @type {?} */
                var snackBarHtml = "\n<div class=\"meanExpressAngularSnackBar\" id=\"" + id + "\">\n\n</div>\n";
                return { id: id, html: snackBarHtml };
            };
        /**
         * @return {?}
         */
        SnackBar.prototype.show = /**
         * @return {?}
         */
            function () {
                if (!$('#meanExpressAngularSnackBarCss').length) {
                    $("<style type='text/css' id='meanExpressAngularSnackBarCss'>" + snackBarCss + "</style>").appendTo("head");
                }
                /** @type {?} */
                var html = this.getHtml();
                /** @type {?} */
                var selector = '#' + html.id;
                $('body').append(html.html);
                $(selector).append(this.config.content);
                $(selector).addClass("show");
                setTimeout(function () {
                    $(selector).removeClass("show");
                    setTimeout(function () { $(selector).remove(); }, 500);
                }, 3000);
            };
        return SnackBar;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var errorCss = "\n.meanExpressAngularError {\n    visibility: hidden; \n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);\n    min-width: 250px; \n    max-width: 60%;\n    left: 50%;\n    top: 20%;\n    transform: translate(-50%, 0);\n    position: fixed; \n    z-index: 10; \n}\n.meanExpressAngularError.show {\n    visibility: visible; \n}\n\n.meanExpressAngularErrorMoreLink {\n    display: none;\n}\n.meanExpressAngularErrorMoreLink.show {\n    display: block;\n}\n.meanExpressAngularErrorMore {\n    display: none;\n    font-size: 0.75rem;\n    font-color: black;\n    background-color: gray;\n}\n.meanExpressAngularErrorMore.show {\n    display: block;\n}\n";
    var ErrorToastConfig = /** @class */ (function () {
        function ErrorToastConfig() {
        }
        return ErrorToastConfig;
    }());
    var ErrorToast = /** @class */ (function () {
        function ErrorToast(config) {
            this.config = config;
        }
        /**
         * @private
         * @return {?}
         */
        ErrorToast.prototype.getHtml = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var id = 'meanExpressAngularError' + Date.now();
                /** @type {?} */
                var errorHtml = "\n<div class=\"alert alert-danger fade in alert-dismissible meanExpressAngularError\"\n    id=\"" + id + "\">\n <button type=\"button\" class=\"close\" aria-label=\"Close\" id=\"button" + id + "\">\n    <span aria-hidden=\"true\" style=\"font-size:20px\">\u00D7</span>\n  </button>\n  <div>\n    <strong>Error!</strong>\n  </div>\n  <div id=\"content" + id + "\">\n  </div>\n  <a id=\"link" + id + "\" class=\"meanExpressAngularErrorMoreLink\" href=\".\" >Show more details...\n  </a>\n  <div id=\"more" + id + "\" class=\"meanExpressAngularErrorMore\">\n  </div>\n</div>\n";
                return { id: id, html: errorHtml };
            };
        /**
         * @return {?}
         */
        ErrorToast.prototype.show = /**
         * @return {?}
         */
            function () {
                if (!$('#meanExpressAngularErrorCss').length) {
                    $("<style type='text/css' id='meanExpressAngularErrorCss'>" + errorCss + "</style>").appendTo("head");
                }
                /** @type {?} */
                var html = this.getHtml();
                /** @type {?} */
                var selector = '#' + html.id;
                /** @type {?} */
                var contentSelector = '#content' + html.id;
                /** @type {?} */
                var moreSelector = '#more' + html.id;
                /** @type {?} */
                var linkSelector = '#link' + html.id;
                /** @type {?} */
                var buttonSelector = '#button' + html.id;
                $('body').append(html.html);
                $(contentSelector).append(this.config.content);
                if (this.config.more) {
                    $(moreSelector).append(this.config.more);
                    $(linkSelector).addClass("show");
                    $(linkSelector).click(function (event) {
                        event.preventDefault();
                        $(moreSelector).addClass("show");
                    });
                }
                $(buttonSelector).click(function (event) { $(selector).removeClass("show"); });
                $(selector).addClass("show");
            };
        return ErrorToast;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ServiceError = /** @class */ (function () {
        function ServiceError() {
        }
        return ServiceError;
    }());
    var BaseService = /** @class */ (function () {
        function BaseService(http$$1, serviceUrl) {
            this.http = http$$1;
            this.serviceUrl = serviceUrl;
            this.storage = {};
        }
        /**
         * @param {?} name
         * @return {?}
         */
        BaseService.prototype.getFromStorage = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                return this.storage[name];
            };
        /**
         * @param {?} name
         * @param {?} value
         * @return {?}
         */
        BaseService.prototype.putToStorage = /**
         * @param {?} name
         * @param {?} value
         * @return {?}
         */
            function (name, value) {
                this.storage[name] = value;
            };
        /**
         * @protected
         * @param {?} error
         * @return {?}
         */
        BaseService.prototype.errorResponseHandler = /**
         * @protected
         * @param {?} error
         * @return {?}
         */
            function (error) {
                /** @type {?} */
                var err = new ServiceError();
                if (error.error instanceof ErrorEvent) {
                    // A client-side or network error occurred. Handle it accordingly.
                    err.status = 0;
                    err.clientErrorMsg = error.error.message;
                }
                else {
                    // The backend returned an unsuccessful response code.
                    // The response body may contain clues as to what went wrong,
                    err.status = error.status;
                    err.serverError = error.error;
                }
                // return an observable with a user-facing error message
                return rxjs.throwError(err);
            };
        /**
         * @protected
         * @param {?} detail
         * @return {?}
         */
        BaseService.prototype.formatDetail = /**
         * @protected
         * @param {?} detail
         * @return {?}
         */
            function (detail) {
                return detail;
            };
        /**
         * @protected
         * @param {?} list
         * @return {?}
         */
        BaseService.prototype.formatList = /**
         * @protected
         * @param {?} list
         * @return {?}
         */
            function (list) {
                return list;
            };
        /**
         * @param {?} page
         * @param {?} per_page
         * @param {?} searchContext
         * @return {?}
         */
        BaseService.prototype.getList = /**
         * @param {?} page
         * @param {?} per_page
         * @param {?} searchContext
         * @return {?}
         */
            function (page, per_page, searchContext) {
                /** @type {?} */
                var httpOptions = {
                    params: new http.HttpParams().set('__page', page.toString())
                        .set('__per_page', per_page.toString()),
                    headers: new http.HttpHeaders({ 'Accept': 'application/json' }),
                };
                if (!searchContext) {
                    return this.http.get(this.serviceUrl, httpOptions)
                        .pipe(operators.map(this.formatList), operators.catchError(this.errorResponseHandler));
                }
                httpOptions.params = httpOptions.params.set('action', "Search");
                return this.http.post(this.serviceUrl + "mddsaction/get", searchContext, httpOptions)
                    .pipe(operators.catchError(this.errorResponseHandler));
            };
        /**
         * @param {?} page
         * @param {?} per_page
         * @return {?}
         */
        BaseService.prototype.getListWithCondition = /**
         * @param {?} page
         * @param {?} per_page
         * @return {?}
         */
            function (page, per_page) {
                /** @type {?} */
                var httpOptions = {
                    params: new http.HttpParams().set('__page', page.toString())
                        .set('__per_page', per_page.toString()),
                    headers: new http.HttpHeaders({ 'Accept': 'application/json' }),
                };
                return this.http.get(this.serviceUrl, httpOptions)
                    .pipe(operators.map(this.formatList), operators.catchError(this.errorResponseHandler));
            };
        /**
         * @param {?} id
         * @param {?} action
         * @return {?}
         */
        BaseService.prototype.getDetailForAction = /**
         * @param {?} id
         * @param {?} action
         * @return {?}
         */
            function (id, action) {
                /** @type {?} */
                var httpOptions = {
                    headers: new http.HttpHeaders({ 'Accept': 'application/json' }),
                };
                /** @type {?} */
                var serviceUrl = this.serviceUrl;
                if (action) {
                    httpOptions['params'] = new http.HttpParams().set('action', action);
                    if (action == "edit")
                        action = "post";
                    serviceUrl = serviceUrl + "mddsaction/" + action + "/";
                }
                return this.http.get(serviceUrl + id, httpOptions)
                    .pipe(operators.map(this.formatDetail), operators.catchError(this.errorResponseHandler));
            };
        /**
         * @param {?} id
         * @return {?}
         */
        BaseService.prototype.getDetail = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                return this.getDetailForAction(id, null);
            };
        /**
         * @param {?} id
         * @return {?}
         */
        BaseService.prototype.deleteOne = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                return this.http.delete(this.serviceUrl + id)
                    .pipe(operators.catchError(this.errorResponseHandler));
            };
        /**
         * @param {?} ids
         * @return {?}
         */
        BaseService.prototype.deleteManyByIds = /**
         * @param {?} ids
         * @return {?}
         */
            function (ids) {
                /** @type {?} */
                var httpOptions = {
                    headers: new http.HttpHeaders({ 'Content-Type': 'application/json' }),
                    params: new http.HttpParams().set('action', "DeleteManyByIds"),
                };
                return this.http.post(this.serviceUrl + "mddsaction/delete", ids, httpOptions)
                    .pipe(operators.catchError(this.errorResponseHandler));
            };
        /**
         * @param {?} item
         * @return {?}
         */
        BaseService.prototype.createOne = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                /** @type {?} */
                var httpOptions = {
                    headers: new http.HttpHeaders({ 'Content-Type': 'application/json' })
                };
                return this.http.put(this.serviceUrl, item, httpOptions)
                    .pipe(operators.map(this.formatDetail), operators.catchError(this.errorResponseHandler));
            };
        /**
         * @param {?} id
         * @param {?} item
         * @return {?}
         */
        BaseService.prototype.updateOne = /**
         * @param {?} id
         * @param {?} item
         * @return {?}
         */
            function (id, item) {
                /** @type {?} */
                var httpOptions = {
                    headers: new http.HttpHeaders({ 'Content-Type': 'application/json' })
                };
                return this.http.post(this.serviceUrl + id, item, httpOptions)
                    .pipe(operators.catchError(this.errorResponseHandler));
            };
        return BaseService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MraCommonService = /** @class */ (function () {
        function MraCommonService() {
            this.storage = {};
        }
        /**
         * @param {?} name
         * @return {?}
         */
        MraCommonService.prototype.getFromStorage = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                return this.storage[name];
            };
        /**
         * @param {?} name
         * @param {?} value
         * @return {?}
         */
        MraCommonService.prototype.putToStorage = /**
         * @param {?} name
         * @param {?} value
         * @return {?}
         */
            function (name, value) {
                this.storage[name] = value;
            };
        MraCommonService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        MraCommonService.ctorParameters = function () { return []; };
        return MraCommonService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Util = /** @class */ (function () {
        function Util() {
        }
        /**
         * @param {?} obj
         * @return {?}
         */
        Util.clone = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                /** @type {?} */
                var copy;
                // Handle the 3 simple types, and null or undefined
                if (null == obj || "object" != typeof obj)
                    return obj;
                // Handle Date
                if (obj instanceof Date) {
                    copy = new Date();
                    copy.setTime(obj.getTime());
                    return copy;
                }
                // Handle Array
                if (obj instanceof Array) {
                    copy = [];
                    for (var i = 0, len = obj.length; i < len; i++) {
                        copy[i] = Util.clone(obj[i]);
                    }
                    return copy;
                }
                // Handle Object
                if (obj instanceof Object) {
                    copy = {};
                    for (var attr in obj) {
                        if (obj.hasOwnProperty(attr))
                            copy[attr] = Util.clone(obj[attr]);
                    }
                    return copy;
                }
                throw new Error("Unable to copy obj! Its type isn't supported.");
            };
        return Util;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var ViewType = {
        LIST: 0,
        DETAIL: 1,
        EDIT: 2,
    };
    ViewType[ViewType.LIST] = 'LIST';
    ViewType[ViewType.DETAIL] = 'DETAIL';
    ViewType[ViewType.EDIT] = 'EDIT';
    var BaseComponent = /** @class */ (function () {
        function BaseComponent(service, injector, router, route, location, view, itemCamelName) {
            this.service = service;
            this.injector = injector;
            this.router = router;
            this.route = route;
            this.location = location;
            this.view = view;
            this.itemCamelName = itemCamelName;
            this.objectKeys = Object.keys;
            this.storage = {};
            //For list and pagination
            this.list = [];
            this.majorUi = true;
            this.eventEmitter = new core.EventEmitter();
            this.page = 1;
            this.per_page = 25;
            this.total_count = 0;
            this.total_pages = 0;
            this.pages = [];
            this.left_more = false;
            this.right_more = false;
            this.checkAll = false;
            //used to mark deleted items, or items that will show sub-detail, etc.
            this.checkedItem = [];
            //For edit and view details
            this.detail = {};
            this._detail = {}; //a clone and used to send/receive from next work
            //a clone and used to send/receive from next work
            this._extra = {}; //extra info.
            this.subEdit = false; //a edit-sub component
            //a edit-sub component
            //for fields with enum values
            this.enums = {};
            this.stringFields = [];
            this.referenceFields = [];
            this.referenceFieldsMap = {};
            this.dateFields = [];
            this.indexFields = [];
            this.multiSelectionFields = [];
            this.arrayFields = []; //element is [fieldName, elementType]
            //element is [fieldName, elementType]
            this.mapFields = []; //element is [fieldName, elementType, mapKey]
            //element is [fieldName, elementType, mapKey]
            this.dateFormat = "MM/DD/YYYY";
            this.timeFormat = "hh:mm:ss";
            this.hiddenFields = []; //fields hide from view. Currrently used by "Add" view of edit-sub
            this.refreshing = false;
            this.clickedId = null;
            this.selectedId = null;
            this.moreSearchOpened = false;
            //type of QueryList<T>
            this.textEditorMap = {};
            /**
             * Any View - add new component in the current view
             */
            this.isAdding = false;
            this.ItemCamelName = itemCamelName.charAt(0).toUpperCase() + itemCamelName.substr(1);
            this.itemName = itemCamelName.toLowerCase();
            this.parentItem = this.getParentRouteItem();
            this.commonService = injector.get(MraCommonService);
        }
        /**
         * @protected
         * @param {?} error
         * @return {?}
         */
        BaseComponent.prototype.onServiceError = /**
         * @protected
         * @param {?} error
         * @return {?}
         */
            function (error) {
                //clear any pending flags
                this.refreshing = false;
                /** @type {?} */
                var errMsg;
                /** @type {?} */
                var more;
                if (error.clientErrorMsg) {
                    errMsg = error.clientErrorMsg;
                }
                else if (error.serverError) {
                    if (error.status == 401)
                        return; //Don't show unauthorized error
                    if (typeof error.serverError === 'object') {
                        errMsg = error.status + ": " + JSON.stringify(error.serverError);
                    }
                    else {
                        errMsg = error.status + ": " + error.serverError;
                    }
                }
                console.info("Error: " + errMsg);
                if (!errMsg)
                    errMsg = "Unknown error.";
                if (errMsg.length > 80) {
                    more = errMsg;
                    errMsg = errMsg.substring(0, 80) + "...";
                }
                /** @type {?} */
                var errorToastConfig = {
                    content: errMsg,
                    more: more
                };
                /** @type {?} */
                var errorToast = new ErrorToast(errorToastConfig);
                errorToast.show();
            };
        /**
         * @protected
         * @return {?}
         */
        BaseComponent.prototype.populatePages = /**
         * @protected
         * @return {?}
         */
            function () {
                this.pages = [];
                /** @type {?} */
                var SHOW_PAGE = 9;
                /** @type {?} */
                var HALF = (SHOW_PAGE - 1) / 2;
                /** @type {?} */
                var min;
                /** @type {?} */
                var max;
                if (this.total_pages <= SHOW_PAGE) {
                    min = 1;
                    max = this.total_pages;
                    this.left_more = false;
                    this.right_more = false;
                }
                else {
                    if (this.page - 1 < HALF) {
                        min = 1;
                        max = SHOW_PAGE - 1;
                        this.left_more = false;
                        this.right_more = true;
                    }
                    else if (this.total_pages - this.page < HALF) {
                        max = this.total_pages;
                        min = (this.total_pages - SHOW_PAGE + 1) + 1;
                        this.left_more = true;
                        this.right_more = false;
                    }
                    else {
                        min = this.page - HALF + 1;
                        max = this.page + HALF - 1;
                        this.left_more = true;
                        this.right_more = true;
                    }
                }
                for (var i = min; i <= max; i++) {
                    this.pages.push(i);
                }
            };
        /**
         * @private
         * @param {?} key
         * @return {?}
         */
        BaseComponent.prototype.getKey = /**
         * @private
         * @param {?} key
         * @return {?}
         */
            function (key) {
                /** @type {?} */
                var url = this.router.url.split(';')[0].split('?')[0];
                return url + ":" + key;
            };
        /**
         * @private
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        BaseComponent.prototype.putToStorage = /**
         * @private
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                if (this.majorUi) {
                    //only major UI we want to cache and recover when user comes back
                    this.commonService.putToStorage(this.getKey(key), value);
                }
                else {
                    this.storage[key] = value;
                }
            };
        /**
         * @private
         * @param {?} key
         * @return {?}
         */
        BaseComponent.prototype.getFromStorage = /**
         * @private
         * @param {?} key
         * @return {?}
         */
            function (key) {
                if (this.majorUi) {
                    return this.commonService.getFromStorage(this.getKey(key));
                }
                else {
                    return this.storage[key];
                }
            };
        /**
         * @private
         * @param {?} page
         * @return {?}
         */
        BaseComponent.prototype.routeToPage = /**
         * @private
         * @param {?} page
         * @return {?}
         */
            function (page) {
                this.putToStorage("page", page);
                this.populateList();
            };
        /**
         * @protected
         * @return {?}
         */
        BaseComponent.prototype.onNextPage = /**
         * @protected
         * @return {?}
         */
            function () {
                if (this.page >= this.total_pages)
                    return;
                this.routeToPage(this.page + 1);
            };
        /**
         * @protected
         * @return {?}
         */
        BaseComponent.prototype.onPreviousPage = /**
         * @protected
         * @return {?}
         */
            function () {
                if (this.page <= 1)
                    return;
                this.routeToPage(this.page - 1);
            };
        /**
         * @protected
         * @param {?} p
         * @return {?}
         */
        BaseComponent.prototype.onGotoPage = /**
         * @protected
         * @param {?} p
         * @return {?}
         */
            function (p) {
                if (p > this.total_pages || p < 1)
                    return;
                this.routeToPage(p);
            };
        /**
         * @protected
         * @return {?}
         */
        BaseComponent.prototype.goBack = /**
         * @protected
         * @return {?}
         */
            function () {
                this.location.back();
                /*
                // window.history.back();
                if (this.view != ViewType.EDIT)
                    this.location.back();
                else {
                    let url = this.location.path(); //in EDIT view, the current url is skipped. So get the "previous" one from path.
                    this.router.navigateByUrl(url);
                }
                */
            };
        /**
         * @protected
         * @param {?} detail
         * @return {?}
         */
        BaseComponent.prototype.stringify = /**
         * @protected
         * @param {?} detail
         * @return {?}
         */
            function (detail) {
                var e_1, _a;
                /** @type {?} */
                var str = "";
                try {
                    for (var _b = __values(this.indexFields), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var fnm = _c.value;
                        if (detail[fnm] && typeof detail[fnm] != 'object')
                            str += " " + detail[fnm];
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                if (!str) {
                    for (var prop in detail) {
                        if (prop !== '_id' && detail[prop] && typeof detail[prop] != 'object') {
                            str += " " + detail[prop];
                        }
                    }
                }
                if (!str)
                    str = detail["_id"] ? detail["_id"] : "...";
                str = str.replace(/^\s+|\s+$/g, '');
                if (str.length > 30)
                    str = str.substr(0, 27) + '...';
                return str;
            };
        /***Start: handle reference fields***/
        /**
         * Start: handle reference fields**
         * @protected
         * @param {?} field
         * @param {?} fieldName
         * @return {?}
         */
        BaseComponent.prototype.formatReferenceField = /**
         * Start: handle reference fields**
         * @protected
         * @param {?} field
         * @param {?} fieldName
         * @return {?}
         */
            function (field, fieldName) {
                /** @type {?} */
                var id;
                /** @type {?} */
                var value;
                if (typeof field == 'string') {
                    //assume this is the "_id", let see we have the cached details for this ref from service
                    /** @type {?} */
                    var refDetail = this.commonService.getFromStorage(field);
                    if (refDetail && (typeof refDetail == 'object'))
                        field = refDetail;
                    else {
                        id = field;
                        field = { '_id': id };
                    }
                }
                else if (field && (typeof field == 'object')) {
                    id = field['_id'];
                    /** @type {?} */
                    var referIndex = '';
                    for (var k in field) {
                        if (k != '_id')
                            referIndex += " " + field[k];
                    }
                    referIndex = referIndex.replace(/^\s+|\s+$/g, '');
                    if (referIndex.length >= 20)
                        referIndex = referIndex.substring(0, 20) + "...";
                    field = { '_id': id, 'value': referIndex ? referIndex : fieldName };
                }
                else { //not defined
                    field = { '_id': id, 'value': value };
                }
                return field;
            };
        /**
         * @protected
         * @param {?} detail
         * @return {?}
         */
        BaseComponent.prototype.formatReference = /**
         * @protected
         * @param {?} detail
         * @return {?}
         */
            function (detail) {
                var e_2, _a;
                try {
                    for (var _b = __values(this.referenceFields), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var fnm = _c.value;
                        detail[fnm] = this.formatReferenceField(detail[fnm], fnm);
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
                return detail;
            };
        /**
         * @protected
         * @param {?} detail
         * @return {?}
         */
        BaseComponent.prototype.deFormatReference = /**
         * @protected
         * @param {?} detail
         * @return {?}
         */
            function (detail) {
                var e_3, _a;
                try {
                    for (var _b = __values(this.referenceFields), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var fnm = _c.value;
                        if (typeof detail[fnm] !== 'object') { //not defined
                            //let date values undefined
                            delete detail[fnm];
                        }
                        else {
                            /** @type {?} */
                            var id = detail[fnm]['_id'];
                            if (typeof id !== 'string')
                                delete detail[fnm];
                            else
                                detail[fnm] = id;
                        }
                    }
                }
                catch (e_3_1) {
                    e_3 = { error: e_3_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_3)
                            throw e_3.error;
                    }
                }
                return detail;
            };
        /**
         * @protected
         * @param {?} field
         * @return {?}
         */
        BaseComponent.prototype.clearFieldReference = /**
         * @protected
         * @param {?} field
         * @return {?}
         */
            function (field) {
                for (var prop in field) {
                    field[prop] = undefined;
                }
                return field;
            };
        /**
         * @protected
         * @param {?} field
         * @return {?}
         */
        BaseComponent.prototype.isDefinedFieldReference = /**
         * @protected
         * @param {?} field
         * @return {?}
         */
            function (field) {
                if ('_id' in field && typeof field['_id'] == 'string')
                    return true;
                return false;
            };
        /***Start: handle date fields***/
        /**
         * Start: handle date fields**
         * @protected
         * @param {?} field
         * @return {?}
         */
        BaseComponent.prototype.formatDateField = /**
         * Start: handle date fields**
         * @protected
         * @param {?} field
         * @return {?}
         */
            function (field) {
                /** @type {?} */
                var fmt = this.dateFormat;
                /** @type {?} */
                var t_fmt = this.timeFormat;
                /** @type {?} */
                var d;
                /** @type {?} */
                var M;
                /** @type {?} */
                var yyyy;
                /** @type {?} */
                var h;
                /** @type {?} */
                var m;
                /** @type {?} */
                var s;
                /** @type {?} */
                var dt = new Date(field);
                /** @type {?} */
                var dd;
                /** @type {?} */
                var MM;
                /** @type {?} */
                var hh;
                /** @type {?} */
                var mm;
                /** @type {?} */
                var ss;
                d = dt.getDate();
                M = dt.getMonth() + 1;
                yyyy = dt.getFullYear();
                /** @type {?} */
                var yy = yyyy.toString().slice(2);
                h = dt.getHours();
                m = dt.getMinutes();
                s = dt.getSeconds();
                dd = d < 10 ? '0' + d : d.toString();
                MM = M < 10 ? '0' + M : M.toString();
                hh = h < 10 ? '0' + h : h.toString();
                mm = m < 10 ? '0' + m : m.toString();
                ss = s < 10 ? '0' + s : s.toString();
                /** @type {?} */
                var value = fmt.replace(/yyyy/ig, yyyy.toString()).
                    replace(/yy/ig, yy.toString()).
                    replace(/MM/g, MM.toString()).
                    replace(/dd/ig, dd.toString());
                /** @type {?} */
                var t_value = t_fmt.replace(/hh/ig, hh.toString()).
                    replace(/mm/g, mm.toString()).
                    replace(/ss/ig, ss.toString());
                /*Datepicker uses NgbDateStruct as a model and not the native Date object.
                It's a simple data structure with 3 fields. Also note that months start with 1 (as in ISO 8601).
                
                we add h, m, s here
                */
                //"from" and "to" used for search context. pop: show the selection popup
                return { 'date': { day: d, month: M, year: yyyy }, 'value': value, 'from': undefined, 'to': undefined, 'pop': false,
                    'time': { hour: h, minute: m, second: s }, 't_value': value, 't_from': undefined, 't_to': undefined, 't_pop': false };
            };
        /**
         * @protected
         * @param {?} detail
         * @return {?}
         */
        BaseComponent.prototype.formatDate = /**
         * @protected
         * @param {?} detail
         * @return {?}
         */
            function (detail) {
                var e_4, _a;
                try {
                    for (var _b = __values(this.dateFields), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var fnm = _c.value;
                        if (typeof detail[fnm] !== 'string') { //not defined
                            //important: let date values undefined. "from" and "to" used for search context. pop: show the selection popup
                            detail[fnm] = { 'date': undefined, 'value': undefined, 'from': undefined, 'to': undefined, 'pop': false };
                        }
                        else {
                            detail[fnm] = this.formatDateField(detail[fnm]);
                        }
                    }
                }
                catch (e_4_1) {
                    e_4 = { error: e_4_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_4)
                            throw e_4.error;
                    }
                }
                return detail;
            };
        /**
         * @protected
         * @param {?} date
         * @return {?}
         */
        BaseComponent.prototype.deFormatDateField = /**
         * @protected
         * @param {?} date
         * @return {?}
         */
            function (date) {
                /** @type {?} */
                var d;
                /** @type {?} */
                var M;
                /** @type {?} */
                var yyyy;
                yyyy = date.year;
                M = date.month - 1;
                d = date.day;
                if (typeof yyyy !== 'number' || typeof M !== 'number' || typeof d !== 'number')
                    return null;
                else {
                    /** @type {?} */
                    var dt = new Date(yyyy, M, d, 0, 0, 0, 0);
                    return dt.toISOString();
                }
            };
        /**
         * @protected
         * @param {?} detail
         * @return {?}
         */
        BaseComponent.prototype.deFormatDate = /**
         * @protected
         * @param {?} detail
         * @return {?}
         */
            function (detail) {
                var e_5, _a;
                try {
                    for (var _b = __values(this.dateFields), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var fnm = _c.value;
                        if (typeof detail[fnm] !== 'object') { //not defined
                            //let date values undefined
                            delete detail[fnm];
                        }
                        else {
                            if (!detail[fnm].date)
                                delete detail[fnm];
                            else {
                                /** @type {?} */
                                var dateStr = this.deFormatDateField(detail[fnm].date);
                                if (!dateStr)
                                    delete detail[fnm];
                                else
                                    detail[fnm] = dateStr;
                            }
                        }
                    }
                }
                catch (e_5_1) {
                    e_5 = { error: e_5_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_5)
                            throw e_5.error;
                    }
                }
                return detail;
            };
        /**
         * @protected
         * @param {?} field
         * @return {?}
         */
        BaseComponent.prototype.clearFieldDate = /**
         * @protected
         * @param {?} field
         * @return {?}
         */
            function (field) {
                for (var prop in field) {
                    field[prop] = undefined;
                }
                return field;
            };
        /**
         * @protected
         * @param {?} field
         * @return {?}
         */
        BaseComponent.prototype.isDefinedFieldDate = /**
         * @protected
         * @param {?} field
         * @return {?}
         */
            function (field) {
                if (typeof field === 'object') {
                    if (typeof field['date'] == 'object')
                        return true;
                    if (typeof field['from'] == 'object')
                        return true;
                    if (typeof field['to'] == 'object')
                        return true;
                }
                return false;
            };
        /***Start: handle array of multi-selection fields***/
        /**
         * Start: handle array of multi-selection fields**
         * @protected
         * @param {?} field
         * @param {?} enums
         * @return {?}
         */
        BaseComponent.prototype.formatArrayMultiSelectionField = /**
         * Start: handle array of multi-selection fields**
         * @protected
         * @param {?} field
         * @param {?} enums
         * @return {?}
         */
            function (field, enums) {
                var e_6, _a, e_7, _b;
                /** @type {?} */
                var selectObj = {};
                /** @type {?} */
                var value = "";
                try {
                    for (var enums_1 = __values(enums), enums_1_1 = enums_1.next(); !enums_1_1.done; enums_1_1 = enums_1.next()) {
                        var e = enums_1_1.value;
                        selectObj[e] = false; //not exist
                    }
                }
                catch (e_6_1) {
                    e_6 = { error: e_6_1 };
                }
                finally {
                    try {
                        if (enums_1_1 && !enums_1_1.done && (_a = enums_1.return))
                            _a.call(enums_1);
                    }
                    finally {
                        if (e_6)
                            throw e_6.error;
                    }
                }
                if (Array.isArray(field)) { //not defined
                    try {
                        for (var field_1 = __values(field), field_1_1 = field_1.next(); !field_1_1.done; field_1_1 = field_1.next()) {
                            var e = field_1_1.value;
                            selectObj[e] = true; //exist.
                        }
                    }
                    catch (e_7_1) {
                        e_7 = { error: e_7_1 };
                    }
                    finally {
                        try {
                            if (field_1_1 && !field_1_1.done && (_b = field_1.return))
                                _b.call(field_1);
                        }
                        finally {
                            if (e_7)
                                throw e_7.error;
                        }
                    }
                    value = field.join(" | ");
                }
                return { 'selection': selectObj, value: value };
            };
        /**
         * @protected
         * @param {?} detail
         * @return {?}
         */
        BaseComponent.prototype.formatArrayMultiSelection = /**
         * @protected
         * @param {?} detail
         * @return {?}
         */
            function (detail) {
                var e_8, _a;
                try {
                    for (var _b = __values(this.multiSelectionFields), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var fnm = _c.value;
                        detail[fnm] = this.formatArrayMultiSelectionField(detail[fnm], this.enums[fnm]);
                    }
                }
                catch (e_8_1) {
                    e_8 = { error: e_8_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_8)
                            throw e_8.error;
                    }
                }
                return detail;
            };
        /**
         * @protected
         * @param {?} detail
         * @return {?}
         */
        BaseComponent.prototype.deFormatArrayMultiSelection = /**
         * @protected
         * @param {?} detail
         * @return {?}
         */
            function (detail) {
                var e_9, _a, e_10, _b;
                try {
                    for (var _c = __values(this.multiSelectionFields), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var fnm = _d.value;
                        if (typeof detail[fnm] !== 'object') { //not defined
                            delete detail[fnm];
                        }
                        else {
                            if (!detail[fnm].selection)
                                delete detail[fnm];
                            else {
                                /** @type {?} */
                                var selectArray = [];
                                try {
                                    for (var _e = __values(this.enums[fnm]), _f = _e.next(); !_f.done; _f = _e.next()) {
                                        var e = _f.value;
                                        if (detail[fnm].selection[e])
                                            selectArray.push(e);
                                    }
                                }
                                catch (e_10_1) {
                                    e_10 = { error: e_10_1 };
                                }
                                finally {
                                    try {
                                        if (_f && !_f.done && (_b = _e.return))
                                            _b.call(_e);
                                    }
                                    finally {
                                        if (e_10)
                                            throw e_10.error;
                                    }
                                }
                                if (selectArray.length > 0)
                                    detail[fnm] = selectArray;
                                else
                                    delete detail[fnm];
                            }
                        }
                    }
                }
                catch (e_9_1) {
                    e_9 = { error: e_9_1 };
                }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return))
                            _a.call(_c);
                    }
                    finally {
                        if (e_9)
                            throw e_9.error;
                    }
                }
                return detail;
            };
        /**
         * @protected
         * @param {?} field
         * @return {?}
         */
        BaseComponent.prototype.clearFieldArrayMultiSelection = /**
         * @protected
         * @param {?} field
         * @return {?}
         */
            function (field) {
                if (!field['selection'])
                    return field;
                for (var prop in field['selection']) {
                    field['selection'][prop] = false; //not exist
                }
                return field;
            };
        /**
         * @protected
         * @param {?} field
         * @return {?}
         */
        BaseComponent.prototype.isDefinedFieldArrayMultiSelection = /**
         * @protected
         * @param {?} field
         * @return {?}
         */
            function (field) {
                if ('selection' in field && typeof field['selection'] == 'object') {
                    /** @type {?} */
                    var keys = Object.keys(field['selection']);
                    return keys.some(function (e) { return field['selection'][e]; });
                }
                return false;
            };
        /**
         * @protected
         * @param {?} fieldName
         * @return {?}
         */
        BaseComponent.prototype.multiselectionSelected = /**
         * @protected
         * @param {?} fieldName
         * @return {?}
         */
            function (fieldName) {
                if (!this.detail[fieldName] || typeof this.detail[fieldName]['selection'] != 'object') {
                    return false;
                }
                return this.isDefinedFieldArrayMultiSelection(this.detail[fieldName]);
            };
        /***End: handle array of multi-selection fields***/
        /***Start: handle map fields***/
        /***End: handle array of multi-selection fields***/
        /**
         * Start: handle map fields**
         * @protected
         * @param {?} field
         * @param {?} elementType
         * @return {?}
         */
        BaseComponent.prototype.formatMapField = /***End: handle array of multi-selection fields***/
            /**
             * Start: handle map fields**
             * @protected
             * @param {?} field
             * @param {?} elementType
             * @return {?}
             */
            function (field, elementType) {
                /** @type {?} */
                var selectObj = {};
                /** @type {?} */
                var values = [];
                if (typeof field == 'object') {
                    selectObj = field;
                    for (var e in field) {
                        if (elementType === 'SchemaString') {
                            values.push(e + "(" + field[e] + ")");
                        }
                    }
                }
                values = values.filter(function (x) { return !!x; });
                /** @type {?} */
                var value = values.join(" | ");
                return { 'selection': selectObj, value: value, keys: [] };
            };
        /**
         * @protected
         * @param {?} detail
         * @return {?}
         */
        BaseComponent.prototype.formatMapFields = /**
         * @protected
         * @param {?} detail
         * @return {?}
         */
            function (detail) {
                var e_11, _a;
                try {
                    for (var _b = __values(this.mapFields), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var f = _c.value;
                        //[fieldName, elementType]
                        detail[f[0]] = this.formatMapField(detail[f[0]], f[1]);
                    }
                }
                catch (e_11_1) {
                    e_11 = { error: e_11_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_11)
                            throw e_11.error;
                    }
                }
                return detail;
            };
        /**
         * @protected
         * @param {?} detail
         * @return {?}
         */
        BaseComponent.prototype.deFormatMapFields = /**
         * @protected
         * @param {?} detail
         * @return {?}
         */
            function (detail) {
                var e_12, _a;
                try {
                    for (var _b = __values(this.mapFields), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var f = _c.value;
                        //[fieldName, elementType]
                        /** @type {?} */
                        var fnm = f[0];
                        /** @type {?} */
                        var elementType = f[1];
                        if (typeof detail[fnm] !== 'object') { //not defined
                            delete detail[fnm];
                        }
                        else {
                            if (!detail[fnm].selection)
                                delete detail[fnm];
                            else {
                                /** @type {?} */
                                var selectMap = detail[fnm].selection;
                                for (var e in detail[fnm].selection) {
                                }
                                if (Object.keys(selectMap).length > 0)
                                    detail[fnm] = selectMap;
                                else
                                    delete detail[fnm];
                            }
                        }
                    }
                }
                catch (e_12_1) {
                    e_12 = { error: e_12_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_12)
                            throw e_12.error;
                    }
                }
                return detail;
            };
        /**
         * @protected
         * @param {?} field
         * @return {?}
         */
        BaseComponent.prototype.clearFieldMap = /**
         * @protected
         * @param {?} field
         * @return {?}
         */
            function (field) {
                if (!field['selection'])
                    return field;
                field['selection'] = {};
                field.value = undefined;
                return field;
            };
        /**
         * @protected
         * @param {?} field
         * @return {?}
         */
        BaseComponent.prototype.isDefinedFieldMap = /**
         * @protected
         * @param {?} field
         * @return {?}
         */
            function (field) {
                if ('selection' in field && typeof field['selection'] == 'object') {
                    return Object.keys(field['selection']).length > 0;
                }
                return false;
            };
        /**
         * @protected
         * @param {?} fieldName
         * @return {?}
         */
        BaseComponent.prototype.mapSelected = /**
         * @protected
         * @param {?} fieldName
         * @return {?}
         */
            function (fieldName) {
                if (!this.detail[fieldName] || typeof this.detail[fieldName]['selection'] != 'object') {
                    return false;
                }
                return this.isDefinedFieldMap(this.detail[fieldName]);
            };
        /***End: handle map fields***/
        /***Start: handle array fields***/
        /***End: handle map fields***/
        /**
         * Start: handle array fields**
         * @protected
         * @param {?} field
         * @param {?} elementType
         * @return {?}
         */
        BaseComponent.prototype.formatArrayField = /***End: handle map fields***/
            /**
             * Start: handle array fields**
             * @protected
             * @param {?} field
             * @param {?} elementType
             * @return {?}
             */
            function (field, elementType) {
                var e_13, _a;
                /** @type {?} */
                var selectArray = [];
                /** @type {?} */
                var values = [];
                if (Array.isArray(field)) { //not defined
                    try {
                        for (var field_2 = __values(field), field_2_1 = field_2.next(); !field_2_1.done; field_2_1 = field_2.next()) {
                            var e = field_2_1.value;
                            if (elementType === 'ObjectId') {
                                /** @type {?} */
                                var ref = this.formatReferenceField(e, "...");
                                selectArray.push(ref);
                                values.push(ref.value);
                            }
                            else if (elementType === 'SchemaString') {
                                selectArray.push(e);
                                values.push(e);
                            }
                        }
                    }
                    catch (e_13_1) {
                        e_13 = { error: e_13_1 };
                    }
                    finally {
                        try {
                            if (field_2_1 && !field_2_1.done && (_a = field_2.return))
                                _a.call(field_2);
                        }
                        finally {
                            if (e_13)
                                throw e_13.error;
                        }
                    }
                }
                values = values.filter(function (x) { return !!x; });
                /** @type {?} */
                var value = values.join(" | ");
                return { 'selection': selectArray, value: value };
            };
        /**
         * @protected
         * @param {?} detail
         * @return {?}
         */
        BaseComponent.prototype.formatArrayFields = /**
         * @protected
         * @param {?} detail
         * @return {?}
         */
            function (detail) {
                var e_14, _a;
                try {
                    for (var _b = __values(this.arrayFields), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var f = _c.value;
                        //[fieldName, elementType]
                        detail[f[0]] = this.formatArrayField(detail[f[0]], f[1]);
                    }
                }
                catch (e_14_1) {
                    e_14 = { error: e_14_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_14)
                            throw e_14.error;
                    }
                }
                return detail;
            };
        /**
         * @protected
         * @param {?} detail
         * @return {?}
         */
        BaseComponent.prototype.deFormatArrayFields = /**
         * @protected
         * @param {?} detail
         * @return {?}
         */
            function (detail) {
                var e_15, _a, e_16, _b;
                try {
                    for (var _c = __values(this.arrayFields), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var f = _d.value;
                        //[fieldName, elementType]
                        /** @type {?} */
                        var fnm = f[0];
                        /** @type {?} */
                        var elementType = f[1];
                        if (typeof detail[fnm] !== 'object') { //not defined
                            delete detail[fnm];
                        }
                        else {
                            if (!detail[fnm].selection)
                                delete detail[fnm];
                            else {
                                /** @type {?} */
                                var selectArray = [];
                                try {
                                    for (var _e = __values(detail[fnm].selection), _f = _e.next(); !_f.done; _f = _e.next()) {
                                        var e = _f.value;
                                        if (elementType === 'ObjectId') {
                                            if (e && e['_id'] && typeof e['_id'] === 'string')
                                                selectArray.push(e['_id']);
                                        }
                                        else if (elementType === 'SchemaString') {
                                            if (e)
                                                selectArray.push(e);
                                        }
                                    }
                                }
                                catch (e_16_1) {
                                    e_16 = { error: e_16_1 };
                                }
                                finally {
                                    try {
                                        if (_f && !_f.done && (_b = _e.return))
                                            _b.call(_e);
                                    }
                                    finally {
                                        if (e_16)
                                            throw e_16.error;
                                    }
                                }
                                if (selectArray.length > 0)
                                    detail[fnm] = selectArray;
                                else
                                    delete detail[fnm];
                            }
                        }
                    }
                }
                catch (e_15_1) {
                    e_15 = { error: e_15_1 };
                }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return))
                            _a.call(_c);
                    }
                    finally {
                        if (e_15)
                            throw e_15.error;
                    }
                }
                return detail;
            };
        /**
         * @protected
         * @param {?} field
         * @return {?}
         */
        BaseComponent.prototype.clearFieldArray = /**
         * @protected
         * @param {?} field
         * @return {?}
         */
            function (field) {
                if (!field['selection'])
                    return field;
                field['selection'] = [];
                field.value = undefined;
                return field;
            };
        /**
         * @protected
         * @param {?} field
         * @return {?}
         */
        BaseComponent.prototype.isDefinedFieldArray = /**
         * @protected
         * @param {?} field
         * @return {?}
         */
            function (field) {
                if ('selection' in field && Array.isArray(field['selection'])) {
                    return field['selection'].length > 0;
                }
                return false;
            };
        /**
         * @protected
         * @param {?} fieldName
         * @return {?}
         */
        BaseComponent.prototype.arraySelected = /**
         * @protected
         * @param {?} fieldName
         * @return {?}
         */
            function (fieldName) {
                if (!this.detail[fieldName] || !Array.isArray(this.detail[fieldName]['selection'])) {
                    return false;
                }
                return this.isDefinedFieldArray(this.detail[fieldName]);
            };
        /***End: handle array fields***/
        /**
         * End: handle array fields**
         * @protected
         * @param {?} detail
         * @return {?}
         */
        BaseComponent.prototype.formatDetail = /**
         * End: handle array fields**
         * @protected
         * @param {?} detail
         * @return {?}
         */
            function (detail) {
                detail = this.formatReference(detail);
                detail = this.formatDate(detail);
                detail = this.formatArrayMultiSelection(detail);
                detail = this.formatArrayFields(detail);
                detail = this.formatMapFields(detail);
                return detail;
            };
        /**
         * @protected
         * @param {?} detail
         * @return {?}
         */
        BaseComponent.prototype.deFormatDetail = /**
         * @protected
         * @param {?} detail
         * @return {?}
         */
            function (detail) {
                /** @type {?} */
                var cpy = Util.clone(detail);
                cpy = this.deFormatReference(cpy);
                cpy = this.deFormatDate(cpy);
                cpy = this.deFormatArrayMultiSelection(cpy);
                cpy = this.deFormatArrayFields(cpy);
                cpy = this.deFormatMapFields(cpy);
                return cpy;
            };
        /**
         * @protected
         * @param {?} id
         * @return {?}
         */
        BaseComponent.prototype.populateDetail = /**
         * @protected
         * @param {?} id
         * @return {?}
         */
            function (id) {
                return this.populateDetailForAction(id, null);
            };
        /**
         * @protected
         * @param {?} id
         * @param {?} action
         * @return {?}
         */
        BaseComponent.prototype.populateDetailForAction = /**
         * @protected
         * @param {?} id
         * @param {?} action
         * @return {?}
         */
            function (id, action) {
                var _this = this;
                //action: eg: action=edit  -> get detail for editing purpose 
                this.service.getDetailForAction(id, action).subscribe(function (detail) {
                    /** @type {?} */
                    var originalDetail = Util.clone(detail);
                    if (detail["_id"])
                        _this.commonService.putToStorage(detail["_id"], originalDetail); //cache it
                    _this.detail = _this.formatDetail(detail);
                    _this.extraFieldsUnload(); //unload data to text editors, etc
                    if (action == 'edit') {
                        _this.extraInfoPopulate(); //collect other info required for edit view
                    }
                    if (_this.refreshing) {
                        _this.refreshing = false;
                        /** @type {?} */
                        var snackBarConfig = {
                            content: "Detail refreshed"
                        };
                        /** @type {?} */
                        var snackBar = new SnackBar(snackBarConfig);
                        snackBar.show();
                    }
                    _this.eventEmitter.emit(_this.detail);
                }, this.onServiceError);
                return this.eventEmitter;
            };
        /**
         * @protected
         * @param {?} copy_id
         * @return {?}
         */
        BaseComponent.prototype.populateDetailFromCopy = /**
         * @protected
         * @param {?} copy_id
         * @return {?}
         */
            function (copy_id) {
                var _this = this;
                this.service.getDetail(copy_id).subscribe(function (detail) {
                    _this.detail = _this.formatDetail(detail);
                    delete _this.detail["_id"];
                    _this.extraFieldsUnload(); //unload data to text editors, etc
                    _this.extraInfoPopulate(); //collect other info required for create view
                }, this.onServiceError);
            };
        /**
         * @protected
         * @return {?}
         */
        BaseComponent.prototype.extraInfoPopulate = /**
         * @protected
         * @return {?}
         */
            function () {
                var e_17, _a;
                var _loop_1 = function (fieldDef) {
                    //fieldDef: [field.fieldName, field.elementType, keyType, keyRefName, keyRefService, keyRefSubField]
                    /** @type {?} */
                    var fieldName = fieldDef[0];
                    //this.<keyRefName>.<keyRefSubField>
                    /** @type {?} */
                    var mapKeyType = fieldDef[2];
                    //this.<keyRefName>.<keyRefSubField>
                    /** @type {?} */
                    var keyArray = [];
                    if (mapKeyType == "ObjectId") {
                        /** @type {?} */
                        var keyRefName = fieldDef[3];
                        /** @type {?} */
                        var recordKey_1 = 'key-id-' + keyRefName;
                        /** @type {?} */
                        var refService = this_1.injector.get(fieldDef[4]);
                        /** @type {?} */
                        var id_1 = this_1.detail[keyRefName] ? this_1.detail[keyRefName]['_id'] : undefined;
                        if (!id_1)
                            return "continue";
                        /** @type {?} */
                        var mapField_1 = this_1.detail[fieldName];
                        if (mapField_1[recordKey_1] == id_1)
                            return "continue"; //already populated for the same id
                        refService.getDetail(id_1).subscribe(function (detail) {
                            var e_18, _a;
                            if (Array.isArray(detail[fieldDef[5]])) {
                                keyArray = detail[fieldDef[5]];
                                mapField_1['keys'] = keyArray;
                                mapField_1[recordKey_1] = id_1; //record that keys is populated from this object
                                if (mapField_1['selection']) {
                                    try {
                                        for (var keyArray_1 = __values(keyArray), keyArray_1_1 = keyArray_1.next(); !keyArray_1_1.done; keyArray_1_1 = keyArray_1.next()) {
                                            var k = keyArray_1_1.value;
                                            if (!(k in mapField_1['selection']))
                                                mapField_1['selection'][k] = "";
                                        }
                                    }
                                    catch (e_18_1) {
                                        e_18 = { error: e_18_1 };
                                    }
                                    finally {
                                        try {
                                            if (keyArray_1_1 && !keyArray_1_1.done && (_a = keyArray_1.return))
                                                _a.call(keyArray_1);
                                        }
                                        finally {
                                            if (e_18)
                                                throw e_18.error;
                                        }
                                    }
                                }
                            }
                        }, this_1.onServiceError);
                    }
                };
                var this_1 = this;
                try {
                    for (var _b = __values(this.mapFields), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var fieldDef = _c.value;
                        _loop_1(fieldDef);
                    }
                }
                catch (e_17_1) {
                    e_17 = { error: e_17_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_17)
                            throw e_17.error;
                    }
                }
            };
        /**
         * @private
         * @param {?} arr1
         * @param {?} arr2
         * @return {?}
         */
        BaseComponent.prototype.equalTwoSearchContextArrays = /**
         * @private
         * @param {?} arr1
         * @param {?} arr2
         * @return {?}
         */
            function (arr1, arr2) {
                if (!arr1)
                    arr1 = [];
                if (!arr2)
                    arr2 = [];
                if (arr1.length == 0 && arr2.length == 0)
                    return true;
                //all object in array has format of {'field': 'value'} format
                /**
                 * @param {?} a
                 * @param {?} b
                 * @return {?}
                 */
                function compareObj(a, b) {
                    /** @type {?} */
                    var a_s = JSON.stringify(a);
                    /** @type {?} */
                    var b_s = JSON.stringify(b);
                    if (a_s < b_s)
                        return -1;
                    if (a_s > b_s)
                        return 1;
                    return 0;
                }
                arr1 = arr1.sort(compareObj);
                arr2 = arr2.sort(compareObj);
                if (JSON.stringify(arr1) == JSON.stringify(arr2))
                    return true;
                return false;
            };
        /**
         * @protected
         * @return {?}
         */
        BaseComponent.prototype.processSearchContext = /**
         * @protected
         * @return {?}
         */
            function () {
                var e_19, _a, e_20, _b, e_21, _c;
                this.moreSearchOpened = false;
                /** @type {?} */
                var d = this.detail;
                try {
                    for (var _d = __values(this.stringFields), _e = _d.next(); !_e.done; _e = _d.next()) {
                        var s = _e.value;
                        d[s] = this.searchText;
                    }
                }
                catch (e_19_1) {
                    e_19 = { error: e_19_1 };
                }
                finally {
                    try {
                        if (_e && !_e.done && (_a = _d.return))
                            _a.call(_d);
                    }
                    finally {
                        if (e_19)
                            throw e_19.error;
                    }
                }
                /** @type {?} */
                var orSearchContext = [];
                /** @type {?} */
                var andSearchContext = [];
                for (var field in d) {
                    if (typeof d[field] == 'string') {
                        /** @type {?} */
                        var o = {};
                        o[field] = d[field];
                        orSearchContext.push(o);
                    }
                }
                this.searchMoreDetail = [];
                /** @type {?} */
                var d2 = this.deFormatDetail(d);
                var _loop_2 = function (field) {
                    if (this_2.stringFields.indexOf(field) == -1) { //string fields already put to orSearchContext
                        //string fields already put to orSearchContext
                        /** @type {?} */
                        var o = {};
                        /** @type {?} */
                        var valueToShow = void 0;
                        o[field] = d2[field];
                        if (this_2.multiSelectionFields.includes(field)) {
                            o[field] = { $in: d2[field] }; //use $in for or, and $all for and
                            //use $in for or, and $all for and
                            /** @type {?} */
                            var t = this_2.formatArrayMultiSelectionField(d2[field], this_2.enums[field]);
                            valueToShow = t.value;
                        }
                        else if (this_2.arrayFields.some(function (x) { return x[0] == field; })) {
                            o[field] = { $in: d2[field] }; //use $in for or, and $all for and
                            valueToShow = d[field]['value'];
                        }
                        else if (this_2.dateFields.includes(field)) {
                            /** @type {?} */
                            var t = this_2.formatDateField(d2[field]);
                            valueToShow = t.value;
                        }
                        else if (this_2.referenceFields.includes(field)) {
                            valueToShow = valueToShow = d[field]['value'];
                        }
                        else {
                            valueToShow = d[field]; //take directoy from what we get 
                        }
                        this_2.searchMoreDetail.push([field, valueToShow]);
                        andSearchContext.push(o);
                    }
                };
                var this_2 = this;
                for (var field in d2) {
                    _loop_2(field);
                }
                try {
                    //Handle date range selection. These fields are not in d2, because field.date is undefined.
                    for (var _f = __values(this.dateFields), _g = _f.next(); !_g.done; _g = _f.next()) {
                        var prop = _g.value;
                        /** @type {?} */
                        var o = {};
                        /** @type {?} */
                        var valueToShow = "";
                        o[prop] = {};
                        if (typeof d[prop] !== 'object') { //not defined
                            continue;
                        }
                        if (!d[prop]['from'] && !d[prop]['to']) { //not range
                            continue;
                        }
                        if (d[prop]['from']) {
                            o[prop]['from'] = this.deFormatDateField(d[prop]['from']);
                            valueToShow += this.formatDateField(o[prop]['from']).value;
                        }
                        valueToShow += " ~ ";
                        if (d[prop]['to']) {
                            o[prop]['to'] = this.deFormatDateField(d[prop]['to']);
                            valueToShow += this.formatDateField(o[prop]['to']).value;
                        }
                        this.searchMoreDetail.push([prop, valueToShow]);
                        andSearchContext.push(o);
                    }
                }
                catch (e_20_1) {
                    e_20 = { error: e_20_1 };
                }
                finally {
                    try {
                        if (_g && !_g.done && (_b = _f.return))
                            _b.call(_f);
                    }
                    finally {
                        if (e_20)
                            throw e_20.error;
                    }
                }
                /** @type {?} */
                var searchContext = { '$and': [{ '$or': orSearchContext }, { '$and': andSearchContext }] };
                /* searchContext ={'$and', [{'$or', []},{'$and', []}]}
                        */
                /** @type {?} */
                var context = this.getFromStorage("searchContext");
                if (context && context["$and"]) {
                    /** @type {?} */
                    var cachedOr = void 0;
                    /** @type {?} */
                    var cachedAnd = void 0;
                    try {
                        for (var _h = __values(context["$and"]), _j = _h.next(); !_j.done; _j = _h.next()) {
                            var sub = _j.value;
                            if ('$and' in sub)
                                cachedAnd = sub['$and'];
                            else if ('$or' in sub)
                                cachedOr = sub['$or'];
                        }
                    }
                    catch (e_21_1) {
                        e_21 = { error: e_21_1 };
                    }
                    finally {
                        try {
                            if (_j && !_j.done && (_c = _h.return))
                                _c.call(_h);
                        }
                        finally {
                            if (e_21)
                                throw e_21.error;
                        }
                    }
                    if (this.equalTwoSearchContextArrays(cachedOr, orSearchContext)
                        && this.equalTwoSearchContextArrays(cachedAnd, andSearchContext)) {
                        return;
                    }
                }
                if (orSearchContext.length == 0 && andSearchContext.length == 0)
                    searchContext = null;
                this.putToStorage("searchContext", searchContext);
                this.putToStorage("searchText", this.searchText);
                this.putToStorage("page", 1); //start from 1st page
                this.putToStorage("searchMoreDetail", this.searchMoreDetail);
                this.putToStorage("detail", this.detail);
            };
        /**
         * @protected
         * @return {?}
         */
        BaseComponent.prototype.searchList = /**
         * @protected
         * @return {?}
         */
            function () {
                this.processSearchContext();
                //update the URL
                this.router.navigate(['.', {}], { relativeTo: this.route }); //start from 1st page
                this.putToStorage("page", 1); //start from 1st page
                this.populateList();
            };
        /**
         * @protected
         * @return {?}
         */
        BaseComponent.prototype.loadUIFromCache = /**
         * @protected
         * @return {?}
         */
            function () {
                //Now let's reload the search condition to UI
                this.searchText = this.getFromStorage("searchText");
                this.searchMoreDetail = this.getFromStorage("searchMoreDetail");
                /** @type {?} */
                var detail = this.getFromStorage("detail");
                if (detail)
                    this.detail = detail;
            };
        /**
         * @protected
         * @return {?}
         */
        BaseComponent.prototype.populateList = /**
         * @protected
         * @return {?}
         */
            function () {
                var _this = this;
                //First let's handle page
                /** @type {?} */
                var new_page;
                /** @type {?} */
                var searchContext;
                /** @type {?} */
                var url_page = parseInt(this.route.snapshot.paramMap.get('page'));
                /** @type {?} */
                var cached_page = parseInt(this.getFromStorage("page"));
                if (cached_page) {
                    new_page = cached_page;
                    if (cached_page == 1)
                        this.router.navigate(['.', {}], { relativeTo: this.route, }); //update the url
                    else
                        this.router.navigate(['.', { page: cached_page }], { relativeTo: this.route, }); //update the url
                }
                else if (url_page)
                    new_page = url_page;
                else
                    new_page = 1;
                searchContext = this.getFromStorage("searchContext");
                this.loadUIFromCache();
                this.service.getList(new_page, this.per_page, searchContext).subscribe(function (result) {
                    _this.list = result.items.map(function (x) { return _this.formatDetail(x); });
                    _this.page = result.page;
                    _this.per_page = result.per_page;
                    _this.total_count = result.total_count;
                    _this.total_pages = result.total_pages;
                    _this.populatePages();
                    _this.checkedItem =
                        Array.apply(null, Array(_this.list.length)).map(Boolean.prototype.valueOf, false);
                    _this.checkAll = false;
                    if (_this.refreshing) {
                        _this.refreshing = false;
                        /** @type {?} */
                        var snackBarConfig = {
                            content: "List refreshed"
                        };
                        /** @type {?} */
                        var snackBar = new SnackBar(snackBarConfig);
                        snackBar.show();
                    }
                    _this.eventEmitter.emit(_this.list);
                }, this.onServiceError);
                return this.eventEmitter;
            };
        /*UI operations handlers*/
        /*UI operations handlers*/
        /**
         * @return {?}
         */
        BaseComponent.prototype.onRefresh = /*UI operations handlers*/
            /**
             * @return {?}
             */
            function () {
                if (this.view == ViewType.LIST) {
                    this.refreshing = true;
                    this.populateList();
                }
                else if (this.view == ViewType.DETAIL) {
                    this.refreshing = true;
                    if (!this.id)
                        this.id = this.route.snapshot.paramMap.get('id');
                    if (this.id)
                        this.populateDetail(this.id);
                    else
                        console.error("Routing error for detail view... no id...");
                }
            };
        /**
         * @return {?}
         */
        BaseComponent.prototype.onCheckAllChange = /**
         * @return {?}
         */
            function () {
                this.checkedItem =
                    Array.apply(null, Array(this.list.length)).
                        map(Boolean.prototype.valueOf, this.checkAll);
            };
        /**
         * @return {?}
         */
        BaseComponent.prototype.isItemSelected = /**
         * @return {?}
         */
            function () {
                return this.checkedItem.some(function (value) { return value; });
            };
        /**
         * @return {?}
         */
        BaseComponent.prototype.onDeleteSelected = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var deletedItem = [];
                this.checkedItem.forEach(function (value, index) {
                    if (value) {
                        deletedItem.push(_this.list[index]["_id"]);
                    }
                });
                /** @type {?} */
                var modalConfig = {
                    title: "Delete Confirmation",
                    content: "Are you sure you want to delete selected items from the system?",
                    //list of button text
                    buttons: ['Delete', 'Cancel'],
                    //list of button returns when clicked
                    returns: [true, false],
                    callBack: function (result) {
                        if (result) {
                            _this.service.deleteManyByIds(deletedItem).subscribe(function (result) {
                                /** @type {?} */
                                var snackBarConfig = {
                                    content: _this.ItemCamelName + " deleted"
                                };
                                /** @type {?} */
                                var snackBar = new SnackBar(snackBarConfig);
                                snackBar.show();
                                if (_this.view != ViewType.LIST)
                                    _this.router.navigate(['../../list'], { relativeTo: _this.route });
                                else {
                                    /** @type {?} */
                                    var len = _this.checkedItem.length;
                                    for (var i = 0; i < len; i++) {
                                        /** @type {?} */
                                        var idx = len - 1 - i;
                                        /** @type {?} */
                                        var value = _this.checkedItem[idx];
                                        if (value) {
                                            _this.list.splice(idx, 1);
                                            _this.checkedItem.splice(idx, 1);
                                            _this.total_count -= 1;
                                        }
                                    }
                                }
                            }, _this.onServiceError);
                        }
                    }
                };
                /** @type {?} */
                var modal = new Modal(modalConfig);
                modal.show();
            };
        /**
         * @param {?} id
         * @param {?} idx
         * @return {?}
         */
        BaseComponent.prototype.onDelete = /**
         * @param {?} id
         * @param {?} idx
         * @return {?}
         */
            function (id, idx) {
                var _this = this;
                /** @type {?} */
                var modalConfig = {
                    title: "Delete Confirmation",
                    content: "Are you sure you want to delete this " + this.itemCamelName + " from the system?",
                    //list of button text
                    buttons: ['Delete', 'Cancel'],
                    //list of button returns when clicked
                    returns: [true, false],
                    callBack: function (result) {
                        if (result) {
                            _this.service.deleteOne(id).subscribe(function (result) {
                                /** @type {?} */
                                var snackBarConfig = {
                                    content: _this.ItemCamelName + " deleted"
                                };
                                /** @type {?} */
                                var snackBar = new SnackBar(snackBarConfig);
                                snackBar.show();
                                if (_this.view != ViewType.LIST)
                                    _this.router.navigate(['../../list'], { relativeTo: _this.route });
                                else if (idx != null && _this.list) {
                                    _this.list.splice(idx, 1);
                                    _this.checkedItem.splice(idx, 1);
                                    _this.total_count -= 1;
                                }
                            }, _this.onServiceError);
                        }
                    }
                };
                /** @type {?} */
                var modal = new Modal(modalConfig);
                modal.show();
            };
        /**
         * @return {?}
         */
        BaseComponent.prototype.onSubmit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.extraFieldsLoad())
                    return; //error from other non ngModel fields;
                this._detail = this.deFormatDetail(this.detail);
                if (this.id) {
                    this.service.updateOne(this.id, this._detail).subscribe(function (result) {
                        /** @type {?} */
                        var snackBarConfig = {
                            content: _this.ItemCamelName + " updated."
                        };
                        /** @type {?} */
                        var snackBar = new SnackBar(snackBarConfig);
                        snackBar.show();
                        _this.router.navigate(['../../detail', _this.id], { relativeTo: _this.route });
                    }, this.onServiceError);
                }
                else {
                    this.service.createOne(this._detail).subscribe(function (result) {
                        /** @type {?} */
                        var action = _this.subEdit ? " added" : " created.";
                        /** @type {?} */
                        var snackBarConfig = {
                            content: _this.ItemCamelName + action
                        };
                        /** @type {?} */
                        var snackBar = new SnackBar(snackBarConfig);
                        snackBar.show();
                        _this.id = result["_id"];
                        _this._detail = result;
                        if (_this.subEdit) {
                            _this.done.emit(true);
                        }
                        else {
                            _this.router.navigate(['../detail', _this.id], { relativeTo: _this.route });
                        }
                    }, this.onServiceError);
                }
            };
        /**
         * @return {?}
         */
        BaseComponent.prototype.editCancel = /**
         * @return {?}
         */
            function () {
                if (this.subEdit) {
                    this.done.emit(false);
                }
                else {
                    this.goBack();
                }
            };
        /**
         * @param {?} fn
         * @param {?} detail
         * @param {?} event
         * @return {?}
         */
        BaseComponent.prototype.onDisplayRefClicked = /**
         * @param {?} fn
         * @param {?} detail
         * @param {?} event
         * @return {?}
         */
            function (fn, detail, event) {
                var e_22, _a;
                /** @type {?} */
                var ref = this.getRefFromField(fn);
                /** @type {?} */
                var d = detail;
                if (d && d['_id']) {
                    if (this.list) {
                        try {
                            for (var _b = __values(this.list), _c = _b.next(); !_c.done; _c = _b.next()) {
                                var item = _c.value;
                                if (item[fn] == d)
                                    this.clickedId = item['_id'];
                            }
                        }
                        catch (e_22_1) {
                            e_22 = { error: e_22_1 };
                        }
                        finally {
                            try {
                                if (_c && !_c.done && (_a = _b.return))
                                    _a.call(_b);
                            }
                            finally {
                                if (e_22)
                                    throw e_22.error;
                            }
                        }
                    }
                    this.router.navigate([ref, 'detail', d['_id']], { relativeTo: this.getParentActivatedRouter() });
                }
                if (event)
                    event.stopPropagation();
            };
        /**
         * @param {?} id
         * @return {?}
         */
        BaseComponent.prototype.onDetailLinkClicked = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                this.clickedId = id;
                this.router.navigate([this.itemName, 'detail', id], { relativeTo: this.getParentActivatedRouter() });
            };
        /**
         * @protected
         * @param {?} fn
         * @return {?}
         */
        BaseComponent.prototype.getRefFromField = /**
         * @protected
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                return this.referenceFieldsMap[fn];
            };
        /**
         * @param {?} field
         * @return {?}
         */
        BaseComponent.prototype.clearValueFromDetail = /**
         * @param {?} field
         * @return {?}
         */
            function (field) {
                if (!this.detail.hasOwnProperty(field))
                    return;
                if (typeof this.detail[field] == 'undefined')
                    return;
                if (typeof this.detail[field] == 'object') { //reference field or date
                    if (this.multiSelectionFields.includes(field)) {
                        this.detail[field] = this.clearFieldArrayMultiSelection(this.detail[field]);
                    }
                    else if (this.arrayFields.some(function (x) { return x[0] == field; })) {
                        this.detail[field] = this.clearFieldArray(this.detail[field]);
                    }
                    else if (this.mapFields.some(function (x) { return x[0] == field; })) {
                        this.detail[field] = this.clearFieldMap(this.detail[field]);
                    }
                    else if (this.dateFields.includes(field)) {
                        this.detail[field] = this.clearFieldDate(this.detail[field]);
                    }
                    else if (this.referenceFields.includes(field)) {
                        this.detail[field] = this.clearFieldReference(this.detail[field]);
                    }
                    //check if any info needs to change after clear certain values;
                    this.extraInfoPopulate();
                }
                else {
                    delete this.detail[field];
                }
            };
        /**
         * @param {?} field
         * @param {?} idx
         * @return {?}
         */
        BaseComponent.prototype.clearValueFromArrayField = /**
         * @param {?} field
         * @param {?} idx
         * @return {?}
         */
            function (field, idx) {
                if (this.detail[field]['selection']) {
                    this.detail[field]['selection'] = this.detail[field]['selection'].filter(function (x, i) { return i != idx; });
                    //check if any info needs to change after clear certain values;
                    this.extraInfoPopulate();
                }
            };
        /**
         * @param {?} field
         * @param {?} key
         * @return {?}
         */
        BaseComponent.prototype.clearValueFromMapField = /**
         * @param {?} field
         * @param {?} key
         * @return {?}
         */
            function (field, key) {
                if (this.detail[field]['selection']) {
                    delete this.detail[field]['selection'][key];
                    //check if any info needs to change after clear certain values;
                    this.extraInfoPopulate();
                }
            };
        /**
         * @param {?} field
         * @param {?} key
         * @return {?}
         */
        BaseComponent.prototype.clearValueFromMapKey = /**
         * @param {?} field
         * @param {?} key
         * @return {?}
         */
            function (field, key) {
                if (this.detail[field]['selection']) {
                    this.detail[field]['selection'][key] = undefined;
                    //check if any info needs to change after clear certain values;
                    this.extraInfoPopulate();
                }
            };
        /**
         * @param {?} field
         * @return {?}
         */
        BaseComponent.prototype.checkValueDefinedFromDetail = /**
         * @param {?} field
         * @return {?}
         */
            function (field) {
                /** @type {?} */
                var d = this.detail;
                if (!d.hasOwnProperty(field))
                    return false;
                if (typeof d[field] == 'undefined')
                    return false;
                if (typeof this.detail[field] == 'number'
                    || typeof d[field] == 'string'
                    || typeof d[field] == 'boolean')
                    return true;
                if (typeof d[field] == 'object') {
                    if (this.multiSelectionFields.includes(field)) {
                        return this.isDefinedFieldArrayMultiSelection(d[field]);
                    }
                    else if (this.arrayFields.some(function (x) { return x[0] == field; })) {
                        return this.isDefinedFieldArray(d[field]);
                    }
                    else if (this.mapFields.some(function (x) { return x[0] == field; })) {
                        return this.isDefinedFieldMap(d[field]);
                    }
                    else if (this.dateFields.includes(field)) {
                        return this.isDefinedFieldDate(d[field]);
                    }
                    else if (this.referenceFields.includes(field)) {
                        return this.isDefinedFieldReference(d[field]);
                    }
                }
                return false;
            };
        /**
         * @param {?} field
         * @return {?}
         */
        BaseComponent.prototype.clearValueFromDetailAndSearchList = /**
         * @param {?} field
         * @return {?}
         */
            function (field) {
                this.clearValueFromDetail(field);
                this.searchList();
            };
        /**
         * @param {?} fieldName
         * @return {?}
         */
        BaseComponent.prototype.onAddArrayItem = /**
         * @param {?} fieldName
         * @return {?}
         */
            function (fieldName) {
                if (this.arrayFields.some(function (x) { return x[0] == fieldName; })) {
                    if (this.detail[fieldName]['new']) { //where new added item is stored
                        //where new added item is stored
                        /** @type {?} */
                        var item = this.detail[fieldName]['new'];
                        this.detail[fieldName]['new'] = undefined; //clear it
                        this.detail[fieldName]['selection'].push(item);
                        /** @type {?} */
                        var values = [];
                        if (this.detail[fieldName]['value'])
                            values = this.detail[fieldName]['value'].split(' | ');
                        values.push(item); //display value
                        values = values.filter(function (x) { return !!x; });
                        this.detail[fieldName]['value'] = values.join(' | ');
                        //see if related info needs to change after the change of this value
                        this.extraInfoPopulate();
                    }
                }
            };
        /**
         * @param {?} fieldName
         * @return {?}
         */
        BaseComponent.prototype.onAddMapItem = /**
         * @param {?} fieldName
         * @return {?}
         */
            function (fieldName) {
                if (this.mapFields.some(function (x) { return x[0] == fieldName; })) {
                    if (this.detail[fieldName]['new']) { //where new added item is stored
                        //where new added item is stored
                        /** @type {?} */
                        var item = this.detail[fieldName]['new'];
                        this.detail[fieldName]['new'] = undefined; //clear it
                        this.detail[fieldName]['selection'][item] = undefined; //move to selection object
                        //TODO: this.detail[fieldName]['value'] change
                        //see if related info needs to change after the change of this value
                        this.extraInfoPopulate();
                    }
                }
            };
        /**
         * @param {?} fieldName
         * @return {?}
         */
        BaseComponent.prototype.onRefSelect = /**
         * @param {?} fieldName
         * @return {?}
         */
            function (fieldName) {
                var _this = this;
                if (!this.refSelectDirective) {
                    console.warn("No reference directive for field: ", fieldName);
                    return;
                }
                /** @type {?} */
                var viewContainerRef = this.refSelectDirective.viewContainerRef;
                viewContainerRef.clear();
                if (!this.selectComponents[fieldName]) {
                    console.warn("No reference defined for field: ", fieldName);
                    return;
                }
                /** @type {?} */
                var componentRef = this.selectComponents[fieldName]["componentRef"];
                if (!componentRef) {
                    /** @type {?} */
                    var comType = this.selectComponents[fieldName]["select-type"];
                    if (!comType)
                        console.warn("No component type found for reference field ", fieldName);
                    /** @type {?} */
                    var componentFactory = this.componentFactoryResolver.resolveComponentFactory(comType);
                    componentRef = viewContainerRef.createComponent(componentFactory); //create and insert in one call
                    this.selectComponents[fieldName]["componentRef"] = componentRef; //save it
                }
                else {
                    viewContainerRef.insert(componentRef.hostView);
                }
                /** @type {?} */
                var componentInstance = ( /** @type {?} */(componentRef.instance));
                if (this.detail[fieldName]) {
                    if (this.referenceFields.includes(fieldName)) {
                        componentInstance.inputData = this.detail[fieldName]['_id'];
                    }
                }
                componentInstance.setFocus();
                this.componentSubscription = componentInstance.done.subscribe(function (val) {
                    if (val) {
                        _this.componentSubscription.unsubscribe();
                        viewContainerRef.detach(); //only detach. not destroy
                    }
                    /** @type {?} */
                    var outputData = componentInstance.outputData;
                    if (outputData) {
                        switch (outputData.action) {
                            case "selected":
                                if (_this.arrayFields.some(function (x) { return x[0] == fieldName; })) {
                                    _this.detail[fieldName]['selection'].push(outputData.value);
                                    /** @type {?} */
                                    var values = [];
                                    if (_this.detail[fieldName]['value'])
                                        values = _this.detail[fieldName]['value'].split(' | ');
                                    values.push(outputData.value.value); //display value
                                    values = values.filter(function (x) { return !!x; });
                                    _this.detail[fieldName]['value'] = values.join(' | ');
                                }
                                else if (_this.referenceFields.includes(fieldName)) {
                                    _this.detail[fieldName] = outputData.value;
                                }
                                //trigger extraInfo populate, once reference changed.
                                _this.extraInfoPopulate();
                                break;
                            case "view":
                                _this.onRefShow(fieldName, "select", outputData.value); //value is _id
                                break;
                            default:
                                break;
                        }
                    }
                });
            };
        /**
         * @param {?} fieldName
         * @param {?} action
         * @param {?} id
         * @return {?}
         */
        BaseComponent.prototype.onRefShow = /**
         * @param {?} fieldName
         * @param {?} action
         * @param {?} id
         * @return {?}
         */
            function (fieldName, action, id) {
                var _this = this;
                if (!id && this.detail[fieldName])
                    id = this.detail[fieldName]['_id'];
                if (!id) {
                    console.error('Show reference but no id is given.');
                    return;
                }
                /** @type {?} */
                var viewContainerRef = this.refSelectDirective.viewContainerRef;
                viewContainerRef.clear();
                /** @type {?} */
                var detailType = action + "-detail-type";
                //eg: select-detail-type, pop-detail-type
                /** @type {?} */
                var comType = this.selectComponents[fieldName][detailType];
                if (!comType) {
                    console.error("No component type found for: %s", detailType);
                    return;
                }
                /** @type {?} */
                var componentFactory = this.componentFactoryResolver.resolveComponentFactory(comType);
                /** @type {?} */
                var componentRef = viewContainerRef.createComponent(componentFactory);
                //create and insert in one call
                /** @type {?} */
                var componentInstance = ( /** @type {?} */(componentRef.instance));
                componentInstance.inputData = id;
                componentInstance.setFocus();
                componentInstance.done.subscribe(function (val) {
                    if (val) {
                        componentInstance.done.unsubscribe();
                        viewContainerRef.clear();
                    }
                    /** @type {?} */
                    var outputData = componentInstance.outputData;
                    if (outputData) {
                        switch (outputData.action) {
                            case "selected":
                                if (_this.arrayFields.some(function (x) { return x[0] == fieldName; })) {
                                    _this.detail[fieldName]['selection'].push(outputData.value);
                                    /** @type {?} */
                                    var values = [];
                                    if (_this.detail[fieldName]['value'])
                                        values = _this.detail[fieldName]['value'].split(' | ');
                                    values.push(outputData.value.value); //display value
                                    values = values.filter(function (x) { return !!x; });
                                    _this.detail[fieldName]['value'] = values.join(' | ');
                                }
                                else if (_this.referenceFields.includes(fieldName)) {
                                    _this.detail[fieldName] = outputData.value;
                                }
                                //trigger extraInfo populate, once reference changed.
                                _this.extraInfoPopulate();
                                break;
                            case "back":
                                _this.onRefSelect(fieldName);
                                break;
                            default:
                                break;
                        }
                    }
                });
            };
        //ElementRef
        /**
         * @return {?}
         */
        BaseComponent.prototype.setFocus =
            //ElementRef
            /**
             * @return {?}
             */
            function () {
                if (this.focusEl)
                    this.focusEl.nativeElement.focus();
            };
        /**
         * @return {?}
         */
        BaseComponent.prototype.uiCloseModal = /**
         * @return {?}
         */
            function () {
                this.outputData = null;
                this.done.emit(true);
            };
        /**
         * @return {?}
         */
        BaseComponent.prototype.uiOnEscapeKey = /**
         * @return {?}
         */
            function () {
                this.uiCloseModal();
            };
        /**
         * @param {?} num
         * @return {?}
         */
        BaseComponent.prototype.selectItemSelected = /**
         * @param {?} num
         * @return {?}
         */
            function (num) {
                /** @type {?} */
                var detail = this.list[num];
                this.selectedId = detail['_id'];
                this.clickedId = detail['_id'];
                this.outputData = { action: "selected",
                    value: { "_id": detail["_id"], "value": this.stringify(detail) },
                    detail: detail
                };
                this.done.emit(true);
            };
        /**
         * @return {?}
         */
        BaseComponent.prototype.detailSelSelected = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var detail = this.detail;
                this.outputData = { action: "selected",
                    value: { "_id": detail["_id"], "value": this.stringify(detail) },
                    detail: detail
                };
                this.done.emit(true);
            };
        /**
         * @param {?} num
         * @return {?}
         */
        BaseComponent.prototype.selectViewDetail = /**
         * @param {?} num
         * @return {?}
         */
            function (num) {
                /** @type {?} */
                var detail = this.list[num];
                this.clickedId = detail['_id'];
                this.outputData = { action: "view",
                    value: detail["_id"]
                };
                this.done.emit(true);
            };
        /**
         * @return {?}
         */
        BaseComponent.prototype.detailSelBack = /**
         * @return {?}
         */
            function () {
                this.outputData = { action: "back",
                    value: null
                };
                this.done.emit(true);
            };
        /**
         * @return {?}
         */
        BaseComponent.prototype.toggleMoreSearch = /**
         * @return {?}
         */
            function () {
                this.moreSearchOpened = !this.moreSearchOpened;
            };
        /**
         * @return {?}
         */
        BaseComponent.prototype.onSearchTextClear = /**
         * @return {?}
         */
            function () {
                this.searchText = undefined;
                if (!this.moreSearchOpened)
                    this.searchList();
            };
        /**
         * @return {?}
         */
        BaseComponent.prototype.onSearchClear = /**
         * @return {?}
         */
            function () {
                this.searchText = undefined;
                /** @type {?} */
                var detail = {};
                this.detail = this.formatDetail(detail);
                this.searchList();
            };
        /**
         * @protected
         * @return {?}
         */
        BaseComponent.prototype.extraFieldsUnload = /**
         * @protected
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.textEditors) {
                    this.textEditors.forEach(function (editor) {
                        /** @type {?} */
                        var fieldName = editor.name;
                        /** @type {?} */
                        var validatorObj = _this.textEditorMap[fieldName];
                        if (!validatorObj)
                            return;
                        /** @type {?} */
                        var content = _this.detail[validatorObj.fieldName];
                        if (content)
                            editor.setContent(content);
                    });
                }
            };
        /**
         * @protected
         * @return {?}
         */
        BaseComponent.prototype.extraFieldsLoad = /**
         * @protected
         * @return {?}
         */
            function () {
                var e_23, _a;
                //to server
                /** @type {?} */
                var result = true;
                if (this.textEditors) {
                    /** @type {?} */
                    var array = this.textEditors.toArray();
                    try {
                        for (var array_1 = __values(array), array_1_1 = array_1.next(); !array_1_1.done; array_1_1 = array_1.next()) {
                            var editor = array_1_1.value;
                            /** @type {?} */
                            var fieldName = editor.name;
                            var _b = __read(editor.getContent(), 2), content = _b[0], text = _b[1];
                            /** @type {?} */
                            var validatorObj = this.textEditorMap[fieldName];
                            if (!validatorObj)
                                continue;
                            /** @type {?} */
                            var fieldState = validatorObj.fieldState;
                            fieldState.errors = {};
                            if (!content) {
                                if (validatorObj.required) {
                                    fieldState.errors.required = true;
                                    fieldState.valid = false;
                                    result = false;
                                }
                                continue;
                            }
                            if ('minlength' in validatorObj && text.length < validatorObj.minlength) {
                                fieldState.valid = false;
                                fieldState.errors.minlength = true;
                                result = false;
                                continue;
                            }
                            if ('maxlength' in validatorObj && text.length > validatorObj.maxlength) {
                                fieldState.valid = false;
                                fieldState.errors.maxlength = true;
                                result = false;
                                continue;
                            }
                            if ('validators' in validatorObj) {
                                /** @type {?} */
                                var error = validatorObj['validators'].validateValue(text);
                                if (error) {
                                    fieldState.valid = false;
                                    fieldState.errors = error;
                                    result = false;
                                    continue;
                                }
                            }
                            fieldState.valid = true;
                            fieldState.errors = undefined;
                            this.detail[validatorObj.fieldName] = content;
                        }
                    }
                    catch (e_23_1) {
                        e_23 = { error: e_23_1 };
                    }
                    finally {
                        try {
                            if (array_1_1 && !array_1_1.done && (_a = array_1.return))
                                _a.call(array_1);
                        }
                        finally {
                            if (e_23)
                                throw e_23.error;
                        }
                    }
                }
                return result;
            };
        /**
         * @param {?} editorName
         * @return {?}
         */
        BaseComponent.prototype.onEdtiorPreview = /**
         * @param {?} editorName
         * @return {?}
         */
            function (editorName) {
                if (this.textEditors)
                    this.textEditors.forEach(function (editor) {
                        if (editor.name == editorName)
                            editor.preview();
                    });
            };
        /*Parent router related*/
        /*Parent router related*/
        /**
         * @protected
         * @return {?}
         */
        BaseComponent.prototype.getParentRouteItem = /*Parent router related*/
            /**
             * @protected
             * @return {?}
             */
            function () {
                /** @type {?} */
                var routeSnapshot = this.route.snapshot;
                /** @type {?} */
                var parentItem;
                do {
                    if (routeSnapshot.data && routeSnapshot.data.mraLevel == 1) {
                        parentItem = routeSnapshot.data.item;
                        break;
                    }
                    routeSnapshot = routeSnapshot.parent;
                } while (routeSnapshot);
                return parentItem;
            };
        /**
         * @protected
         * @return {?}
         */
        BaseComponent.prototype.getParentRouteItemId = /**
         * @protected
         * @return {?}
         */
            function () {
                /** @type {?} */
                var routeSnapshot = this.route.snapshot;
                /** @type {?} */
                var parentItemId;
                do {
                    if (routeSnapshot.data && routeSnapshot.data.mraLevel == 1 && ('id' in routeSnapshot.params)) {
                        parentItemId = routeSnapshot.params.id;
                        break;
                    }
                    routeSnapshot = routeSnapshot.parent;
                } while (routeSnapshot);
                return parentItemId;
            };
        /**
         * @protected
         * @return {?}
         */
        BaseComponent.prototype.getParentRouteRefField = /**
         * @protected
         * @return {?}
         */
            function () {
                /** @type {?} */
                var mp = this.referenceFieldsMap;
                for (var prop in mp) {
                    if (mp.hasOwnProperty(prop) && mp[prop] == this.parentItem) {
                        return prop;
                    }
                }
            };
        /**
         * @protected
         * @return {?}
         */
        BaseComponent.prototype.getParentActivatedRouter = /**
         * @protected
         * @return {?}
         */
            function () {
                /** @type {?} */
                var route = this.route;
                do {
                    /** @type {?} */
                    var data = route.snapshot.data;
                    //all route inside the mra system will have mraLevel data item
                    if (!data.mraLevel)
                        return route;
                    route = route.parent;
                } while (route);
                return this.route.root;
            };
        /*Sub detail show flag*/
        /*Sub detail show flag*/
        /**
         * @param {?} i
         * @return {?}
         */
        BaseComponent.prototype.toggleCheckedItem = /*Sub detail show flag*/
            /**
             * @param {?} i
             * @return {?}
             */
            function (i) {
                this.checkedItem[i] = !this.checkedItem[i];
            };
        /**
         * @return {?}
         */
        BaseComponent.prototype.onAdd = /**
         * @return {?}
         */
            function () {
                this.isAdding = true;
            };
        /**
         * @return {?}
         */
        BaseComponent.prototype.toggleAdd = /**
         * @return {?}
         */
            function () {
                this.isAdding = !this.isAdding;
            };
        /**
         * @param {?} result
         * @return {?}
         */
        BaseComponent.prototype.onAddDone = /**
         * @param {?} result
         * @return {?}
         */
            function (result) {
                this.isAdding = false;
                if (result) { //add successful. Re-populate the current list
                    if (this.view == ViewType.LIST) {
                        this.populateList();
                    }
                }
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        BaseComponent.prototype.onDateSelectionToggle = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.detail[fn]['pop'] = !this.detail[fn]['pop'];
            };
        /**
         * @param {?} fn
         * @param {?} date
         * @return {?}
         */
        BaseComponent.prototype.onDateSelection = /**
         * @param {?} fn
         * @param {?} date
         * @return {?}
         */
            function (fn, date) {
                if (!this.detail[fn]['from'] && !this.detail[fn]['to']) {
                    this.detail[fn]['from'] = date;
                }
                else if (this.detail[fn]['from'] && !this.detail[fn]['to'] && date.after(this.detail[fn]['from'])) {
                    this.detail[fn]['to'] = date;
                    this.detail[fn]['pop'] = false; //Finished. hide the selection 
                }
                else {
                    this.detail[fn]['to'] = null;
                    this.detail[fn]['from'] = date;
                }
            };
        /**
         * @param {?} fn
         * @param {?} date
         * @return {?}
         */
        BaseComponent.prototype.isHovered = /**
         * @param {?} fn
         * @param {?} date
         * @return {?}
         */
            function (fn, date) {
                return this.detail[fn]['from'] && !this.detail[fn]['to'] && this.hoveredDate && date.after(this.detail[fn]['from']) && date.before(this.hoveredDate);
            };
        /**
         * @param {?} fn
         * @param {?} date
         * @return {?}
         */
        BaseComponent.prototype.isInside = /**
         * @param {?} fn
         * @param {?} date
         * @return {?}
         */
            function (fn, date) {
                return date.after(this.detail[fn]['from']) && date.before(this.detail[fn]['to']);
            };
        /**
         * @param {?} fn
         * @param {?} date
         * @return {?}
         */
        BaseComponent.prototype.isRange = /**
         * @param {?} fn
         * @param {?} date
         * @return {?}
         */
            function (fn, date) {
                return date.equals(this.detail[fn]['from']) || date.equals(this.detail[fn]['to']) || this.isInside(fn, date) || this.isHovered(fn, date);
            };
        return BaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MinNumber = /** @class */ (function () {
        function MinNumber() {
        }
        /**
         * @param {?} control
         * @return {?}
         */
        MinNumber.prototype.validate = /**
         * @param {?} control
         * @return {?}
         */
            function (control) {
                /** @type {?} */
                var num = control.value;
                /** @type {?} */
                var minnum = parseFloat(this.minnumber);
                if (isNaN(minnum))
                    return null; //only compare when max is a number
                //only compare when inputs are numbers
                if (typeof num == 'number' && num < minnum)
                    return { 'minnumber': "must be no less than " + minnum };
                return null;
            };
        MinNumber.decorators = [
            { type: core.Directive, args: [{
                        selector: '[minnumber]',
                        providers: [{ provide: forms.NG_VALIDATORS, useExisting: MinNumber, multi: true }]
                    },] }
        ];
        MinNumber.propDecorators = {
            minnumber: [{ type: core.Input, args: ['minnumber',] }]
        };
        return MinNumber;
    }());
    var MaxNumber = /** @class */ (function () {
        function MaxNumber() {
        }
        /**
         * @param {?} control
         * @return {?}
         */
        MaxNumber.prototype.validate = /**
         * @param {?} control
         * @return {?}
         */
            function (control) {
                /** @type {?} */
                var num = control.value;
                /** @type {?} */
                var maxnum = parseFloat(this.maxnumber);
                if (isNaN(maxnum))
                    return null; //only compare when max is a number
                //only compare when inputs are numbers
                if (typeof num == 'number' && num > maxnum)
                    return { 'maxnumber': "must be no greater than " + maxnum };
                return null;
            };
        MaxNumber.decorators = [
            { type: core.Directive, args: [{
                        selector: '[maxnumber]',
                        providers: [{ provide: forms.NG_VALIDATORS, useExisting: MaxNumber, multi: true }]
                    },] }
        ];
        MaxNumber.propDecorators = {
            maxnumber: [{ type: core.Input, args: ['maxnumber',] }]
        };
        return MaxNumber;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var fullscreenCss = "\n\n.editorhide {\n    display: none;\n}\n.editorfullscreen {\n    display: block;\n    position: fixed; \n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%; \n    overflow: auto; \n    z-index: 1050;\n    background-color: #fff;\n}\n\n.editor-action-buttons {\n    width: 100%;\n    float:right; \n    text-align: right;\n    margin-bottom: 1.25rem;\n    margin-top: 2.5rem;\n}\n.editor-action-buttons .btn {\n    display: inline-block;\n    margin-left: 2.5rem;\n}\n\n";
    /** @type {?} */
    var fullscreenHtml = "\n<div class=\"editorfullscreen\" id=\"mraeditorfullscreenDiv\">\n\n<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col\">\n      <div class=\"editor-action-buttons\">\n            <button id=\"mraeditorfullscreenClose\" class=\"btn btn-outline-success\">Close</button>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col\">\n        <div class=\"card\">\n            <div class=\"card-body\" id=\"mrafullscreenHtml\"></div>\n        </div>\n    </div>\n  </div>\n</div>\n\n</div>\n";
    /** @type {?} */
    var summerNoteConfig = {
        minHeight: 200,
        focus: false,
        airMode: false,
        //fontNames: ['Roboto', 'Calibri', 'Times New Roman', 'Arial'],
        //fontNamesIgnoreCheck: ['Roboto', 'Calibri'],
        dialogsInBody: true,
        dialogsFade: true,
        disableDragAndDrop: false,
        toolbar: [
            // [groupName, [list of button]]
            ['font', ['style', 'fontname', 'fontsize', 'color']],
            ['style', ['bold', 'italic', 'underline']],
            //['font', [ 'superscript', 'subscript','clear']],
            ['paragraph', ['ul', 'ol', 'paragraph']],
            ['insert', ['table', 'picture', 'link', 'video']],
            //['misc', ['undo', 'redo', 'print', 'help', 'fullscreen']]
            ['misc', ['undo', 'redo', 'fullscreen']]
        ],
    };
    var MraRichTextSelectDirective = /** @class */ (function () {
        function MraRichTextSelectDirective(el, render) {
            var _this = this;
            this.el = el;
            this.render = render;
            this.id = Date.now();
            //<!-- Create the editor container -->
            /** @type {?} */
            var html = "\n            <div id=\"richtext" + this.id + "\">\n            </div>\n            <div id=\"fullscreen" + this.id + "\"></div>'\n            ";
            if (!$('#mraeditorfullscreenCss').length) {
                $("<style type='text/css' id='mraeditorfullscreenCss'>" + fullscreenCss + "</style>").appendTo("head");
            }
            this.render.setProperty(this.el.nativeElement, 'innerHTML', html);
            setTimeout(function () {
                if (_this.content)
                    $("#richtext" + _this.id).html(_this.content);
                $("#richtext" + _this.id).summernote(summerNoteConfig);
            }, 1);
        }
        /**
         * @param {?} content
         * @return {?}
         */
        MraRichTextSelectDirective.prototype.setContent = /**
         * @param {?} content
         * @return {?}
         */
            function (content) {
                this.content = content;
                if (this.content) {
                    $("#richtext" + this.id).each(function (index) {
                        $(this).summernote('destroy');
                    });
                    $("#richtext" + this.id).html(this.content);
                    $("#richtext" + this.id).summernote(summerNoteConfig);
                }
            };
        /**
         * @return {?}
         */
        MraRichTextSelectDirective.prototype.getContent = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var html = $("#richtext" + this.id).summernote('code');
                /** @type {?} */
                var text = $("<div>" + html + "</div>").text();
                return [html, text];
            };
        /**
         * @return {?}
         */
        MraRichTextSelectDirective.prototype.preview = /**
         * @return {?}
         */
            function () {
                if (!$('#mraeditorfullscreenDiv').length) {
                    $("#fullscreen" + this.id).append(fullscreenHtml);
                }
                $("#mraeditorfullscreenClose").click(function () {
                    $('#mraeditorfullscreenDiv').remove();
                });
                var _a = __read(this.getContent(), 2), html = _a[0], text = _a[1];
                $("#mrafullscreenHtml").html(html);
            };
        MraRichTextSelectDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[mra-richtext-select]',
                    },] }
        ];
        /** @nocollapse */
        MraRichTextSelectDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.Renderer2 }
            ];
        };
        MraRichTextSelectDirective.propDecorators = {
            name: [{ type: core.Input, args: ['mra-richtext-select',] }]
        };
        return MraRichTextSelectDirective;
    }());
    var MraRichTextShowDirective = /** @class */ (function () {
        function MraRichTextShowDirective(el, render) {
            this.el = el;
            this.render = render;
        }
        /**
         * @param {?} content
         * @return {?}
         */
        MraRichTextShowDirective.prototype.setContent = /**
         * @param {?} content
         * @return {?}
         */
            function (content) {
                /** @type {?} */
                var id = Date.now();
                /** @type {?} */
                var displayHtml = "\n            <div class=\"card\">\n                <div class=\"card-body\" id=\"mraeditordisplay" + id + "\"></div>\n            </div>\n        ";
                this.render.setProperty(this.el.nativeElement, 'innerHTML', displayHtml);
                $("#mraeditordisplay" + id).html(content);
            };
        MraRichTextShowDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[mra-richtext-show]',
                    },] }
        ];
        /** @nocollapse */
        MraRichTextShowDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.Renderer2 }
            ];
        };
        MraRichTextShowDirective.propDecorators = {
            name: [{ type: core.Input, args: ['mra-richtext-show',] }]
        };
        return MraRichTextShowDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MraModule = /** @class */ (function () {
        function MraModule() {
        }
        MraModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [],
                        declarations: [
                            MinNumber,
                            MaxNumber,
                            MraRichTextSelectDirective,
                            MraRichTextShowDirective
                        ],
                        exports: [
                            MinNumber,
                            MaxNumber,
                            MraRichTextSelectDirective,
                            MraRichTextShowDirective
                        ],
                        providers: [
                            MraCommonService
                        ],
                    },] }
        ];
        return MraModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var dateStructureToString = function (date, fmt) {
        /** @type {?} */
        var d;
        /** @type {?} */
        var M;
        /** @type {?} */
        var yyyy;
        /** @type {?} */
        var value;
        if (!date)
            return ""; //undefined
        d = date.day;
        M = date.month;
        yyyy = date.year;
        if (typeof d !== 'number' || typeof M !== 'number' || typeof yyyy !== 'number')
            return ""; //undefined
        //undefined
        /** @type {?} */
        var yy = yyyy.toString().slice(2);
        /** @type {?} */
        var dd = d < 10 ? '0' + d : d.toString();
        /** @type {?} */
        var MM = M < 10 ? '0' + M : M.toString();
        value = fmt.replace(/yyyy/ig, yyyy.toString()).
            replace(/yy/ig, yy.toString()).
            replace(/MM/g, MM.toString()).
            replace(/dd/ig, dd.toString());
        return value;
    };
    /** @type {?} */
    var stringToDateStructure = function (value, fmt) {
        var e_1, _a;
        /** @type {?} */
        var date;
        /** @type {?} */
        var result = [];
        if (value.length != fmt.length)
            return date; //not ready
        //not ready
        /** @type {?} */
        var regexes = [{ re: /yyyy/i, len: 4 }, { re: /yy/i, len: 2 }, { re: /MM/, len: 2 }, { re: /dd/i, len: 2 }];
        try {
            for (var regexes_1 = __values(regexes), regexes_1_1 = regexes_1.next(); !regexes_1_1.done; regexes_1_1 = regexes_1.next()) {
                var reg = regexes_1_1.value;
                /** @type {?} */
                var p = fmt.search(reg.re);
                //find position in format
                /** @type {?} */
                var v = void 0;
                if (p != -1)
                    v = parseInt(value.slice(p, p + reg.len));
                else
                    v = NaN;
                result.push(v);
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (regexes_1_1 && !regexes_1_1.done && (_a = regexes_1.return))
                    _a.call(regexes_1);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        var _b = __read(result, 4), yyyy = _b[0], yy = _b[1], M = _b[2], d = _b[3];
        if ((isNaN(yyyy) && isNaN(yy)) || isNaN(M) || isNaN(d))
            return date; //undefined
        return { day: d, month: M, year: yyyy ? yyyy : 2000 + yy };
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var COMPONENT_CACHE_DURATION = 30 * 1000;
    var MraRouteReuseStrategy = /** @class */ (function () {
        function MraRouteReuseStrategy() {
            this.detachedRouteHandles = {}; //key is url, and value is at [handle, timestamp] format
            //key is url, and value is at [handle, timestamp] format
            this.pageYOffset = {};
            this.editItems = {};
            this.isAuth = false;
        }
        /* Start: The following should use the authService. But let's decouple dependency now */
        /* Start: The following should use the authService. But let's decouple dependency now */
        /**
         * @private
         * @return {?}
         */
        MraRouteReuseStrategy.prototype.isAuthorized = /* Start: The following should use the authService. But let's decouple dependency now */
            /**
             * @private
             * @return {?}
             */
            function () {
                //Refer to AuthenticationService for this function.
                /** @type {?} */
                var authRecord = JSON.parse(localStorage.getItem('mdds-auth-record'));
                if (authRecord && authRecord.accessToken) {
                    return true;
                }
                return false;
            };
        /**
         * @private
         * @return {?}
         */
        MraRouteReuseStrategy.prototype.getLogoutTime = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var authRecord = JSON.parse(localStorage.getItem('mdds-auth-record'));
                if (authRecord) {
                    return authRecord.logoutTs;
                }
                return 0;
            };
        /* End */
        /* End */
        /**
         * @private
         * @return {?}
         */
        MraRouteReuseStrategy.prototype.isLogoutReload = /* End */
            /**
             * @private
             * @return {?}
             */
            function () {
                if (this.isAuthorized()) {
                    return false;
                }
                /** @type {?} */
                var currentTs = Date.now();
                /** @type {?} */
                var logoutTs = this.getLogoutTime();
                if (currentTs - logoutTs < 1000) {
                    return true;
                }
                return false;
            };
        /**
         * @private
         * @return {?}
         */
        MraRouteReuseStrategy.prototype.checkAuthentication = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var auth = this.isAuth;
                this.isAuth = this.isAuthorized();
                if (this.isAuth != auth) {
                    // authentication status changed. Not attach;
                    this.detachedRouteHandles = {}; // empty the map
                }
            };
        /** Determines if this route (and its subtree) should be detached to be reused later */
        /**
         * Determines if this route (and its subtree) should be detached to be reused later
         * @param {?} route
         * @return {?}
         */
        MraRouteReuseStrategy.prototype.shouldDetach = /**
         * Determines if this route (and its subtree) should be detached to be reused later
         * @param {?} route
         * @return {?}
         */
            function (route) {
                if (route.routeConfig && route.routeConfig.path === 'list') {
                    //save current scroll position
                    /** @type {?} */
                    var key = route['_routerState'].url;
                    this.pageYOffset[key] = window.pageYOffset;
                }
                return route.routeConfig.path === 'list';
            };
        /** Stores the detached route */
        /**
         * Stores the detached route
         * @param {?} route
         * @param {?} handle
         * @return {?}
         */
        MraRouteReuseStrategy.prototype.store = /**
         * Stores the detached route
         * @param {?} route
         * @param {?} handle
         * @return {?}
         */
            function (route, handle) {
                /** @type {?} */
                var date = new Date();
                /** @type {?} */
                var key = route['_routerState'].url;
                if (!handle)
                    return;
                this.detachedRouteHandles[key] = [handle, date.getTime()];
            };
        /** Determines if this route (and its subtree) should be reattached */
        /**
         * Determines if this route (and its subtree) should be reattached
         * @param {?} route
         * @return {?}
         */
        MraRouteReuseStrategy.prototype.shouldAttach = /**
         * Determines if this route (and its subtree) should be reattached
         * @param {?} route
         * @return {?}
         */
            function (route) {
                this.checkAuthentication();
                /** @type {?} */
                var date = new Date();
                /** @type {?} */
                var key = route['_routerState'].url;
                if (route.routeConfig && (route.routeConfig.path === 'new' || route.routeConfig.path === 'edit/:id')) {
                    if (route.data && route.data.item) {
                        this.editItems[route.data.item] = true;
                    }
                }
                if (!route.routeConfig || route.routeConfig.path !== 'list') {
                    return false;
                }
                if (!this.detachedRouteHandles[key]) {
                    return false;
                }
                if (date.getTime() - this.detachedRouteHandles[key][1] > COMPONENT_CACHE_DURATION)
                    return false;
                return true;
            };
        /** Retrieves the previously stored route */
        /**
         * Retrieves the previously stored route
         * @param {?} route
         * @return {?}
         */
        MraRouteReuseStrategy.prototype.retrieve = /**
         * Retrieves the previously stored route
         * @param {?} route
         * @return {?}
         */
            function (route) {
                /** @type {?} */
                var date = new Date();
                /** @type {?} */
                var key = route['_routerState'].url;
                if (!route.routeConfig || route.routeConfig.path !== 'list')
                    return null;
                if (route.data.item && (route.data.item in this.editItems)) {
                    delete this.editItems[route.data.item];
                    delete this.detachedRouteHandles[key];
                    return null;
                }
                if (!this.detachedRouteHandles[key])
                    return null;
                if (date.getTime() - this.detachedRouteHandles[key][1] > COMPONENT_CACHE_DURATION)
                    return null;
                /** @type {?} */
                var yOffset = this.pageYOffset[key];
                setTimeout(function () {
                    console.log("==retrieve: ", key, yOffset);
                    window.scrollTo(0, yOffset);
                }, 20); //scroll to saved position
                return this.detachedRouteHandles[key][0];
            };
        /** Determines if a route should be reused */
        /**
         * Determines if a route should be reused
         * @param {?} future
         * @param {?} curr
         * @return {?}
         */
        MraRouteReuseStrategy.prototype.shouldReuseRoute = /**
         * Determines if a route should be reused
         * @param {?} future
         * @param {?} curr
         * @return {?}
         */
            function (future, curr) {
                // Below is the default implementation;
                if (this.isLogoutReload()) {
                    return false; // authentication status changed. Don't reuse.
                }
                return future.routeConfig === curr.routeConfig;
            };
        return MraRouteReuseStrategy;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.ViewType = ViewType;
    exports.BaseComponent = BaseComponent;
    exports.ServiceError = ServiceError;
    exports.BaseService = BaseService;
    exports.MraCommonService = MraCommonService;
    exports.MraModule = MraModule;
    exports.MaxNumber = MaxNumber;
    exports.MinNumber = MinNumber;
    exports.MraRichTextSelectDirective = MraRichTextSelectDirective;
    exports.MraRichTextShowDirective = MraRichTextShowDirective;
    exports.ErrorToastConfig = ErrorToastConfig;
    exports.ErrorToast = ErrorToast;
    exports.ModalConfig = ModalConfig;
    exports.Modal = Modal;
    exports.SnackBarConfig = SnackBarConfig;
    exports.SnackBar = SnackBar;
    exports.stringToDateStructure = stringToDateStructure;
    exports.dateStructureToString = dateStructureToString;
    exports.MraRouteReuseStrategy = MraRouteReuseStrategy;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=mean-rest-angular.umd.js.map