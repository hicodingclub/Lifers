/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ElementRef, Renderer2, Directive, Input } from '@angular/core';
/** @type {?} */
var fullscreenCss = "\n\n.editorhide {\n    display: none;\n}\n.editorfullscreen {\n    display: block;\n    position: fixed; \n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%; \n    overflow: auto; \n    z-index: 1050;\n    background-color: #fff;\n}\n\n.editor-action-buttons {\n    width: 100%;\n    float:right; \n    text-align: right;\n    margin-bottom: 1.25rem;\n    margin-top: 2.5rem;\n}\n.editor-action-buttons .btn {\n    display: inline-block;\n    margin-left: 2.5rem;\n}\n\n";
/** @type {?} */
var fullscreenHtml = "\n<div class=\"editorfullscreen\" id=\"mraeditorfullscreenDiv\">\n\n<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col\">\n      <div class=\"editor-action-buttons\">\n            <button id=\"mraeditorfullscreenClose\" class=\"btn btn-outline-success\">Close</button>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col\">\n        <div class=\"card\">\n            <div class=\"card-body\" id=\"mrafullscreenHtml\"></div>\n        </div>\n    </div>\n  </div>\n</div>\n\n</div>\n";
/** @type {?} */
var summerNoteConfig = {
    minHeight: 200,
    focus: false,
    airMode: false,
    //fontNames: ['Roboto', 'Calibri', 'Times New Roman', 'Arial'],
    //fontNamesIgnoreCheck: ['Roboto', 'Calibri'],
    dialogsInBody: true,
    dialogsFade: true,
    disableDragAndDrop: false,
    toolbar: [
        // [groupName, [list of button]]
        ['font', ['style', 'fontname', 'fontsize', 'color']],
        ['style', ['bold', 'italic', 'underline']],
        //['font', [ 'superscript', 'subscript','clear']],
        ['paragraph', ['ul', 'ol', 'paragraph']],
        ['insert', ['table', 'picture', 'link', 'video']],
        //['misc', ['undo', 'redo', 'print', 'help', 'fullscreen']]
        ['misc', ['undo', 'redo', 'fullscreen']]
    ],
};
var MraRichTextSelectDirective = /** @class */ (function () {
    function MraRichTextSelectDirective(el, render) {
        var _this = this;
        this.el = el;
        this.render = render;
        this.id = Date.now();
        //<!-- Create the editor container -->
        /** @type {?} */
        var html = "\n            <div id=\"richtext" + this.id + "\">\n            </div>\n            <div id=\"fullscreen" + this.id + "\"></div>'\n            ";
        if (!$('#mraeditorfullscreenCss').length) {
            $("<style type='text/css' id='mraeditorfullscreenCss'>" + fullscreenCss + "</style>").appendTo("head");
        }
        this.render.setProperty(this.el.nativeElement, 'innerHTML', html);
        setTimeout(function () {
            if (_this.content)
                $("#richtext" + _this.id).html(_this.content);
            $("#richtext" + _this.id).summernote(summerNoteConfig);
        }, 1);
    }
    /**
     * @param {?} content
     * @return {?}
     */
    MraRichTextSelectDirective.prototype.setContent = /**
     * @param {?} content
     * @return {?}
     */
    function (content) {
        this.content = content;
        if (this.content) {
            $("#richtext" + this.id).each(function (index) {
                $(this).summernote('destroy');
            });
            $("#richtext" + this.id).html(this.content);
            $("#richtext" + this.id).summernote(summerNoteConfig);
        }
    };
    /**
     * @return {?}
     */
    MraRichTextSelectDirective.prototype.getContent = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var html = $("#richtext" + this.id).summernote('code');
        /** @type {?} */
        var text = $("<div>" + html + "</div>").text();
        return [html, text];
    };
    /**
     * @return {?}
     */
    MraRichTextSelectDirective.prototype.preview = /**
     * @return {?}
     */
    function () {
        if (!$('#mraeditorfullscreenDiv').length) {
            $("#fullscreen" + this.id).append(fullscreenHtml);
        }
        $("#mraeditorfullscreenClose").click(function () {
            $('#mraeditorfullscreenDiv').remove();
        });
        var _a = tslib_1.__read(this.getContent(), 2), html = _a[0], text = _a[1];
        $("#mrafullscreenHtml").html(html);
    };
    MraRichTextSelectDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[mra-richtext-select]',
                },] }
    ];
    /** @nocollapse */
    MraRichTextSelectDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    MraRichTextSelectDirective.propDecorators = {
        name: [{ type: Input, args: ['mra-richtext-select',] }]
    };
    return MraRichTextSelectDirective;
}());
export { MraRichTextSelectDirective };
if (false) {
    /** @type {?} */
    MraRichTextSelectDirective.prototype.name;
    /** @type {?} */
    MraRichTextSelectDirective.prototype.content;
    /**
     * @type {?}
     * @private
     */
    MraRichTextSelectDirective.prototype.id;
    /**
     * @type {?}
     * @private
     */
    MraRichTextSelectDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    MraRichTextSelectDirective.prototype.render;
}
var MraRichTextShowDirective = /** @class */ (function () {
    function MraRichTextShowDirective(el, render) {
        this.el = el;
        this.render = render;
    }
    /**
     * @param {?} content
     * @return {?}
     */
    MraRichTextShowDirective.prototype.setContent = /**
     * @param {?} content
     * @return {?}
     */
    function (content) {
        /** @type {?} */
        var id = Date.now();
        /** @type {?} */
        var displayHtml = "\n            <div class=\"card\">\n                <div class=\"card-body\" id=\"mraeditordisplay" + id + "\"></div>\n            </div>\n        ";
        this.render.setProperty(this.el.nativeElement, 'innerHTML', displayHtml);
        $("#mraeditordisplay" + id).html(content);
    };
    MraRichTextShowDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[mra-richtext-show]',
                },] }
    ];
    /** @nocollapse */
    MraRichTextShowDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    MraRichTextShowDirective.propDecorators = {
        name: [{ type: Input, args: ['mra-richtext-show',] }]
    };
    return MraRichTextShowDirective;
}());
export { MraRichTextShowDirective };
if (false) {
    /** @type {?} */
    MraRichTextShowDirective.prototype.name;
    /**
     * @type {?}
     * @private
     */
    MraRichTextShowDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    MraRichTextShowDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,