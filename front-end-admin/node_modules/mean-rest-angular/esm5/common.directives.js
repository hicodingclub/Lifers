/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, Directive } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
var MinNumber = /** @class */ (function () {
    function MinNumber() {
    }
    /**
     * @param {?} control
     * @return {?}
     */
    MinNumber.prototype.validate = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var num = control.value;
        /** @type {?} */
        var minnum = parseFloat(this.minnumber);
        if (isNaN(minnum))
            return null; //only compare when max is a number
        //only compare when inputs are numbers
        if (typeof num == 'number' && num < minnum)
            return { 'minnumber': "must be no less than " + minnum };
        return null;
    };
    MinNumber.decorators = [
        { type: Directive, args: [{
                    selector: '[minnumber]',
                    providers: [{ provide: NG_VALIDATORS, useExisting: MinNumber, multi: true }]
                },] }
    ];
    MinNumber.propDecorators = {
        minnumber: [{ type: Input, args: ['minnumber',] }]
    };
    return MinNumber;
}());
export { MinNumber };
if (false) {
    /** @type {?} */
    MinNumber.prototype.minnumber;
}
var MaxNumber = /** @class */ (function () {
    function MaxNumber() {
    }
    /**
     * @param {?} control
     * @return {?}
     */
    MaxNumber.prototype.validate = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var num = control.value;
        /** @type {?} */
        var maxnum = parseFloat(this.maxnumber);
        if (isNaN(maxnum))
            return null; //only compare when max is a number
        //only compare when inputs are numbers
        if (typeof num == 'number' && num > maxnum)
            return { 'maxnumber': "must be no greater than " + maxnum };
        return null;
    };
    MaxNumber.decorators = [
        { type: Directive, args: [{
                    selector: '[maxnumber]',
                    providers: [{ provide: NG_VALIDATORS, useExisting: MaxNumber, multi: true }]
                },] }
    ];
    MaxNumber.propDecorators = {
        maxnumber: [{ type: Input, args: ['maxnumber',] }]
    };
    return MaxNumber;
}());
export { MaxNumber };
if (false) {
    /** @type {?} */
    MaxNumber.prototype.maxnumber;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmRpcmVjdGl2ZXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9tZWFuLXJlc3QtYW5ndWxhci8iLCJzb3VyY2VzIjpbImNvbW1vbi5kaXJlY3RpdmVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUUsYUFBYSxFQUFnRCxNQUFNLGdCQUFnQixDQUFDO0FBRTdGO0lBQUE7SUFnQkEsQ0FBQzs7Ozs7SUFUQyw0QkFBUTs7OztJQUFSLFVBQVMsT0FBd0I7O1lBQzNCLEdBQUcsR0FBRyxPQUFPLENBQUMsS0FBSzs7WUFDbkIsTUFBTSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3ZDLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQztZQUFFLE9BQU8sSUFBSSxDQUFDLENBQUssbUNBQW1DO1FBQ3ZFLHNDQUFzQztRQUN0QyxJQUFJLE9BQU8sR0FBRyxJQUFJLFFBQVEsSUFBSSxHQUFHLEdBQUcsTUFBTTtZQUN0QyxPQUFPLEVBQUUsV0FBVyxFQUFFLHVCQUF1QixHQUFHLE1BQU0sRUFBRSxDQUFDO1FBQzdELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7Z0JBZkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxhQUFhO29CQUN2QixTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxhQUFhLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFDLENBQUM7aUJBQzNFOzs7NEJBRUUsS0FBSyxTQUFDLFdBQVc7O0lBV3BCLGdCQUFDO0NBQUEsQUFoQkQsSUFnQkM7U0FaWSxTQUFTOzs7SUFDcEIsOEJBQXNDOztBQWF4QztJQUFBO0lBZ0JBLENBQUM7Ozs7O0lBVEMsNEJBQVE7Ozs7SUFBUixVQUFTLE9BQXdCOztZQUMzQixHQUFHLEdBQUcsT0FBTyxDQUFDLEtBQUs7O1lBQ25CLE1BQU0sR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN2QyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUM7WUFBRSxPQUFPLElBQUksQ0FBQyxDQUFLLG1DQUFtQztRQUN2RSxzQ0FBc0M7UUFDdEMsSUFBSSxPQUFPLEdBQUcsSUFBSSxRQUFRLElBQUksR0FBRyxHQUFHLE1BQU07WUFDdEMsT0FBTyxFQUFFLFdBQVcsRUFBRSwwQkFBMEIsR0FBRyxNQUFNLEVBQUUsQ0FBQztRQUNoRSxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7O2dCQWZGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsYUFBYTtvQkFDdkIsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBQyxDQUFDO2lCQUMzRTs7OzRCQUVFLEtBQUssU0FBQyxXQUFXOztJQVdwQixnQkFBQztDQUFBLEFBaEJELElBZ0JDO1NBWlksU0FBUzs7O0lBQ3BCLDhCQUFzQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0LCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5HX1ZBTElEQVRPUlMsIFZhbGlkYXRvciwgVmFsaWRhdGlvbkVycm9ycywgQWJzdHJhY3RDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbWlubnVtYmVyXScsXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBOR19WQUxJREFUT1JTLCB1c2VFeGlzdGluZzogTWluTnVtYmVyLCBtdWx0aTogdHJ1ZX1dXG59KVxuZXhwb3J0IGNsYXNzIE1pbk51bWJlciBpbXBsZW1lbnRzIFZhbGlkYXRvciB7XG4gIEBJbnB1dCgnbWlubnVtYmVyJykgbWlubnVtYmVyOiBzdHJpbmc7XG4gICAgXG4gIHZhbGlkYXRlKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsIHtcbiAgICBsZXQgbnVtID0gY29udHJvbC52YWx1ZTtcbiAgICBsZXQgbWlubnVtID0gcGFyc2VGbG9hdCh0aGlzLm1pbm51bWJlcik7XG4gICAgaWYgKGlzTmFOKG1pbm51bSkpIHJldHVybiBudWxsOyAgICAgLy9vbmx5IGNvbXBhcmUgd2hlbiBtYXggaXMgYSBudW1iZXJcbiAgICAvL29ubHkgY29tcGFyZSB3aGVuIGlucHV0cyBhcmUgbnVtYmVyc1xuICAgIGlmICh0eXBlb2YgbnVtID09ICdudW1iZXInICYmIG51bSA8IG1pbm51bSlcbiAgICAgICAgcmV0dXJuIHsgJ21pbm51bWJlcic6IFwibXVzdCBiZSBubyBsZXNzIHRoYW4gXCIgKyBtaW5udW0gfTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbWF4bnVtYmVyXScsXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBOR19WQUxJREFUT1JTLCB1c2VFeGlzdGluZzogTWF4TnVtYmVyLCBtdWx0aTogdHJ1ZX1dXG59KVxuZXhwb3J0IGNsYXNzIE1heE51bWJlciBpbXBsZW1lbnRzIFZhbGlkYXRvciB7XG4gIEBJbnB1dCgnbWF4bnVtYmVyJykgbWF4bnVtYmVyOiBzdHJpbmc7XG4gICAgXG4gIHZhbGlkYXRlKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsIHtcbiAgICBsZXQgbnVtID0gY29udHJvbC52YWx1ZTtcbiAgICBsZXQgbWF4bnVtID0gcGFyc2VGbG9hdCh0aGlzLm1heG51bWJlcik7XG4gICAgaWYgKGlzTmFOKG1heG51bSkpIHJldHVybiBudWxsOyAgICAgLy9vbmx5IGNvbXBhcmUgd2hlbiBtYXggaXMgYSBudW1iZXJcbiAgICAvL29ubHkgY29tcGFyZSB3aGVuIGlucHV0cyBhcmUgbnVtYmVyc1xuICAgIGlmICh0eXBlb2YgbnVtID09ICdudW1iZXInICYmIG51bSA+IG1heG51bSlcbiAgICAgICAgcmV0dXJuIHsgJ21heG51bWJlcic6IFwibXVzdCBiZSBubyBncmVhdGVyIHRoYW4gXCIgKyBtYXhudW0gfTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKiBUaGlzIGlzIGhvdyB5b3UgY2FuIGdldCB0aGUgbmFtZSBvZiB0aGUgY29udHJvbCAtIGZyb20gd2hpY2ggeW91IGNhbiBtYXBwaW5nIHRvIHRoZSBtb2RlbCBuYW1lXG4gICAgbGV0IGNvbnRyb2xzID0gY29udHJvbC5wYXJlbnQuY29udHJvbHM7XG4gICAgbGV0IHdob2FtaTtcbiAgICBmb3IoIGxldCBwcm9wIGluIGNvbnRyb2xzICkge1xuICAgICAgICBpZiggY29udHJvbHNbIHByb3AgXSA9PSBjb250cm9sKSB7XG4gICAgICAgICAgICB3aG9hbWkgPSBwcm9wO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4qL1xuIl19