/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, Directive } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
export class MinNumber {
    /**
     * @param {?} control
     * @return {?}
     */
    validate(control) {
        /** @type {?} */
        let num = control.value;
        /** @type {?} */
        let minnum = parseFloat(this.minnumber);
        if (isNaN(minnum))
            return null; //only compare when max is a number
        //only compare when inputs are numbers
        if (typeof num == 'number' && num < minnum)
            return { 'minnumber': "must be no less than " + minnum };
        return null;
    }
}
MinNumber.decorators = [
    { type: Directive, args: [{
                selector: '[minnumber]',
                providers: [{ provide: NG_VALIDATORS, useExisting: MinNumber, multi: true }]
            },] }
];
MinNumber.propDecorators = {
    minnumber: [{ type: Input, args: ['minnumber',] }]
};
if (false) {
    /** @type {?} */
    MinNumber.prototype.minnumber;
}
export class MaxNumber {
    /**
     * @param {?} control
     * @return {?}
     */
    validate(control) {
        /** @type {?} */
        let num = control.value;
        /** @type {?} */
        let maxnum = parseFloat(this.maxnumber);
        if (isNaN(maxnum))
            return null; //only compare when max is a number
        //only compare when inputs are numbers
        if (typeof num == 'number' && num > maxnum)
            return { 'maxnumber': "must be no greater than " + maxnum };
        return null;
    }
}
MaxNumber.decorators = [
    { type: Directive, args: [{
                selector: '[maxnumber]',
                providers: [{ provide: NG_VALIDATORS, useExisting: MaxNumber, multi: true }]
            },] }
];
MaxNumber.propDecorators = {
    maxnumber: [{ type: Input, args: ['maxnumber',] }]
};
if (false) {
    /** @type {?} */
    MaxNumber.prototype.maxnumber;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmRpcmVjdGl2ZXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9tZWFuLXJlc3QtYW5ndWxhci8iLCJzb3VyY2VzIjpbImNvbW1vbi5kaXJlY3RpdmVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUUsYUFBYSxFQUFnRCxNQUFNLGdCQUFnQixDQUFDO0FBTTdGLE1BQU0sT0FBTyxTQUFTOzs7OztJQUdwQixRQUFRLENBQUMsT0FBd0I7O1lBQzNCLEdBQUcsR0FBRyxPQUFPLENBQUMsS0FBSzs7WUFDbkIsTUFBTSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3ZDLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQztZQUFFLE9BQU8sSUFBSSxDQUFDLENBQUssbUNBQW1DO1FBQ3ZFLHNDQUFzQztRQUN0QyxJQUFJLE9BQU8sR0FBRyxJQUFJLFFBQVEsSUFBSSxHQUFHLEdBQUcsTUFBTTtZQUN0QyxPQUFPLEVBQUUsV0FBVyxFQUFFLHVCQUF1QixHQUFHLE1BQU0sRUFBRSxDQUFDO1FBQzdELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7O1lBZkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxhQUFhO2dCQUN2QixTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxhQUFhLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFDLENBQUM7YUFDM0U7Ozt3QkFFRSxLQUFLLFNBQUMsV0FBVzs7OztJQUFsQiw4QkFBc0M7O0FBaUJ4QyxNQUFNLE9BQU8sU0FBUzs7Ozs7SUFHcEIsUUFBUSxDQUFDLE9BQXdCOztZQUMzQixHQUFHLEdBQUcsT0FBTyxDQUFDLEtBQUs7O1lBQ25CLE1BQU0sR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN2QyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUM7WUFBRSxPQUFPLElBQUksQ0FBQyxDQUFLLG1DQUFtQztRQUN2RSxzQ0FBc0M7UUFDdEMsSUFBSSxPQUFPLEdBQUcsSUFBSSxRQUFRLElBQUksR0FBRyxHQUFHLE1BQU07WUFDdEMsT0FBTyxFQUFFLFdBQVcsRUFBRSwwQkFBMEIsR0FBRyxNQUFNLEVBQUUsQ0FBQztRQUNoRSxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7OztZQWZGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsYUFBYTtnQkFDdkIsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBQyxDQUFDO2FBQzNFOzs7d0JBRUUsS0FBSyxTQUFDLFdBQVc7Ozs7SUFBbEIsOEJBQXNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTkdfVkFMSURBVE9SUywgVmFsaWRhdG9yLCBWYWxpZGF0aW9uRXJyb3JzLCBBYnN0cmFjdENvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1ttaW5udW1iZXJdJyxcbiAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IE5HX1ZBTElEQVRPUlMsIHVzZUV4aXN0aW5nOiBNaW5OdW1iZXIsIG11bHRpOiB0cnVlfV1cbn0pXG5leHBvcnQgY2xhc3MgTWluTnVtYmVyIGltcGxlbWVudHMgVmFsaWRhdG9yIHtcbiAgQElucHV0KCdtaW5udW1iZXInKSBtaW5udW1iZXI6IHN0cmluZztcbiAgICBcbiAgdmFsaWRhdGUoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwge1xuICAgIGxldCBudW0gPSBjb250cm9sLnZhbHVlO1xuICAgIGxldCBtaW5udW0gPSBwYXJzZUZsb2F0KHRoaXMubWlubnVtYmVyKTtcbiAgICBpZiAoaXNOYU4obWlubnVtKSkgcmV0dXJuIG51bGw7ICAgICAvL29ubHkgY29tcGFyZSB3aGVuIG1heCBpcyBhIG51bWJlclxuICAgIC8vb25seSBjb21wYXJlIHdoZW4gaW5wdXRzIGFyZSBudW1iZXJzXG4gICAgaWYgKHR5cGVvZiBudW0gPT0gJ251bWJlcicgJiYgbnVtIDwgbWlubnVtKVxuICAgICAgICByZXR1cm4geyAnbWlubnVtYmVyJzogXCJtdXN0IGJlIG5vIGxlc3MgdGhhbiBcIiArIG1pbm51bSB9O1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1ttYXhudW1iZXJdJyxcbiAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IE5HX1ZBTElEQVRPUlMsIHVzZUV4aXN0aW5nOiBNYXhOdW1iZXIsIG11bHRpOiB0cnVlfV1cbn0pXG5leHBvcnQgY2xhc3MgTWF4TnVtYmVyIGltcGxlbWVudHMgVmFsaWRhdG9yIHtcbiAgQElucHV0KCdtYXhudW1iZXInKSBtYXhudW1iZXI6IHN0cmluZztcbiAgICBcbiAgdmFsaWRhdGUoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwge1xuICAgIGxldCBudW0gPSBjb250cm9sLnZhbHVlO1xuICAgIGxldCBtYXhudW0gPSBwYXJzZUZsb2F0KHRoaXMubWF4bnVtYmVyKTtcbiAgICBpZiAoaXNOYU4obWF4bnVtKSkgcmV0dXJuIG51bGw7ICAgICAvL29ubHkgY29tcGFyZSB3aGVuIG1heCBpcyBhIG51bWJlclxuICAgIC8vb25seSBjb21wYXJlIHdoZW4gaW5wdXRzIGFyZSBudW1iZXJzXG4gICAgaWYgKHR5cGVvZiBudW0gPT0gJ251bWJlcicgJiYgbnVtID4gbWF4bnVtKVxuICAgICAgICByZXR1cm4geyAnbWF4bnVtYmVyJzogXCJtdXN0IGJlIG5vIGdyZWF0ZXIgdGhhbiBcIiArIG1heG51bSB9O1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8qIFRoaXMgaXMgaG93IHlvdSBjYW4gZ2V0IHRoZSBuYW1lIG9mIHRoZSBjb250cm9sIC0gZnJvbSB3aGljaCB5b3UgY2FuIG1hcHBpbmcgdG8gdGhlIG1vZGVsIG5hbWVcbiAgICBsZXQgY29udHJvbHMgPSBjb250cm9sLnBhcmVudC5jb250cm9scztcbiAgICBsZXQgd2hvYW1pO1xuICAgIGZvciggbGV0IHByb3AgaW4gY29udHJvbHMgKSB7XG4gICAgICAgIGlmKCBjb250cm9sc1sgcHJvcCBdID09IGNvbnRyb2wpIHtcbiAgICAgICAgICAgIHdob2FtaSA9IHByb3A7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiovXG4iXX0=