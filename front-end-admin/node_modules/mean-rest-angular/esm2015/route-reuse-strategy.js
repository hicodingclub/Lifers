/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const COMPONENT_CACHE_DURATION = 30 * 1000;
export class MraRouteReuseStrategy {
    constructor() {
        this.detachedRouteHandles = {}; //key is url, and value is at [handle, timestamp] format
        //key is url, and value is at [handle, timestamp] format
        this.pageYOffset = {};
        this.editItems = {};
        this.isAuth = false;
    }
    /* Start: The following should use the authService. But let's decouple dependency now */
    /**
     * @private
     * @return {?}
     */
    isAuthorized() {
        //Refer to AuthenticationService for this function.
        /** @type {?} */
        const authRecord = JSON.parse(localStorage.getItem('mdds-auth-record'));
        if (authRecord && authRecord.accessToken) {
            return true;
        }
        return false;
    }
    /**
     * @private
     * @return {?}
     */
    getLogoutTime() {
        /** @type {?} */
        const authRecord = JSON.parse(localStorage.getItem('mdds-auth-record'));
        if (authRecord) {
            return authRecord.logoutTs;
        }
        return 0;
    }
    /* End */
    /**
     * @private
     * @return {?}
     */
    isLogoutReload() {
        if (this.isAuthorized()) {
            return false;
        }
        /** @type {?} */
        const currentTs = Date.now();
        /** @type {?} */
        const logoutTs = this.getLogoutTime();
        if (currentTs - logoutTs < 1000) {
            return true;
        }
        return false;
    }
    /**
     * @private
     * @return {?}
     */
    checkAuthentication() {
        /** @type {?} */
        const auth = this.isAuth;
        this.isAuth = this.isAuthorized();
        if (this.isAuth != auth) {
            // authentication status changed. Not attach;
            this.detachedRouteHandles = {}; // empty the map
        }
    }
    /**
     * Determines if this route (and its subtree) should be detached to be reused later
     * @param {?} route
     * @return {?}
     */
    shouldDetach(route) {
        if (route.routeConfig && route.routeConfig.path === 'list') {
            //save current scroll position
            /** @type {?} */
            let key = route['_routerState'].url;
            this.pageYOffset[key] = window.pageYOffset;
        }
        return route.routeConfig.path === 'list';
    }
    /**
     * Stores the detached route
     * @param {?} route
     * @param {?} handle
     * @return {?}
     */
    store(route, handle) {
        /** @type {?} */
        const date = new Date();
        /** @type {?} */
        const key = route['_routerState'].url;
        if (!handle)
            return;
        this.detachedRouteHandles[key] = [handle, date.getTime()];
    }
    /**
     * Determines if this route (and its subtree) should be reattached
     * @param {?} route
     * @return {?}
     */
    shouldAttach(route) {
        this.checkAuthentication();
        /** @type {?} */
        let date = new Date();
        /** @type {?} */
        let key = route['_routerState'].url;
        if (route.routeConfig && (route.routeConfig.path === 'new' || route.routeConfig.path === 'edit/:id')) {
            if (route.data && route.data.item) {
                this.editItems[route.data.item] = true;
            }
        }
        if (!route.routeConfig || route.routeConfig.path !== 'list') {
            return false;
        }
        if (!this.detachedRouteHandles[key]) {
            return false;
        }
        if (date.getTime() - this.detachedRouteHandles[key][1] > COMPONENT_CACHE_DURATION)
            return false;
        return true;
    }
    /**
     * Retrieves the previously stored route
     * @param {?} route
     * @return {?}
     */
    retrieve(route) {
        /** @type {?} */
        let date = new Date();
        /** @type {?} */
        let key = route['_routerState'].url;
        if (!route.routeConfig || route.routeConfig.path !== 'list')
            return null;
        if (route.data.item && (route.data.item in this.editItems)) {
            delete this.editItems[route.data.item];
            delete this.detachedRouteHandles[key];
            return null;
        }
        if (!this.detachedRouteHandles[key])
            return null;
        if (date.getTime() - this.detachedRouteHandles[key][1] > COMPONENT_CACHE_DURATION)
            return null;
        /** @type {?} */
        let yOffset = this.pageYOffset[key];
        setTimeout(function () {
            console.log("==retrieve: ", key, yOffset);
            window.scrollTo(0, yOffset);
        }, 20); //scroll to saved position
        return this.detachedRouteHandles[key][0];
    }
    /**
     * Determines if a route should be reused
     * @param {?} future
     * @param {?} curr
     * @return {?}
     */
    shouldReuseRoute(future, curr) {
        // Below is the default implementation;
        if (this.isLogoutReload()) {
            return false; // authentication status changed. Don't reuse.
        }
        return future.routeConfig === curr.routeConfig;
    }
}
if (false) {
    /** @type {?} */
    MraRouteReuseStrategy.prototype.detachedRouteHandles;
    /** @type {?} */
    MraRouteReuseStrategy.prototype.pageYOffset;
    /** @type {?} */
    MraRouteReuseStrategy.prototype.editItems;
    /** @type {?} */
    MraRouteReuseStrategy.prototype.isAuth;
}
//# sourceMappingURL=data:application/json;base64,