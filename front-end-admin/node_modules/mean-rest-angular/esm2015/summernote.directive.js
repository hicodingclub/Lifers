/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, Renderer2, Directive, Input } from '@angular/core';
/** @type {?} */
var fullscreenCss = `

.editorhide {
    display: none;
}
.editorfullscreen {
    display: block;
    position: fixed; 
    left: 0;
    top: 0;
    width: 100%;
    height: 100%; 
    overflow: auto; 
    z-index: 1050;
    background-color: #fff;
}

.editor-action-buttons {
    width: 100%;
    float:right; 
    text-align: right;
    margin-bottom: 1.25rem;
    margin-top: 2.5rem;
}
.editor-action-buttons .btn {
    display: inline-block;
    margin-left: 2.5rem;
}

`;
/** @type {?} */
var fullscreenHtml = `
<div class="editorfullscreen" id="mraeditorfullscreenDiv">

<div class="container">
  <div class="row">
    <div class="col">
      <div class="editor-action-buttons">
            <button id="mraeditorfullscreenClose" class="btn btn-outline-success">Close</button>
      </div>
    </div>
  </div>

  <div class="row">
    <div class="col">
        <div class="card">
            <div class="card-body" id="mrafullscreenHtml"></div>
        </div>
    </div>
  </div>
</div>

</div>
`;
/** @type {?} */
var summerNoteConfig = {
    minHeight: 200,
    focus: false,
    airMode: false,
    //fontNames: ['Roboto', 'Calibri', 'Times New Roman', 'Arial'],
    //fontNamesIgnoreCheck: ['Roboto', 'Calibri'],
    dialogsInBody: true,
    dialogsFade: true,
    disableDragAndDrop: false,
    toolbar: [
        // [groupName, [list of button]]
        ['font', ['style', 'fontname', 'fontsize', 'color']],
        ['style', ['bold', 'italic', 'underline']],
        //['font', [ 'superscript', 'subscript','clear']],
        ['paragraph', ['ul', 'ol', 'paragraph']],
        ['insert', ['table', 'picture', 'link', 'video']],
        //['misc', ['undo', 'redo', 'print', 'help', 'fullscreen']]
        ['misc', ['undo', 'redo', 'fullscreen']]
    ],
};
export class MraRichTextSelectDirective {
    /**
     * @param {?} el
     * @param {?} render
     */
    constructor(el, render) {
        this.el = el;
        this.render = render;
        this.id = Date.now();
        //<!-- Create the editor container -->
        /** @type {?} */
        let html = `
            <div id="richtext` + this.id + `">
            </div>
            <div id="fullscreen` + this.id + `"></div>'
            `;
        if (!$('#mraeditorfullscreenCss').length) {
            $("<style type='text/css' id='mraeditorfullscreenCss'>" + fullscreenCss + "</style>").appendTo("head");
        }
        this.render.setProperty(this.el.nativeElement, 'innerHTML', html);
        setTimeout(() => {
            if (this.content)
                $("#richtext" + this.id).html(this.content);
            $("#richtext" + this.id).summernote(summerNoteConfig);
        }, 1);
    }
    /**
     * @param {?} content
     * @return {?}
     */
    setContent(content) {
        this.content = content;
        if (this.content) {
            $("#richtext" + this.id).each(function (index) {
                $(this).summernote('destroy');
            });
            $("#richtext" + this.id).html(this.content);
            $("#richtext" + this.id).summernote(summerNoteConfig);
        }
    }
    /**
     * @return {?}
     */
    getContent() {
        /** @type {?} */
        let html = $("#richtext" + this.id).summernote('code');
        /** @type {?} */
        let text = $("<div>" + html + "</div>").text();
        return [html, text];
    }
    /**
     * @return {?}
     */
    preview() {
        if (!$('#mraeditorfullscreenDiv').length) {
            $("#fullscreen" + this.id).append(fullscreenHtml);
        }
        $("#mraeditorfullscreenClose").click(function () {
            $('#mraeditorfullscreenDiv').remove();
        });
        let [html, text] = this.getContent();
        $("#mrafullscreenHtml").html(html);
    }
}
MraRichTextSelectDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mra-richtext-select]',
            },] }
];
/** @nocollapse */
MraRichTextSelectDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
MraRichTextSelectDirective.propDecorators = {
    name: [{ type: Input, args: ['mra-richtext-select',] }]
};
if (false) {
    /** @type {?} */
    MraRichTextSelectDirective.prototype.name;
    /** @type {?} */
    MraRichTextSelectDirective.prototype.content;
    /**
     * @type {?}
     * @private
     */
    MraRichTextSelectDirective.prototype.id;
    /**
     * @type {?}
     * @private
     */
    MraRichTextSelectDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    MraRichTextSelectDirective.prototype.render;
}
export class MraRichTextShowDirective {
    /**
     * @param {?} el
     * @param {?} render
     */
    constructor(el, render) {
        this.el = el;
        this.render = render;
    }
    /**
     * @param {?} content
     * @return {?}
     */
    setContent(content) {
        /** @type {?} */
        let id = Date.now();
        /** @type {?} */
        var displayHtml = `
            <div class="card">
                <div class="card-body" id="mraeditordisplay` + id + `"></div>
            </div>
        `;
        this.render.setProperty(this.el.nativeElement, 'innerHTML', displayHtml);
        $("#mraeditordisplay" + id).html(content);
    }
}
MraRichTextShowDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mra-richtext-show]',
            },] }
];
/** @nocollapse */
MraRichTextShowDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
MraRichTextShowDirective.propDecorators = {
    name: [{ type: Input, args: ['mra-richtext-show',] }]
};
if (false) {
    /** @type {?} */
    MraRichTextShowDirective.prototype.name;
    /**
     * @type {?}
     * @private
     */
    MraRichTextShowDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    MraRichTextShowDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,