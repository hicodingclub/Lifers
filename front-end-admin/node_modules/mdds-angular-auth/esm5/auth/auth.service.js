/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { catchError, map } from 'rxjs/operators';
import { Router, NavigationEnd } from '@angular/router';
import { AUTHTICATION_SERVER_ROOT_URI } from './tokens';
var AuthenticationService = /** @class */ (function () {
    function AuthenticationService(authServerRootUri, router, http) {
        var _this = this;
        this.authServerRootUri = authServerRootUri;
        this.router = router;
        this.http = http;
        this.adminInterface = false;
        this.navigateEndTime = Date.now();
        router.events.subscribe(function (event) {
            if (event instanceof NavigationEnd) {
                _this.previousUrl = _this.currentUrl;
                _this.navigateEndTime = Date.now();
                if (event.urlAfterRedirects) {
                    _this.currentUrl = event.urlAfterRedirects;
                }
                else {
                    _this.currentUrl = event.url;
                }
            }
        });
        this.adminInterface = JSON.parse(localStorage.getItem('adminInterface'));
    }
    /**
     * @return {?}
     */
    AuthenticationService.prototype.isAuthorized = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var authRecord = JSON.parse(localStorage.getItem('mdds-auth-record'));
        if (authRecord && authRecord['accessToken']) {
            return true;
        }
        return false;
    };
    /**
     * @private
     * @return {?}
     */
    AuthenticationService.prototype.getLogoutTime = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var authRecord = JSON.parse(localStorage.getItem('mdds-auth-record'));
        if (authRecord && 'logoutTs' in authRecord) {
            return authRecord.logoutTs;
        }
        return 0;
    };
    /**
     * @return {?}
     */
    AuthenticationService.prototype.getAccessToken = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var authRecord = JSON.parse(localStorage.getItem('mdds-auth-record'));
        if (authRecord) {
            return authRecord['accessToken'];
        }
        return null;
    };
    /**
     * @return {?}
     */
    AuthenticationService.prototype.refreshToken = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var authRecord = JSON.parse(localStorage.getItem('mdds-auth-record'));
        if (!authRecord) {
            authRecord = { refreshToken: '', userName: '' };
        }
        /** @type {?} */
        var refreshToken = authRecord['refreshToken'];
        /** @type {?} */
        var userName = authRecord['userName'];
        return this.http.post(this.authServerRootUri + '/refresh', { refreshToken: refreshToken, userName: userName }).pipe(map(this.loggedIn), catchError(function (error) {
            _this.logout();
            return error;
        }));
    };
    /**
     * @param {?} response
     * @return {?}
     */
    AuthenticationService.prototype.refreshShouldHappen = /**
     * @param {?} response
     * @return {?}
     */
    function (response) {
        return response.status === 401;
    };
    /**
     * @param {?} url
     * @return {?}
     */
    AuthenticationService.prototype.verifyTokenRequest = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        if (url.endsWith(this.authServerRootUri + '/refresh') ||
            url.endsWith(this.authServerRootUri + '/login')) {
            return true;
        }
        return false;
    };
    /**
     * @return {?}
     */
    AuthenticationService.prototype.getInterruptedUrl = /**
     * @return {?}
     */
    function () {
        return this.interruptedUrl || '/';
    };
    /**
     * @return {?}
     */
    AuthenticationService.prototype.getRoutedFromUrl = /**
     * @return {?}
     */
    function () {
        return this.routedFromUrl || '/';
    };
    /**
     * @param {?} url
     * @return {?}
     */
    AuthenticationService.prototype.setInterruptedUrl = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        this.interruptedUrl = url;
        /** @type {?} */
        var currentTime = Date.now();
        if (currentTime - this.navigateEndTime > 1000) {
            // Happend > 1 sec. assume it is triggered from current page.
            this.routedFromUrl = this.currentUrl;
        }
        else {
            // page transitioned
            this.routedFromUrl = this.previousUrl;
        }
    };
    /**
     * @return {?}
     */
    AuthenticationService.prototype.getUserName = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var authRecord = JSON.parse(localStorage.getItem('mdds-auth-record'));
        if (!authRecord) {
            authRecord = { userName: '' };
        }
        return authRecord['userName'];
    };
    /**
     * @param {?} userName
     * @param {?} password
     * @return {?}
     */
    AuthenticationService.prototype.login = /**
     * @param {?} userName
     * @param {?} password
     * @return {?}
     */
    function (userName, password) {
        /** @type {?} */
        var authRecord = {
            userName: userName,
            accessToken: '',
            refreshToken: '',
            displayName: ''
        };
        localStorage.setItem('mdds-auth-record', JSON.stringify(authRecord));
        /** @type {?} */
        var options = this.adminInterface ?
            { params: new HttpParams().set('type', 'admin') } : {};
        return this.http.post(this.authServerRootUri + '/login', { username: userName, password: password }, options).pipe(map(this.loggedIn));
    };
    /**
     * @param {?} userInfo
     * @return {?}
     */
    AuthenticationService.prototype.register = /**
     * @param {?} userInfo
     * @return {?}
     */
    function (userInfo) {
        localStorage.removeItem('mdds-auth-record');
        /** @type {?} */
        var authRecord = {
            userName: userInfo.userName,
            accessToken: '',
            refreshToken: '',
            displayName: userInfo.displayName
        };
        localStorage.setItem('mdds-auth-record', JSON.stringify(authRecord));
        /** @type {?} */
        var options = this.adminInterface ?
            { params: new HttpParams().set('type', 'admin') } : {};
        return this.http.post(this.authServerRootUri + '/register', userInfo, options);
    };
    /**
     * @param {?} user
     * @return {?}
     */
    AuthenticationService.prototype.loggedIn = /**
     * @param {?} user
     * @return {?}
     */
    function (user) {
        /** @type {?} */
        var authRecord = {
            userName: '',
            accessToken: '',
            refreshToken: '',
            displayName: ''
        };
        if (user && user.accessToken) {
            authRecord['accessToken'] = user.accessToken;
        }
        if (user && user.refreshToken) {
            authRecord['refreshToken'] = user.refreshToken;
        }
        if (user && user.displayName) {
            authRecord['displayName'] = user.displayName;
        }
        if (user && user.userName) {
            authRecord['userName'] = user.userName;
        }
        localStorage.setItem('mdds-auth-record', JSON.stringify(authRecord));
        return user;
    };
    /**
     * @return {?}
     */
    AuthenticationService.prototype.logout = /**
     * @return {?}
     */
    function () {
        // remove user from local storage to log user out
        /** @type {?} */
        var authRecord = JSON.parse(localStorage.getItem('mdds-auth-record'));
        if (!authRecord) {
            authRecord = {};
        }
        authRecord.logoutTs = Date.now();
        authRecord.accessToken = '';
        authRecord.refreshToken = '';
        localStorage.setItem('mdds-auth-record', JSON.stringify(authRecord));
    };
    /**
     * @param {?} isAdminInterface
     * @return {?}
     */
    AuthenticationService.prototype.setAdminInterface = /**
     * @param {?} isAdminInterface
     * @return {?}
     */
    function (isAdminInterface) {
        this.adminInterface = isAdminInterface;
        localStorage.setItem('adminInterface', JSON.stringify(isAdminInterface));
    };
    /**
     * @return {?}
     */
    AuthenticationService.prototype.isAdminInterface = /**
     * @return {?}
     */
    function () {
        return this.adminInterface;
    };
    AuthenticationService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AuthenticationService.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [AUTHTICATION_SERVER_ROOT_URI,] }] },
        { type: Router },
        { type: HttpClient }
    ]; };
    return AuthenticationService;
}());
export { AuthenticationService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype.interruptedUrl;
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype.routedFromUrl;
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype.previousUrl;
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype.currentUrl;
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype.navigateEndTime;
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype.adminInterface;
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype.authServerRootUri;
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,