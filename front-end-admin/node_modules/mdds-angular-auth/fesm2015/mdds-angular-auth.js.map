{"version":3,"file":"mdds-angular-auth.js.map","sources":["ng://mdds-angular-auth/auth/tokens.ts","ng://mdds-angular-auth/auth/auth.service.ts","ng://mdds-angular-auth/auth/auth.guard.ts","ng://mdds-angular-auth/auth/auth.component.ts","ng://mdds-angular-auth/auth/login/login.component.ts","ng://mdds-angular-auth/auth/register/register.component.ts","ng://mdds-angular-auth/auth/auth-routing.module.ts","ng://mdds-angular-auth/auth/auth.interceptor.ts","ng://mdds-angular-auth/auth/auth-icon/auth-icon.component.ts","ng://mdds-angular-auth/auth/auth-icon/click-elsewhere.directive.ts","ng://mdds-angular-auth/auth/auth.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const AUTHTICATION_SERVER_ROOT_URI = new InjectionToken('AUTHTICATION_SERVER_ROOT_URI');\nexport const AUTHTICATION_LOGIN_PAGE_URI = new InjectionToken('AUTHTICATION_LOGIN_PAGE_URI');\nexport const AUTHTICATION_INTERFACES = new InjectionToken('AUTHTICATION_INTERFACES');","import { Injectable, Inject } from '@angular/core';\nimport { HttpClient, HttpParams, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { catchError, map, filter, retry } from 'rxjs/operators';\nimport { Observable, of } from 'rxjs';\nimport { Router, NavigationEnd  } from '@angular/router';\n\nimport { AUTHTICATION_SERVER_ROOT_URI } from './tokens';\n\n@Injectable()\nexport class AuthenticationService {\n\n  private interruptedUrl: string;\n  private routedFromUrl: string;\n\n  private previousUrl: string;\n  private currentUrl: string;\n  private navigateEndTime: number;\n  \n  private adminInterface: boolean = false;\n\n  constructor(\n            @Inject(AUTHTICATION_SERVER_ROOT_URI) private authServerRootUri: string,\n            private router: Router,\n            private http: HttpClient) {\n    this.navigateEndTime = Date.now();\n\n    router.events.subscribe(event => {\n      if (event instanceof NavigationEnd) {\n        this.previousUrl = this.currentUrl;\n        this.navigateEndTime = Date.now();\n        if (event.urlAfterRedirects) {\n          this.currentUrl = event.urlAfterRedirects;\n        } else {\n          this.currentUrl = event.url;\n        }\n      }\n    });\n    \n    this.adminInterface = JSON.parse(localStorage.getItem('adminInterface'));\n  }\n\n  isAuthorized(): boolean {\n    const authRecord = JSON.parse(localStorage.getItem('mdds-auth-record'));\n    if (authRecord && authRecord['accessToken']) {\n      return true;\n    }\n    return false;\n  }\n\n  private getLogoutTime(): number {\n    const authRecord = JSON.parse(localStorage.getItem('mdds-auth-record'));\n    if (authRecord && 'logoutTs' in authRecord) {\n        return authRecord.logoutTs;\n    }\n    return 0;\n  }\n\n  public getAccessToken(): string {\n    const authRecord = JSON.parse(localStorage.getItem('mdds-auth-record'));\n    if (authRecord) {\n      return authRecord['accessToken'];\n    }\n    return null;\n  }\n\n  public refreshToken(): Observable<any> {\n    let authRecord: any = JSON.parse(localStorage.getItem('mdds-auth-record'));\n    if (!authRecord) {\n      authRecord = {refreshToken: '', userName: ''};\n    }\n    const refreshToken: string = authRecord['refreshToken'];\n    const userName: string = authRecord['userName'];\n\n    return this.http.post<any>(\n        this.authServerRootUri + '/refresh',\n        {refreshToken: refreshToken, userName: userName}\n      ).pipe(\n        map(this.loggedIn),\n        catchError(error => {\n          this.logout();\n          return error;\n        }\n      )\n    );\n  }\n\n  public refreshShouldHappen(response: HttpErrorResponse): boolean {\n    return response.status === 401;\n  }\n\n  public verifyTokenRequest(url: string): boolean {\n    if ( url.endsWith(this.authServerRootUri + '/refresh') ||\n        url.endsWith(this.authServerRootUri + '/login')) {\n      return true;\n    }\n        return false;\n  }\n\n  public getInterruptedUrl(): string {\n    return this.interruptedUrl || '/';\n  }\n\n  public getRoutedFromUrl() {\n    return this.routedFromUrl || '/';\n  }\n\n  public setInterruptedUrl(url: string): void {\n    this.interruptedUrl = url;\n    const currentTime = Date.now();\n\n    if ( currentTime - this.navigateEndTime > 1000) {\n      // Happend > 1 sec. assume it is triggered from current page.\n      this.routedFromUrl = this.currentUrl;\n    } else {\n      // page transitioned\n      this.routedFromUrl = this.previousUrl;\n    }\n  }\n\n  public getUserName(): string {\n    let authRecord: any = JSON.parse(localStorage.getItem('mdds-auth-record'));\n    if (!authRecord) {\n      authRecord = {userName: ''};\n    }\n    return authRecord['userName'];\n  }\n\n  login(userName: string, password: string) {\n    const authRecord: any = {\n      userName: userName,\n      accessToken: '',\n      refreshToken: '',\n      displayName: ''\n    };\n    localStorage.setItem('mdds-auth-record', JSON.stringify(authRecord));\n\n    const options = this.adminInterface ?\n       { params: new HttpParams().set('type', 'admin') } : {};\n    \n    return this.http.post<any>(this.authServerRootUri + '/login',\n        { username: userName, password: password }, options\n      ).pipe(map(this.loggedIn));\n  }\n\n  register(userInfo: any) {\n    localStorage.removeItem('mdds-auth-record');\n    const authRecord: any = {\n      userName: userInfo.userName,\n      accessToken: '',\n      refreshToken: '',\n      displayName: userInfo.displayName\n    };\n    localStorage.setItem('mdds-auth-record', JSON.stringify(authRecord));\n    \n    const options = this.adminInterface ?\n       { params: new HttpParams().set('type', 'admin') } : {};\n\n    return this.http.post<any>(this.authServerRootUri + '/register', userInfo, options);\n  }\n\n  loggedIn(user) {\n    const authRecord: any = {\n      userName: '',\n      accessToken: '',\n      refreshToken: '',\n      displayName: ''\n    };\n    if (user && user.accessToken) {\n      authRecord['accessToken'] = user.accessToken;\n    }\n    if (user && user.refreshToken) {\n      authRecord['refreshToken'] = user.refreshToken;\n    }\n    if (user && user.displayName) {\n      authRecord['displayName'] = user.displayName;\n    }\n    if (user && user.userName) {\n      authRecord['userName'] = user.userName;\n    }\n    localStorage.setItem('mdds-auth-record', JSON.stringify(authRecord));\n    return user;\n  }\n\n  logout() {\n    // remove user from local storage to log user out\n    let authRecord = JSON.parse(localStorage.getItem('mdds-auth-record'));\n    if (!authRecord) {\n        authRecord = {};\n    }\n    authRecord.logoutTs = Date.now();\n    authRecord.accessToken = '';\n    authRecord.refreshToken = '';\n    localStorage.setItem('mdds-auth-record', JSON.stringify(authRecord));\n  }\n  \n\n  setAdminInterface(isAdminInterface: boolean): void {\n    this.adminInterface = isAdminInterface;\n    localStorage.setItem('adminInterface', JSON.stringify(isAdminInterface));\n  }\n  \n  isAdminInterface(): boolean {\n    return this.adminInterface;\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Router, CanActivate, CanActivateChild, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { AuthenticationService } from './auth.service';\nimport { AUTHTICATION_LOGIN_PAGE_URI } from './tokens';\n\n@Injectable()\nexport class AuthGuard implements CanActivate, CanActivateChild {\n  constructor(\n    private router: Router,\n    private authService: AuthenticationService,\n    @Inject(AUTHTICATION_LOGIN_PAGE_URI) private loginPageUri: string) { }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    if (this.authService.isAuthorized()) {\n      // logged in so return true\n      return true;\n    }\n\n    // not logged in so redirect to login page with the return url\n    this.authService.setInterruptedUrl(state.url);\n    this.router.navigate([this.loginPageUri]);\n    return false;\n  }\n  canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    return this.canActivate(route, state);\n  }\n}\n","import { Component, Inject } from '@angular/core';\nimport { AuthenticationService } from './auth.service';\nimport { AUTHTICATION_INTERFACES } from './tokens';\n\n@Component({\n    selector: 'app-auth',\n    templateUrl: 'auth.component.html'\n})\n\nexport class AuthenticationComponent {\n    adminInterface: boolean = false;\n    userIntEnabled: boolean = false;\n    adminIntEnabled: boolean = false;\n\n    constructor(\n        private authenticationService: AuthenticationService,\n        @Inject(AUTHTICATION_INTERFACES) private authenticationInterfaces: string\n        ) {\n      \n      let str = authenticationInterfaces.toLowerCase();\n      if (str.includes(\"user\") && str.includes(\"admin\") ) {//both interface. Check cached.\n        this.adminInterface = authenticationService.isAdminInterface();\n        this.userIntEnabled = true;\n        this.adminIntEnabled = true;\n      } else if (str.includes(\"admin\")) { //administrator only\n        this.authenticationService.setAdminInterface(true);\n        this.adminIntEnabled = true;\n      } else { //users only\n        this.authenticationService.setAdminInterface(false);\n        this.userIntEnabled = true;\n      }\n    }\n  \n    setAdminInterface(adminInterface: boolean): void {\n      this.adminInterface = adminInterface;\n      this.authenticationService.setAdminInterface(this.adminInterface);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport { AuthenticationService } from '../auth.service';\n\n@Component(\n    {templateUrl: 'login.component.html',\n     styleUrls: ['login.component.css']\n    })\nexport class LoginComponent implements OnInit {\n    loginForm: FormGroup;\n    loading = false;\n    submitted = false;\n    servererror = false;\n    serverText = '';\n    returnUrl: string;\n  \n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private authenticationService: AuthenticationService) { }\n\n    ngOnInit() {\n        this.loginForm = this.formBuilder.group({\n            username: ['', Validators.required],\n            password: ['', Validators.required]\n        });\n\n        // reset login status\n        this.authenticationService.logout();\n\n        // get return url from route parameters or default to '/'\n        // this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.loginForm.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // stop here if form is invalid\n        if (this.loginForm.invalid) {\n            return;\n        }\n        let returnUrl = this.authenticationService.getInterruptedUrl();\n        if (this.router.url === returnUrl) { returnUrl = '/'; } // home page\n\n        this.loading = true;\n        this.authenticationService.login(this.f.username.value, this.f.password.value)\n            .pipe(first())\n            .subscribe(\n                data => {\n                    this.servererror = false;\n                    this.router.navigate([returnUrl]);\n                    this.loading = false;\n                },\n                error => {\n                    // this.alertService.error(error);\n                    this.servererror = true;\n                    this.serverText = error.error.error;\n                    this.loading = false;\n                });\n    }\n\n    cancel() {\n      const routedFromUrl = this.authenticationService.getRoutedFromUrl();\n      this.router.navigate([routedFromUrl]);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\n\nimport { AuthenticationService } from '../auth.service';\n\nconst validatePasswords = function(form) {\n    const passwordConf = form.controls.password_conf.value;\n    const password = form.controls.password.value;\n\n    if (passwordConf === password) {\n        return null;\n    } else {\n        form.controls.password_conf.setErrors({'passwordNotSame': true});\n        return null;\n    }\n};\n\n@Component(\n    {templateUrl: 'register.component.html',\n     styleUrls: ['register.component.css']\n    })\nexport class RegisterComponent implements OnInit {\n    registerForm: FormGroup;\n    loading = false;\n    submitted = false;\n    servererror = false;\n    serverText = '';\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private router: Router,\n        private route: ActivatedRoute,\n        private authenticationService: AuthenticationService) { }\n\n\n    ngOnInit() {\n        this.registerForm = this.formBuilder.group({\n            username: ['', Validators.required],\n            password: ['', [Validators.required, Validators.minLength(6)]],\n            password_conf: ['', [Validators.required, Validators.minLength(6)]]\n        }, {validator: validatePasswords });\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.registerForm.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // stop here if form is invalid\n        if (this.registerForm.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        this.authenticationService.register(this.registerForm.value)\n            .pipe(first())\n            .subscribe(\n                data => {\n                    // this.alertService.success('Registration successful', true);\n                    this.router.navigate(['../login'], {relativeTo: this.route, });\n                    this.servererror = false;\n                },\n                error => {\n                    // this.alertService.error(error);\n                    // alert(\"Error login\");\n                    this.servererror = true;\n                    this.serverText = error.error.error;\n                    this.loading = false;\n                });\n    }\n    cancel() {\n      const routedFromUrl = this.authenticationService.getRoutedFromUrl();\n      this.router.navigate([routedFromUrl]);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { AuthenticationComponent } from './auth.component';\nimport { LoginComponent } from './login';\nimport { RegisterComponent } from './register';\n\nconst routes: Routes = [\n  { path: 'auth', \n    component: AuthenticationComponent,\n    children: [ \n\n                { path: \"login\",  component: LoginComponent },\n                { path: 'register', component: RegisterComponent },\n\n                { path: '',  redirectTo: 'login', pathMatch: 'full' },\n                { path: '**', redirectTo: 'login' }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }","import { Injectable, Inject } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpResponse,\n  HttpErrorResponse,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable, BehaviorSubject, throwError, EMPTY } from 'rxjs';\nimport { tap, catchError, switchMap, filter, take } from 'rxjs/operators';\n\nimport { AuthenticationService } from './auth.service';\nimport { AUTHTICATION_LOGIN_PAGE_URI } from './tokens';\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n  private refreshTokenInProgress = false;\n  // Refresh Token Subject tracks the current token, or is null if no token is currently\n  // available (e.g. refresh pending).\n  private refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\n\n  constructor(\n    private router: Router,\n    private authService: AuthenticationService,\n    @Inject(AUTHTICATION_LOGIN_PAGE_URI) private loginPageUri: string\n    ) {}\n\n  addAuthHeader(request) {\n    if (this.authService.isAuthorized()) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${this.authService.getAccessToken()}`\n        }\n      });\n    }\n    return request;\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(this.addAuthHeader(request))\n      .pipe(\n        /*\n        tap((event: HttpEvent<any>) => {\n\t        if (event instanceof HttpResponse) {\n\t          ;\n\t        }\n\t      }, (err: any) => {\n            if (err instanceof HttpErrorResponse) {\n              if (err.status === 401) {\n                this.authService.setInterruptedUrl(this.router.url);\n                this.router.navigate([this.loginPageUri]);\n              }\n            }\n        })\n        */\n        catchError((error) => {\n          if (error instanceof HttpErrorResponse && error.status === 401) {\n            if (this.refreshTokenInProgress && !this.authService.verifyTokenRequest(request.url)) {\n                // If refreshTokenInProgress is true, we will wait until refreshTokenSubject has a non-null value\n                // â which means the new token is ready and we can retry the request again\n                return this.refreshTokenSubject.pipe(\n                    filter(result => result !== null),\n                    take(1),\n                    switchMap(() => next.handle(this.addAuthHeader(request)))\n                );\n\n            } else {\n                this.refreshTokenInProgress = true;\n                // Set the refreshTokenSubject to null so that subsequent API calls will wait until the new token has been retrieved\n                this.refreshTokenSubject.next(null);\n                return this.authService.refreshToken().pipe(\n                        switchMap((data) => {\n                            this.refreshTokenInProgress = false;\n                            this.refreshTokenSubject.next(data);\n                            return next.handle(this.addAuthHeader(request));\n                        }),\n                        catchError((err) => {\n                            // looks like this part will not hit\n                            this.refreshTokenInProgress = false;\n                            this.authService.setInterruptedUrl(this.router.url);\n                            this.router.navigate([this.loginPageUri]);\n                            return EMPTY;\n                        })\n                );\n            }\n          }\n          if (this.authService.verifyTokenRequest(request.url)) {\n            // refreshToken failed. Go to login page.\n            this.refreshTokenInProgress = false;\n            this.authService.setInterruptedUrl(this.router.url);\n            this.router.navigate([this.loginPageUri]);\n          }\n          return throwError(error);\n        })\n    );\n  }\n}\n","import { Component, OnInit, Inject  } from '@angular/core';\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { AuthenticationService } from '../auth.service';\n\nimport { AUTHTICATION_LOGIN_PAGE_URI } from '../tokens';\n\n@Component({\n    selector: 'app-auth-icon',\n    templateUrl: 'auth-icon.component.html',\n    styleUrls: ['auth-icon.component.css']\n})\nexport class AuthIconComponent implements OnInit {\n  public popup = false;\n  public popupStyle: any = {};\n  public userName = 'Please login';\n  public userNameShort = 'Please login';\n\n  constructor(\n    private router: Router,\n    private authService: AuthenticationService,\n    @Inject(AUTHTICATION_LOGIN_PAGE_URI) private loginPageUri: string) { }\n\n  ngOnInit() {\n    this.isAuthorized();\n  }\n\n  public toggle(event) {\n    if (!this.popup) {\n      const right = (window.innerWidth - event.x) - 2;\n      const top = event.y + 15;\n\n      this.popupStyle = {\n        'right': right.toString() + 'px',\n        'top': top.toString() + 'px',\n      };\n    }\n    this.popup = !this.popup;\n  }\n\n  public closePopup() {\n    this.popup = false;\n  }\n\n  public isAuthorized() {\n    const name = this.authService.getUserName();\n    const isAuth = this.authService.isAuthorized();\n    if (name) {\n        this.userName = name;\n        if (isAuth) {\n          if (name.length > 12) {\n            this.userNameShort = name.substring(0, 10) + '...';\n          } else {\n            this.userNameShort = name.substring(0, 13);\n          }\n        } else {\n          this.userNameShort = 'Please login';\n        }\n    }\n    return isAuth;\n  }\n\n  public login() {\n    // not logged in so redirect to login page with the return url\n    const state: RouterStateSnapshot = this.router.routerState.snapshot;\n    this.authService.setInterruptedUrl(state.url);\n    this.popup = false;\n    this.router.navigate([this.loginPageUri]);\n  }\n\n  public logout() {\n    // not logged in so redirect to login page with the return url\n    this.authService.logout();\n    this.popup = false;\n    this.router.navigated = false; // refresh current page;\n    this.router.navigate(['/']); // home page\n  }\n}\n","import { Directive, EventEmitter, ElementRef, HostListener, Output } from '@angular/core';\n \n@Directive({ selector: '[clickElsewhere]' })\nexport class ClickElsewhereDirective {\n  @Output() clickElsewhere = new EventEmitter<MouseEvent>(); \n \n  constructor(private elementRef: ElementRef) {}\n \n  @HostListener('document:click', ['$event'])\n  public onDocumentClick(event: MouseEvent): void {\n    const targetElement = event.target as HTMLElement;\n \n      // Check if the click was outside the element\n      if (targetElement && !this.elementRef.nativeElement.contains(targetElement)) {\n \n         this.clickElsewhere.emit(event);\n      }\n  }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { AuthenticationService } from './auth.service';\nimport { AUTHTICATION_LOGIN_PAGE_URI, AUTHTICATION_SERVER_ROOT_URI } from './tokens';\nimport { TokenInterceptor } from './auth.interceptor';\nimport { AuthenticationComponent } from './auth.component';\nimport { LoginComponent } from './login';\nimport { RegisterComponent } from './register';\nimport { AuthGuard } from './auth.guard';\nimport { AuthIconComponent } from './auth-icon/auth-icon.component';\nimport { ClickElsewhereDirective } from './auth-icon/click-elsewhere.directive';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        HttpClientModule,\n\n        AuthRoutingModule\n    ],\n    declarations: [\n        AuthenticationComponent,\n        LoginComponent,\n        RegisterComponent,\n        AuthIconComponent,\n\n        ClickElsewhereDirective\n    ],\n    exports: [\n        AuthIconComponent\n    ],\n    providers: [\n        AuthenticationService,\n        AuthGuard,\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: TokenInterceptor,\n            multi: true\n        },\n    ]\n})\nexport class AuthenticationModule { }\n"],"names":[],"mappings":";;;;;;;;;;;;AAAA;AAEA,MAAa,4BAA4B,GAAG,IAAI,cAAc,CAAC,8BAA8B,CAAC;;AAC9F,MAAa,2BAA2B,GAAG,IAAI,cAAc,CAAC,6BAA6B,CAAC;;AAC5F,MAAa,uBAAuB,GAAG,IAAI,cAAc,CAAC,yBAAyB,CAAC;;;;;;ACJpF,MASa,qBAAqB;;;;;;IAWhC,YACwD,iBAAyB,EAC/D,MAAc,EACd,IAAgB;QAFsB,sBAAiB,GAAjB,iBAAiB,CAAQ;QAC/D,WAAM,GAAN,MAAM,CAAQ;QACd,SAAI,GAAJ,IAAI,CAAY;QAL1B,mBAAc,GAAY,KAAK,CAAC;QAMtC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAElC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK;YAC3B,IAAI,KAAK,YAAY,aAAa,EAAE;gBAClC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC;gBACnC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAClC,IAAI,KAAK,CAAC,iBAAiB,EAAE;oBAC3B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,iBAAiB,CAAC;iBAC3C;qBAAM;oBACL,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,GAAG,CAAC;iBAC7B;aACF;SACF,CAAC,CAAC;QAEH,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;KAC1E;;;;IAED,YAAY;;cACJ,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;QACvE,IAAI,UAAU,IAAI,UAAU,CAAC,aAAa,CAAC,EAAE;YAC3C,OAAO,IAAI,CAAC;SACb;QACD,OAAO,KAAK,CAAC;KACd;;;;;IAEO,aAAa;;cACb,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;QACvE,IAAI,UAAU,IAAI,UAAU,IAAI,UAAU,EAAE;YACxC,OAAO,UAAU,CAAC,QAAQ,CAAC;SAC9B;QACD,OAAO,CAAC,CAAC;KACV;;;;IAEM,cAAc;;cACb,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;QACvE,IAAI,UAAU,EAAE;YACd,OAAO,UAAU,CAAC,aAAa,CAAC,CAAC;SAClC;QACD,OAAO,IAAI,CAAC;KACb;;;;IAEM,YAAY;;YACb,UAAU,GAAQ,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;QAC1E,IAAI,CAAC,UAAU,EAAE;YACf,UAAU,GAAG,EAAC,YAAY,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAC,CAAC;SAC/C;;cACK,YAAY,GAAW,UAAU,CAAC,cAAc,CAAC;;cACjD,QAAQ,GAAW,UAAU,CAAC,UAAU,CAAC;QAE/C,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CACjB,IAAI,CAAC,iBAAiB,GAAG,UAAU,EACnC,EAAC,YAAY,EAAE,YAAY,EAAE,QAAQ,EAAE,QAAQ,EAAC,CACjD,CAAC,IAAI,CACJ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,EAClB,UAAU,CAAC,KAAK;YACd,IAAI,CAAC,MAAM,EAAE,CAAC;YACd,OAAO,KAAK,CAAC;SACd,CACF,CACF,CAAC;KACH;;;;;IAEM,mBAAmB,CAAC,QAA2B;QACpD,OAAO,QAAQ,CAAC,MAAM,KAAK,GAAG,CAAC;KAChC;;;;;IAEM,kBAAkB,CAAC,GAAW;QACnC,IAAK,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,GAAG,UAAU,CAAC;YAClD,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,GAAG,QAAQ,CAAC,EAAE;YACnD,OAAO,IAAI,CAAC;SACb;QACG,OAAO,KAAK,CAAC;KAClB;;;;IAEM,iBAAiB;QACtB,OAAO,IAAI,CAAC,cAAc,IAAI,GAAG,CAAC;KACnC;;;;IAEM,gBAAgB;QACrB,OAAO,IAAI,CAAC,aAAa,IAAI,GAAG,CAAC;KAClC;;;;;IAEM,iBAAiB,CAAC,GAAW;QAClC,IAAI,CAAC,cAAc,GAAG,GAAG,CAAC;;cACpB,WAAW,GAAG,IAAI,CAAC,GAAG,EAAE;QAE9B,IAAK,WAAW,GAAG,IAAI,CAAC,eAAe,GAAG,IAAI,EAAE;;YAE9C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC;SACtC;aAAM;;YAEL,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC;SACvC;KACF;;;;IAEM,WAAW;;YACZ,UAAU,GAAQ,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;QAC1E,IAAI,CAAC,UAAU,EAAE;YACf,UAAU,GAAG,EAAC,QAAQ,EAAE,EAAE,EAAC,CAAC;SAC7B;QACD,OAAO,UAAU,CAAC,UAAU,CAAC,CAAC;KAC/B;;;;;;IAED,KAAK,CAAC,QAAgB,EAAE,QAAgB;;cAChC,UAAU,GAAQ;YACtB,QAAQ,EAAE,QAAQ;YAClB,WAAW,EAAE,EAAE;YACf,YAAY,EAAE,EAAE;YAChB,WAAW,EAAE,EAAE;SAChB;QACD,YAAY,CAAC,OAAO,CAAC,kBAAkB,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;;cAE/D,OAAO,GAAG,IAAI,CAAC,cAAc;YAChC,EAAE,MAAM,EAAE,IAAI,UAAU,EAAE,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE,GAAG,EAAE;QAEzD,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,IAAI,CAAC,iBAAiB,GAAG,QAAQ,EACxD,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE,OAAO,CACpD,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;KAC9B;;;;;IAED,QAAQ,CAAC,QAAa;QACpB,YAAY,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC;;cACtC,UAAU,GAAQ;YACtB,QAAQ,EAAE,QAAQ,CAAC,QAAQ;YAC3B,WAAW,EAAE,EAAE;YACf,YAAY,EAAE,EAAE;YAChB,WAAW,EAAE,QAAQ,CAAC,WAAW;SAClC;QACD,YAAY,CAAC,OAAO,CAAC,kBAAkB,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;;cAE/D,OAAO,GAAG,IAAI,CAAC,cAAc;YAChC,EAAE,MAAM,EAAE,IAAI,UAAU,EAAE,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE,GAAG,EAAE;QAEzD,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,IAAI,CAAC,iBAAiB,GAAG,WAAW,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;KACrF;;;;;IAED,QAAQ,CAAC,IAAI;;cACL,UAAU,GAAQ;YACtB,QAAQ,EAAE,EAAE;YACZ,WAAW,EAAE,EAAE;YACf,YAAY,EAAE,EAAE;YAChB,WAAW,EAAE,EAAE;SAChB;QACD,IAAI,IAAI,IAAI,IAAI,CAAC,WAAW,EAAE;YAC5B,UAAU,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC;SAC9C;QACD,IAAI,IAAI,IAAI,IAAI,CAAC,YAAY,EAAE;YAC7B,UAAU,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC;SAChD;QACD,IAAI,IAAI,IAAI,IAAI,CAAC,WAAW,EAAE;YAC5B,UAAU,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC;SAC9C;QACD,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAE;YACzB,UAAU,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC;SACxC;QACD,YAAY,CAAC,OAAO,CAAC,kBAAkB,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;QACrE,OAAO,IAAI,CAAC;KACb;;;;IAED,MAAM;;;YAEA,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;QACrE,IAAI,CAAC,UAAU,EAAE;YACb,UAAU,GAAG,EAAE,CAAC;SACnB;QACD,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACjC,UAAU,CAAC,WAAW,GAAG,EAAE,CAAC;QAC5B,UAAU,CAAC,YAAY,GAAG,EAAE,CAAC;QAC7B,YAAY,CAAC,OAAO,CAAC,kBAAkB,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;KACtE;;;;;IAGD,iBAAiB,CAAC,gBAAyB;QACzC,IAAI,CAAC,cAAc,GAAG,gBAAgB,CAAC;QACvC,YAAY,CAAC,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC;KAC1E;;;;IAED,gBAAgB;QACd,OAAO,IAAI,CAAC,cAAc,CAAC;KAC5B;;;YAnMF,UAAU;;;;yCAaE,MAAM,SAAC,4BAA4B;YAjBvC,MAAM;YAHN,UAAU;;;;;;;ACDnB,MAMa,SAAS;;;;;;IACpB,YACU,MAAc,EACd,WAAkC,EACG,YAAoB;QAFzD,WAAM,GAAN,MAAM,CAAQ;QACd,gBAAW,GAAX,WAAW,CAAuB;QACG,iBAAY,GAAZ,YAAY,CAAQ;KAAK;;;;;;IAExE,WAAW,CAAC,KAA6B,EAAE,KAA0B;QACnE,IAAI,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,EAAE;;YAEnC,OAAO,IAAI,CAAC;SACb;;QAGD,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC9C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;QAC1C,OAAO,KAAK,CAAC;KACd;;;;;;IACD,gBAAgB,CAAC,KAA6B,EAAE,KAA0B;QACxE,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;KACvC;;;YApBF,UAAU;;;;YAJF,MAAM;YACN,qBAAqB;yCAQzB,MAAM,SAAC,2BAA2B;;;;;;;ACVvC,MASa,uBAAuB;;;;;IAKhC,YACY,qBAA4C,EACX,wBAAgC;QADjE,0BAAqB,GAArB,qBAAqB,CAAuB;QACX,6BAAwB,GAAxB,wBAAwB,CAAQ;QAN7E,mBAAc,GAAY,KAAK,CAAC;QAChC,mBAAc,GAAY,KAAK,CAAC;QAChC,oBAAe,GAAY,KAAK,CAAC;;YAO3B,GAAG,GAAG,wBAAwB,CAAC,WAAW,EAAE;QAChD,IAAI,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAG;YAClD,IAAI,CAAC,cAAc,GAAG,qBAAqB,CAAC,gBAAgB,EAAE,CAAC;YAC/D,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAC3B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;SAC7B;aAAM,IAAI,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;YAChC,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YACnD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;SAC7B;aAAM;YACL,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;YACpD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;SAC5B;KACF;;;;;IAED,iBAAiB,CAAC,cAAuB;QACvC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;KACnE;;;YAhCJ,SAAS,SAAC;gBACP,QAAQ,EAAE,UAAU;gBACpB,oMAAkC;aACrC;;;;YANQ,qBAAqB;yCAerB,MAAM,SAAC,uBAAuB;;;;;;;AChBvC,MAUa,cAAc;;;;;;;IAQvB,YACY,WAAwB,EACxB,KAAqB,EACrB,MAAc,EACd,qBAA4C;QAH5C,gBAAW,GAAX,WAAW,CAAa;QACxB,UAAK,GAAL,KAAK,CAAgB;QACrB,WAAM,GAAN,MAAM,CAAQ;QACd,0BAAqB,GAArB,qBAAqB,CAAuB;QAVxD,YAAO,GAAG,KAAK,CAAC;QAChB,cAAS,GAAG,KAAK,CAAC;QAClB,gBAAW,GAAG,KAAK,CAAC;QACpB,eAAU,GAAG,EAAE,CAAC;KAO6C;;;;IAE7D,QAAQ;QACJ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACpC,QAAQ,EAAE,CAAC,EAAE,EAAE,UAAU,CAAC,QAAQ,CAAC;YACnC,QAAQ,EAAE,CAAC,EAAE,EAAE,UAAU,CAAC,QAAQ,CAAC;SACtC,CAAC,CAAC;;QAGH,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,CAAC;;;KAIvC;;;;;IAGD,IAAI,CAAC,KAAK,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;;;;IAE3C,QAAQ;QACJ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;;QAGtB,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE;YACxB,OAAO;SACV;;YACG,SAAS,GAAG,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,EAAE;QAC9D,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK,SAAS,EAAE;YAAE,SAAS,GAAG,GAAG,CAAC;SAAE;QAEvD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC;aACzE,IAAI,CAAC,KAAK,EAAE,CAAC;aACb,SAAS,CACN,IAAI;YACA,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YACzB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YAClC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;SACxB,EACD,KAAK;;YAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC;YACpC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;SACxB,CAAC,CAAC;KACd;;;;IAED,MAAM;;cACE,aAAa,GAAG,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,EAAE;QACnE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;KACvC;;;YAhEJ,SAAS,SACN,EAAC,8zEAAmC,gBAEnC;;;;YAPI,WAAW;YADH,cAAc;YAAtB,MAAM;YAGN,qBAAqB;;;;;;;;;;;;ACJ9B;MAOM,iBAAiB,GAAG,UAAS,IAAI;;UAC7B,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK;;UAChD,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK;IAE7C,IAAI,YAAY,KAAK,QAAQ,EAAE;QAC3B,OAAO,IAAI,CAAC;KACf;SAAM;QACH,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAC,EAAC,iBAAiB,EAAE,IAAI,EAAC,CAAC,CAAC;QACjE,OAAO,IAAI,CAAC;KACf;CACJ;MAMY,iBAAiB;;;;;;;IAO1B,YACY,WAAwB,EACxB,MAAc,EACd,KAAqB,EACrB,qBAA4C;QAH5C,gBAAW,GAAX,WAAW,CAAa;QACxB,WAAM,GAAN,MAAM,CAAQ;QACd,UAAK,GAAL,KAAK,CAAgB;QACrB,0BAAqB,GAArB,qBAAqB,CAAuB;QATxD,YAAO,GAAG,KAAK,CAAC;QAChB,cAAS,GAAG,KAAK,CAAC;QAClB,gBAAW,GAAG,KAAK,CAAC;QACpB,eAAU,GAAG,EAAE,CAAC;KAM6C;;;;IAG7D,QAAQ;QACJ,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACvC,QAAQ,EAAE,CAAC,EAAE,EAAE,UAAU,CAAC,QAAQ,CAAC;YACnC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9D,aAAa,EAAE,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;SACtE,EAAE,EAAC,SAAS,EAAE,iBAAiB,EAAE,CAAC,CAAC;KACvC;;;;;IAGD,IAAI,CAAC,KAAK,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE;;;;IAE9C,QAAQ;QACJ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;;QAGtB,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;YAC3B,OAAO;SACV;QAED,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;aACvD,IAAI,CAAC,KAAK,EAAE,CAAC;aACb,SAAS,CACN,IAAI;;YAEA,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,EAAE,EAAC,UAAU,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;YAC/D,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;SAC5B,EACD,KAAK;;;YAGD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC;YACpC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;SACxB,CAAC,CAAC;KACd;;;;IACD,MAAM;;cACE,aAAa,GAAG,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,EAAE;QACnE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;KACvC;;;YAzDJ,SAAS,SACN,EAAC,yhGAAsC,2FAEtC;;;;YApBI,WAAW;YADX,MAAM;YAAE,cAAc;YAItB,qBAAqB;;;;;;;;;;;;ACL9B;MAOM,MAAM,GAAW;IACrB,EAAE,IAAI,EAAE,MAAM;QACZ,SAAS,EAAE,uBAAuB;QAClC,QAAQ,EAAE;YAEE,EAAE,IAAI,EAAE,OAAO,EAAG,SAAS,EAAE,cAAc,EAAE;YAC7C,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,iBAAiB,EAAE;YAElD,EAAE,IAAI,EAAE,EAAE,EAAG,UAAU,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE;YACrD,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE;SAC9C;KACF;CACF;AAMD,MAAa,iBAAiB;;;YAJ7B,QAAQ,SAAC;gBACR,OAAO,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gBACxC,OAAO,EAAE,CAAC,YAAY,CAAC;aACxB;;;;;;;ACxBD,MAiBa,gBAAgB;;;;;;IAM3B,YACU,MAAc,EACd,WAAkC,EACG,YAAoB;QAFzD,WAAM,GAAN,MAAM,CAAQ;QACd,gBAAW,GAAX,WAAW,CAAuB;QACG,iBAAY,GAAZ,YAAY,CAAQ;QAR3D,2BAAsB,GAAG,KAAK,CAAC;;;QAG/B,wBAAmB,GAAyB,IAAI,eAAe,CAAM,IAAI,CAAC,CAAC;KAM7E;;;;;IAEN,aAAa,CAAC,OAAO;QACnB,IAAI,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,EAAE;YACnC,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC;gBACtB,UAAU,EAAE;oBACV,aAAa,EAAE,UAAU,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,EAAE;iBAC7D;aACF,CAAC,CAAC;SACJ;QACD,OAAO,OAAO,CAAC;KAChB;;;;;;IAED,SAAS,CAAC,OAAyB,EAAE,IAAiB;QACpD,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;aAC5C,IAAI;;;;;;;;;;;;;;;QAeH,UAAU,CAAC,CAAC,KAAK;YACf,IAAI,KAAK,YAAY,iBAAiB,IAAI,KAAK,CAAC,MAAM,KAAK,GAAG,EAAE;gBAC9D,IAAI,IAAI,CAAC,sBAAsB,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;;;oBAGlF,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAChC,MAAM,CAAC,MAAM,IAAI,MAAM,KAAK,IAAI,CAAC,EACjC,IAAI,CAAC,CAAC,CAAC,EACP,SAAS,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,CAC5D,CAAC;iBAEL;qBAAM;oBACH,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;;oBAEnC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACpC,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC,IAAI,CACnC,SAAS,CAAC,CAAC,IAAI;wBACX,IAAI,CAAC,sBAAsB,GAAG,KAAK,CAAC;wBACpC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBACpC,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC;qBACnD,CAAC,EACF,UAAU,CAAC,CAAC,GAAG;;wBAEX,IAAI,CAAC,sBAAsB,GAAG,KAAK,CAAC;wBACpC,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;wBACpD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;wBAC1C,OAAO,KAAK,CAAC;qBAChB,CAAC,CACT,CAAC;iBACL;aACF;YACD,IAAI,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;;gBAEpD,IAAI,CAAC,sBAAsB,GAAG,KAAK,CAAC;gBACpC,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACpD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;aAC3C;YACD,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;SAC1B,CAAC,CACL,CAAC;KACH;;;YAjFF,UAAU;;;;YAPF,MAAM;YAIN,qBAAqB;yCAazB,MAAM,SAAC,2BAA2B;;;;;;;AC1BvC,MAWa,iBAAiB;;;;;;IAM5B,YACU,MAAc,EACd,WAAkC,EACG,YAAoB;QAFzD,WAAM,GAAN,MAAM,CAAQ;QACd,gBAAW,GAAX,WAAW,CAAuB;QACG,iBAAY,GAAZ,YAAY,CAAQ;QAR5D,UAAK,GAAG,KAAK,CAAC;QACd,eAAU,GAAQ,EAAE,CAAC;QACrB,aAAQ,GAAG,cAAc,CAAC;QAC1B,kBAAa,GAAG,cAAc,CAAC;KAKkC;;;;IAExE,QAAQ;QACN,IAAI,CAAC,YAAY,EAAE,CAAC;KACrB;;;;;IAEM,MAAM,CAAC,KAAK;QACjB,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;;kBACT,KAAK,GAAG,CAAC,MAAM,CAAC,UAAU,GAAG,KAAK,CAAC,CAAC,IAAI,CAAC;;kBACzC,GAAG,GAAG,KAAK,CAAC,CAAC,GAAG,EAAE;YAExB,IAAI,CAAC,UAAU,GAAG;gBAChB,OAAO,EAAE,KAAK,CAAC,QAAQ,EAAE,GAAG,IAAI;gBAChC,KAAK,EAAE,GAAG,CAAC,QAAQ,EAAE,GAAG,IAAI;aAC7B,CAAC;SACH;QACD,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;KAC1B;;;;IAEM,UAAU;QACf,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;KACpB;;;;IAEM,YAAY;;cACX,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE;;cACrC,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE;QAC9C,IAAI,IAAI,EAAE;YACN,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,IAAI,MAAM,EAAE;gBACV,IAAI,IAAI,CAAC,MAAM,GAAG,EAAE,EAAE;oBACpB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;iBACpD;qBAAM;oBACL,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;iBAC5C;aACF;iBAAM;gBACL,IAAI,CAAC,aAAa,GAAG,cAAc,CAAC;aACrC;SACJ;QACD,OAAO,MAAM,CAAC;KACf;;;;IAEM,KAAK;;;cAEJ,KAAK,GAAwB,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ;QACnE,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC9C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;KAC3C;;;;IAEM,MAAM;;QAEX,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;QAC1B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,KAAK,CAAC;QAC9B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;KAC7B;;;YArEF,SAAS,SAAC;gBACP,QAAQ,EAAE,eAAe;gBACzB,i+BAAuC;;aAE1C;;;;YATQ,MAAM;YACN,qBAAqB;yCAkBzB,MAAM,SAAC,2BAA2B;;;;;;;ACpBvC,MAGa,uBAAuB;;;;IAGlC,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QAFhC,mBAAc,GAAG,IAAI,YAAY,EAAc,CAAC;KAEZ;;;;;IAGvC,eAAe,CAAC,KAAiB;;cAChC,aAAa,sBAAG,KAAK,CAAC,MAAM,EAAe;;QAG/C,IAAI,aAAa,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE;YAE1E,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAClC;KACJ;;;YAfF,SAAS,SAAC,EAAE,QAAQ,EAAE,kBAAkB,EAAE;;;;YAFT,UAAU;;;6BAIzC,MAAM;8BAIN,YAAY,SAAC,gBAAgB,EAAE,CAAC,QAAQ,CAAC;;;;;;;ACR5C,MA+Ca,oBAAoB;;;YA9BhC,QAAQ,SAAC;gBACN,OAAO,EAAE;oBACL,YAAY;oBACZ,WAAW;oBACX,mBAAmB;oBACnB,gBAAgB;oBAEhB,iBAAiB;iBACpB;gBACD,YAAY,EAAE;oBACV,uBAAuB;oBACvB,cAAc;oBACd,iBAAiB;oBACjB,iBAAiB;oBAEjB,uBAAuB;iBAC1B;gBACD,OAAO,EAAE;oBACL,iBAAiB;iBACpB;gBACD,SAAS,EAAE;oBACP,qBAAqB;oBACrB,SAAS;oBACT;wBACI,OAAO,EAAE,iBAAiB;wBAC1B,QAAQ,EAAE,gBAAgB;wBAC1B,KAAK,EAAE,IAAI;qBACd;iBACJ;aACJ;;;;;;;;;;;;;;;"}
